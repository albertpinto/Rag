 So, last time we talked about, so Python is a simple language. It is quite literally what you think it is when you read code. There are no generally it's very readable. There's not much syntactic clutter. That's the good side. But it comes with one cost though. White spaces are character are syntax. So if you screw up your indentation, the code will stop working. So I'll run through it because it is possible that many of you already know this most of you do. In the audience, I'm not able to see everybody's name. Abhishek, Patrick, then. Dhwani, do you know Python? You're on mute. Yes, I do. You do. So pretty much then, I didn't know, most of us seem to know Python, so I'll go much faster. So we have, when you assign a value, so as we said, code is best read left, I mean, right to left, you take five and you assign it, assign like x to x is equal to five. What it means is you have created a variable x and in it you are storing the value five. Now, in Python, you don't have to declare the data type. Data type is implicit from what you have done. So, for example, when you say x is equal to five, it is understood now that it is of integer, but you can be explicit. For example, in languages like C or C++ or German, you would have to say int x is equal to five, means the variable x can only contain data, integer data type forever. Python is not not like that you can have x is equal to 5 and the next moment you can say x is equal to hello world the string so that's a distinguishing feature though it is a terribly bad programming practice to do that i don't do that occasionally there is a reason to have input be abstract and it can stand for many things and inside you can inspect what it is. But generally when you are writing simple code don't have one line saying x is equal to five and the very next line saying x is equal to n of those. That's not. Now one of the practices that is being encouraged in Python when you create functions is what is called type hinting. Declare the type of your variable. Now for simple code it's probably redundant, but when you define functions, especially functions within classes, a very good idea to do so. In fact, it is a coding convention, for example, in my group, I enforce that people, they write code, they must use type hinting to make the intentionality clear. It's very easy to understand what goes in and what comes out. From that perspective, likewise, y is equal to 7, z is equal to 2. Now, this is your basic condition. If x is greater than 4 and y is greater than 6, then print that this is a big number. So this print will not get printed unless you have, let me break this up into parts. So this would not get printed if it, sorry, it would get printed with, where did I go? Something happened. Yeah. Control shift. So, if I convert this to three, then of course it won't get printed because it's no more four. If x is greater than y is, I don't know why it is. So if x is greater than four and y is greater than, and y is greater than, so let me just make it two, three or something like that. You shouldn't get that. But see, suppose even if you do this, this is the thing to know about Python, which most likely all of you know. Now, even if this is, what happens when I run this? You have an error. Why? Because the if block is not complete yet. We didn't complete it, right? And so it says expected an indented block. It is expecting you to put something like this. So this is the important thing about Python, that empty spaces are part of the syntax, right? Now, just here you define x to be an integer it doesn't prevent you from now suddenly saying x is equal to potatoes yes you're putting potatoes in the variable x and printing it out this is something to know so these are very basic things i'll just go quickly through it we always talk about the data type conversion x is a string and so forth for example if you get a string like this how do you convert it into integer it's just int float but if it can be converted it will go through if it cannot be like for example this is not by floating point number is a real number something that can have decimal parts so when you say 125.4 apples what you have is a string that cannot be understood as a number so when you run this you get an error as you get here here we go we get an error up to here it runs fine but then here it gets an error. It says could not convert the string to float to number, which is it. But if you were to remove these apples from here and say and then run this code, it will go through. So this is something to remember about strings. And again, if you are familiar with other programming languages this will come very naturally to you. Lists in Python are general purpose lists. People often think of them in programming as arrays and it is all right to think of them as dynamic areas into which you can append, you can do things. But it's nice, it's very versatile. In most languages, the list data structure will be very versatile because a lot of the time people are using lists in the code. So when you look at this list, you have a bunch of numbers. Now, this is a syntax that not many of you may yet be familiar with. What you do is if you start with the F, it says format the string. In the string, do you notice that between curly braces, I put the word ll list list one or something like that whatever i call it l list so it will be evaluated as a variable whatever the value is will be put here right you could have done it slightly differently the other way to print in python is like this you put the string and then you put a placeholder and then you explicitly say format the string and in the first placeholder put the well some value which is here the length of the string so you have list its length it's a reverse will quite exactly what you think it will reverse the list sort the list will sort the values and so we can just run this to see. What it produces very much you will see the list is now this, these are the reversed elements, these are the sorted elements and so on and so forth. It comes with a lot of convenience methods like what is the index of 11 in the list? Can I take another list? And when you use the append method, remember you append an item. When you concatenate two lists, like take a list and another list, and the second list follows the first list into one big giant list, the method that you use to remember is extend. You extend a to do that so these are syntactical elements and then you have insert remove comment and so on so how many times is 17 present so cool so extend is something that you should know uh now for example if i take this thing what do you think will happen here ll extend can we guess suppose i do ll extend and it is one two three four one two one two three five eleven whatever it is you'll have double of that we will have double of that yes so let's see if that happens We will have double of that, yes. So let's see if that happens. So you notice that it is actually, because we started here many times, this list has so many elements because we have added to it so many, many times. Let me start with the list all over again. So that it looks a little bit simpler it is very obvious which is happening this so suppose i run this you notice that i have this list and the same list repeated. But then in Python, there is another data structure called set. We talked about it in the previous class. What does set do? It ddbkits the items, the entries. And so if you ddbkit the list, you go ahead. So what is the use of extending then you're repeating the same elements right i don't see the reason why you need it yeah yeah in this case we it was a useless example i mean i'm just giving an example but uh look here in the other example that we have you have this list you have another list look at this this example. So there you're not. Okay. Okay. So you're appending two lists together here. Okay. That is it. Okay. Okay. That's the reason. That's the reason. And then there is something called, something very interesting actually it is called list comprehension list comprehension is one of the very powerful ways of writing something so we are going to unpack this strange sentence what it's what it says is start with the inner value for value in b what is b here in array 55 65 75 that is the list can be for value in b which means for any item which we will call that in b if b is not in a so in other words if it is not in not in the list A so list A is 1 2 3 then you do this so read it like this if for each element value, call it value in B, check if it is also present in A. If not present, add to Does this line make sense friends? This is the way to read it. You start reading it strangely like you know you say you get used to it after a little while you say in A append a value. What value? Any value is any element of B but append only if b is not in it it's not already present in it so when i run what you would get is this one two three fifty five sixty five but suppose i had this 65 were both present and now what would happen do you think i would still get 55 65 75 added what would happen do you think i would still get 55 65 75 added i would not the only element that could be yeah so if b so i have been a b a 55 65 for value in b if value is not a b, sorry, not a b is not a b, sorry, that is a type a. So from this, get to the mystery of a, correct me. So this is for, you guys, I'm getting confused here. So do we understand what happened? If a value is already present in a, So do we understand what happened? If a value is already present in A, that value of B will not be appended to A. So this is an example of something called list comprehension. I should have a, let me insert the second here. It's a very powerful and much liked feature of Python to be able to write code like this. A very succinct code we write because of that. Our text is of course text. I won't go into that. Now I'll go a little bit faster now because I realize many of you, most of you have exposure to Python. So this is it. Suppose we create a random integer. Aasif, can we go back to one more thing, the printf that you talked about? So could you go back to that again? I have a question. Sure. Sorry about that. Where did I have it? This one, let's say. This one. So what exactly was the expression? How weird did I have it? This one, let's say. This sentence, see? So what exactly does the F, you mean it's similar to the C syntax? Okay, let me create a new element to illustrate this point. I'll create an element here. So after this competition, I'll do it. This after this comprehension, this is text. So this is a text, right? Now let's take a value. X is equal to 35. And suppose I do this. Print. Text X. Then what do you expect? this sentence followed by 35 it is printing it as a list right effectively on the other hand suppose i do this print this value is greater than what I got. So the question is, how do I substitute? How do I, if I run this code, of course, I'll get the same string again. But suppose I want this to be replaced by the value x. How will I do that? So there are multiple ways that you can do that one of the ways is that you that that is popular is you can say the same thing and actually i should just say one of the ways that you can say that is by saying dot explicitly you say it for mine this is your percentage is kind of a notation yes percentage yeah so now you can say this and you notice that this thing has gotten replaced with this now while this is there then in python even more Then in Python, even more intuitive syntax was added. It said, why keep it to the end and people guessing? Because sometimes there's a whole list of objects that you pass. If you remember in C, you pass a whole list of objects, percentage this, percentage that, format and so forth. But it is more intuitive if I put it right like this the value of x is greater and the the function f this is a reserve thing this tells that treat this sentence pretty much like the above one got it so f is format equivalent format it is It is basically an abbreviation for format. Okay. Thank you. So we move forward. So this is, I suppose, when you learn a language, we all start by writing the first program, something like this. Guess a number. If I give you a number between one and thousand, can you guess it in ten attempts? And you know that if a person knows binary search, you can guess by halving the problem because two to the power ten is 1024. So you're guaranteed to be able to solve this problem if you're smart. guaranteed to be able to solve this problem if you are smart right but it is a good game to play with children right so what you have is a bit of code so we will walk through the code we will say x is some random number some random integer between one and thousand remember in these functions as i said the left side is inclusive right side is exclusive in most of these situations so it means it it won't go between one and one thousand one it will go between one and thousand pick a random number and you say whether this is solved or not and for 10 times for range turn in range 10 means up to 10 times do this print this turn and ask the user to guess another. If their guess is less or guess is more, of course it's wrong. Else they've got it. You know, if guess is right. Otherwise, say guess is too great or too small and so forth. But anyway, I'll let you play this game. It's very simple. Obviously, I'll post this code. But I hope it makes it very .. Now, people coming from C or Java would say, hey, why is it not simply saying for i is equal to from zero to 10, i 10, i plus plus, we could have done that. But that syntax is not very common in Python. In Python, much of the syntax is like this so you say range when you say range you can say 1 to 10 but if you don't explicitly say it it will be from 0 to 10 right so turn will take on values from 0 to not 10 0 to 9 remember the last element is the skipped and so you have 10 choices and you can go so guys do do I need to explain this code or is it something that is self-explanatory anyone wants me to go a bit slow over this This is all good, Haseef. This is all good. This is good. So the same thing, how would you do with a while loop? This is again a traditional while loop. But notice that there are no curly braces, none of that. Just a while turn is less than 10. Keep guessing exactly the same code when you play this game. Now let's do something a little bit more interesting. Some of you may have loved, or at least I did, especially in my romantic teenage years, I was deeply in love with Shakespeare's sonnets. So I still love them, of course. So I just took all of the sonnets here. It's a text file. This is a text file. The sonnet is all about life and love and so forth. Shakespeare was very much like the Dalit of the West. So we are going to play with this. One of the basic questions is how many lines are there in Shakespeare's summons? So how would you do that? One of the nice things in Python is to open a file. The syntax couldn't be simpler. You see, you just say open and that's it. And what you get is text, but what you get is itself iterable. Like you can iterate over it. You see that for line in text. I don't know if you, people can appreciate the simplicity, the sheer simplicity of it, that you can get away with so easily in Python. The code literally, if you're not familiar with so get away so easily in Python. The code literally, if you're not familiar with other languages, you wouldn't appreciate that this is far more easy than doing it in some other languages. For example, in Java, it would be a little bit more verbose, isn't it? And so you keep a line count there, and then every time you read a line, you increment the line number. So this is counting the lines in the code. Now this code, the surprising thing that if you come from Java background or something, but Java also now supports that when you open a file, you get an eye travel and you iterate over it to get the lines so it's getting close it's all languages that we need to look frankly very very similar nowadays so this is what how you do the count the lines i see by default it uses new line as the separator is it to build the array that is right and then you can be fancier you can give it you can tell it what the separator is okay so counting the number of words in the text like now that was for lines how would you count the number of words so i'll show you two approaches one One is you the same thing. First, you get the lines, and then you split each of the line into words. So like, by the way, what is the dot lower? Can you guess what the dot lower will do in a string? converts to lowercase. Very good. It converts it to lowercase. And then you split it. So you get the words, but now you have words, you have to walk over the words. For words and word in word, all those words you can add to one simple list, and then you can tell the length of the list and so on and so forth. But is there a shorter way instead of writing? One of the questions you should always ask is, is there a shorter way to do it right because double for loops are inefficient so one of the ways that you can do this code looks more elegant um for line in text words you get the you can get the words and now all words remember that words is now a list isn't it guys words is a list of words present in this line you can add it to the master list all words by simply quite calling extend so albert you remember we learned the use of extend just a little while ago yes right and so this is a powerful use of the word of the extend function extending method isn't it because you can apply this double double for a loop of all so you keep extending so any double words will keep adding up and then when you count them all yeah then you will get the number of words exactly and so this is a length will give you the length of the list which is the number of words and you will realize that there are 20 700 words which is about rights the first 700 works is just the license and written work and all that but shakespeare managed to write 20 000 lines worth of solids approximately so now suppose you have to print all the words in the file once again you can a number of words and this and that you can print i will go into this how would you sort the words suppose i say sort them alphabetically and printed in a dictionary form well very easy you remember list.sort will do the job for you and here are the first hundred words so if can you go back to the previous block the previous cell yes so in that syntax for line and text and for word and line so initially for line and text it has basically used new line as a separator and created an array of uh lines yeah text is a list of lines okay then it implicitly understands that for word in line it is making it it's tokenizing a lot around space around space it understands that and that is a lovely thing about python that so much of it happens under the cover that um the actual code feels very simple but it takes a while to realize that actually a lot happened. The four line and text part of the, you know, produce the list by using the line boundaries, the word and line use the word boundaries. Quite interesting, isn't it? That it could tell the difference. So are line and word keywords? No, no, these are not only the green, green things are keywords. Whatever is in green is a keyword. Line is just a, just a dummy word. If I change it from line to sign, it makes no difference okay so text is a file it is open and it understands it's a string and then it's yeah okay and even the text i can call it blog let's say text okay i mean blog you see that variables have no meaning only keywords have meaning in a language. I'm sorry. All words. There is my all words. You've written blog instead of blob. Oh, blob. Yeah. There we go. These things don't have meaning. So I'll undo this for the next. So this is it. Remember, green things are keywords. So any doubts here? So it takes a while to realize that under the cover is doing the right thing. And with the Python language, there is always this interesting thing that quite often the way the language is designed, under the covers it does the what you think it should do, the right thing. Very often it does that. That is why it is so very easy to learn this language. I'm always surprised when people say, oh, I'm going to take uh let's see i don't know x month course in python or something maybe they want to be python total balloons or something but to get started especially for data science you don't need any of that so likewise so this is uh sort the words length of all words now one typical problem that you always get in interviews for example is find what are the unique words, not duplicate words. So how will you get unique words? Very simple. You go and do the same code and unique word. What do you do? Convert it to a set. Remember, set makes it unique and sort. That is it. You can get a sorted set and then you can find out you can print the words all the unique words and so forth. Now word frequency or word count is the classic interview question. Once again, how would you do a word count? That is where you can use a dictionary for every word. You can keep a count of how often you have encountered the word. So once you have all the words that you have gathered, then what do you do? You create a dictionary. So you remember the syntax is for dictionary, curly braces is for dictionaries. You create a dictionary and then for all words in this, if the word is in the dictionary called frequencies, then you increment its value by one, else you have encountered it for the first time, go put one. And then after that, all you have to do is, is go and print it out. Does this make sense, guys? Now, this is a little interesting. I have used, without using other libraries, because there are some, you know, collection libraries and things, but here without using it in simple form, notice that if I want to sort the dictionary, I have to pick, this funny syntax and okay so this python has this little twist that sometimes something simple like a dictionary but are printed by keys or printed by values like how do you sort it by value can become a little bit trickier in Java also it gets a little trickier if you sort by value there isn't something that's called sort by value you have to do a little bit of jumping around so here you're saying that sort by counts and which field to take for each of the key value it says take the value field and reverse true why because i want to find and print the top 10 most frequent words how would i print the top 10 most frequent words. How would I print the top 10 most frequent words? Once I have the frequency table, I can just sort it by decreasing frequency. And that is why reverse is true. And this is the function of sorted. What am I giving? I'm giving it the dictionary, but this is the only complicated part. It is saying that between key and the value which of the things should i take to sort and you are saying take value kv1 is value right key value key is zero value is one in the list always what is that lambda yeah lambda is saying given a so what happens is it will say that it will read the dictionary as a list of key values right like if you think of a dictionary like a word and meaning kind of a thing right so if you're given the key value, lambda says that use only the value. So given key value, from it, extract only the value. So a key value would look something like this. So suppose a key value is there. It would be like, let me just say hat. A key value would be like the one let us say or the six of eight like another key value could be and and a 556 so what it is saying is that when you are sorting see this is the zeroth element there is the in this pair in this key value pair would you agree that if you want if you want to treat this key value pair as a list the key's position is zero and the value's position is one yes okay is this clear now? Yes, Asif. Yes, so this is a little bit, this is the only little complication occasionally you encounter. But usually what happens is that you'll get some light breaks. It makes your life easy. So I can print it now. And that is what I'm coming to. So this looks, oh goodness, now I need to understand lambdas and so forth. So then always to your rescue, there is some library and the library is in the collections package, the collections module. What you can do, so this part of the code is common, right? You end up with an all list, a list of all the words sorted. Now what you do is you instantiate a counter and you just give it all the words and see how easy how much more intuitive this is compared to the previous uh i don't know i'll just decrease the font size a little bit sorry yeah yeah compared to this lambda expression. which looks a bit more arcane. Would you agree that this these two look much more easy to understand guys? Yes. So that is the why we use I mean, for example, you if you can do machine learning with pure Python, and you'll be writing miles and miles long code, but because they are libraries we can get away with a few lines of code so that is that then classes and objects so this is this is the crux of what we are getting to in all modern languages there's this whole concept of object oriented programming what it says is a certain group of functionality and a group of values they sort of logically semantically belong together for example we talk of descriptive statistics what are the things we were doing it in the theory part on the last Saturday. And we were talking about mean, median, mean, median, min, max, standard, division. I just took a few of these. Isn't it? So what you can do is you can write a class called descriptive statistics to make it convenient for people to use it. You can give it a list of numbers, and then you can have functionality. So for example, for mean what do you do? You have summing up all the numbers and adding them up. Now in this code do you notice something strange about this code? I'll just stop here. What do you notice here guys? How did we get mu? Yes and that is the nice thing with both Python and Julia. They are modern data science languages so they are sensitive. Remember I told you that mathematicians prefer Greek for all notions. So typically you would see in programming in Java, et cetera, you would have to literally say self.mu and self.sigma and all of that, spell it out. Good thing with Python is you can directly use Greek letters. They are allowed. So how did I do that? It's very easy. See what I do and observe what I do. Suppose I want to type mu here. I would do that. You know, the latex syntax later. Yeah. Yeah. And then you hit the tab button on your keyboard. And what happens? It became the Greek symbol mu. Formatted to the Greek symbol mu. And in general, the code feels more natural, likewise for standard deviation. So, but anyway, let's dissect one particular function first. This one says mean, right? It says mean. So this function, it will always take self. So it means it is saying that it is a function inside. It is a method of a class, right? And what it read, right? A ds.summarize. Where did ds.summarize come from? I think I... Some, okay. So we will come to it in a moment. Let's look at this. This is not needed here. Oh, get it screwed. I think I deleted DS dot summarize somewhere. No, it is here. So this is redundant. So here's the thing. let's look at me. This is the documentation. By the way, this is not preferred. The right thing is like this. Three double codes to begin with. And when you do that, it becomes what is called Python docs, Py docs. There's a process of extracting the documentation. Whenever you go to an API, do you see that there is a documentation of that API, of that library? Those documentation is inserted in this format. These are called PIDOC formats. So standard deviation mean min max median. So is any one of this looking worthy of explanation guys? Can we look at the sum? What are we doing? We are taking the length of numbers. We are adding them up and then we are dividing it by n to get the mu. Now you may say where is mu declared? You don't have to. In Python you can just say, you can assume that any member variable in the object, object is the self. Self is the equivalent of the keyword this in java and c++ what is this is self here so we say self dot mu so it means that now of descriptive statistics mu becomes a number variable does this need further explanations explanations, guys? But isn't it necessary to instantiate or initialize it in the constructor, saying self.mean, not necessary? You can't actually. There is no way to do that. OK. So you can't say, like, for example, in C c or in java you would have said right double double um like some see outside the class you would have said not here you would have said something like here a private double this would be be, sorry, actually Django doesn't allow Greeks like us, something like this you would do to declare a member variable. Python doesn't allow you, it doesn't, it just doesn't allow you to do that. It says that it will understand what the member variables are by reading your code. Okay. You can do that for some special things. You do that for especially when you do something like slots, and I'll talk about slots but usually you don't do it otherwise. Yeah. Some people are asking for the notebooks, so they wanted to kind of try it along and things like that. So, maybe next time you can share it of course all the notebooks from yesterday i already day before saturday already shared on the website and these python notebooks also i'll share since almost all of you in fact all of you are from the workshop itself so i'll just post it to our regular class portal right so one of my friends he joined in so that's why he was asking oh definitely definitely definitely he can all of these notebooks are meant to be played with so by all means take it so min median max so what we are doing is now what is the beauty of it when you create a class and see here I'm describing a function that will print out all of these values. So what it leads to is format. You can do descriptive statistics on some number. Raja Ayyanar?nkr?nkr?nkr?nkr?nkr?nkr?nkr?nkr?nkr?nkr?nkr?nkr?nkr?nkr?nkr?nkr?nkr?nkr?nkr?nkr?nkr?nkr?nkr?nkr?nkr?nkr?nkr?nkr?nkr?nkr method, this std method and so forth. By the way, these are toy examples, they don't take it too seriously. And the beauty is that when you say ds.summarize, just call this method very elegantly and this is what you do, it can now start producing numbers. Not terribly, I mean obviously this is toy code, but you get the point. One thing I've always liked about Python, especially within the Jupyter Notebook, you can put your Greek letters there and it makes the code readable. It's a little harder to do it with PyCharm. They still don't support it. But I'm told that Visual Studio Code, VS Code has started supporting Greek letters in the editor. Anyone of you, if you have experience with that, can tell me. I've never used Visual Studio code, VS Code. So I love VS Code, Asif. So I can run all my Python code in VS Code. I would love it. Yeah. Excellent. So find out if they support Greek letters first. OK. But it's a singular thing. Like PyCharm is usually good with everything. But this was a singular omniscient in the test. So descriptive statistics and so forth. So now what happens is you can use it in your code, all sorts of places where you want to do descriptive statistics you can do that now comes an interesting fact columns describe descriptive ds summarize so forth i wouldn't do more of that um now this is about subplots and so forth. I'll come to that in a little bit. Let's develop complications slowly. Where should I go to see the directory? Yes. Let me take the next simple thing. NumPy. I suppose NumPy. Do I need to talk about NumPy, guys? Are you all now reasonably familiar? And it doesn't need further discussion. Okay, I'll talk about NumPy guys? Are you all now reasonably familiar? And it doesn't need further discussion. Okay, I'll talk about it briefly. See, Python lists are good, but they don't follow very intuitive mathematical operations. For example, suppose you have the length of some objects and you have the width of some objects. If you want to produce the area of the objects, you know, pairwise multiplication. You can't do that if you try to multiply the list. Those lists are not they are not sort of math aware in some sense. And what you end up with is this sort of error. Cannot multiply sequences by non-intensive. Right. Like. Right. this sort of error cannot multiply sequences by non-intents, right? Like, right? So and but you can find the perimeter by adding the two up and so forth. Now, the way data science works in Python is there is a very mature Fortran library, BLAST, basically a new algebra system. And then there are other things, the Atlas and so forth, LINPACK, LAPACK. All of those have been surfaced in Python as numpy and scipy. So numpy gives you the n-dimensional array and all its operations very elegantly. And scipy gives you a lot of statistical operations and many, many things. Most of linear algebra comes to you from SciPy, right? Lot of them. So this is it. For example, look, the same thing, how elegant it was, the same list that was here, length and width elements, you convert them to NP arrays, NumPy arrays. Once you do NumPy arrays, the same multiplication which was failing for Python's native lists works now. When you print the list, it comes out. Now you can also i should also say maybe it's premature at this moment np sorry I'll leave this for the time being. So you can do this operations much faster. More than that, it is not just convenient, it is orders of magnitude faster, like thousands of times faster than Python. You can't beat the performance of Fortran ever. So any operation that you can push down to Fortran, you want to push down to Fortran and see. And in fact, most of the data science that you do, Python, you don't do it in native Python. You use Python code to just push down to those mature libraries that exist under the cover so i say so that's the reason like we use broadcasting yes yes but we can use the underlying library absolutely that is why you do broadcasting and vectorization and everything all these things are best done in numpy not as list so one basic thing is if you're using lists for numbers and operation with numbers you shouldn't be right data scientists should not be using that they should be using numpy scipy and of course all the other data science libraries. But, and these things come with all of these things. You know, for example, they do the math, they understand mathematics. So here is an X, it is a matrix. Do you notice that we created this matrix here? It is not just an arena. Do you see, this is a matrix now. Y is also a matrix. and so you can create n dimensional areas not just a simple array the numpy allows you to create matrices and matrices and stuff and you can be adding them as though you're doing simple mathematics do you see this add subtract multiply divide, multiply, divide, square root. All of those operations you can do and you're doing it with matrices. You're doing it also as a dot product. You can do dots, NP sum, transpose of a matrix. Just say dot T, capital T will give you the transpose. So I say, what's the difference between element-wise operation versus dot product? See, element-wise multiplication of two matrices is called the Hajamad product. It is used very infrequently. In fact, in deep neural networks, it is used very infrequently in in fact in deep neural networks it is used but um the see i'll show you the difference between the dot product and and p is it with respect to the output we get a scalar vector or no it is the fact yeah that is also there but fundamentally what is important is the operations are entirely different maybe i'll just illustrate it to that point suppose you have Y is equal to 3, 4. Right? So, N by NP. NP dot. So, what did I do? I am forgetting my syntax here. Give me a moment. Why is data type is float? I have to give the data type as float. I don't need to do that why am i having to do it so np dot array to something of the other no this should have worked i screwed up something oh because i have not initialized this sorry this is coming but i have not done import of numpy i should do the import import numpy length is not defined okay we will uh skip the fact but numpy has been imported here let's run this so you see that x and y what do you get you see that it's element wise multiplication one multiplies by three two multiplies by four and you are still getting a array of size two isn't it okay so the it's the array okay yeah it's still an array three plus eight do you notice that three plus eight is eleven you can add it up so that's the difference between dot product and product. Product is always... So dot product always gives a scalar or it can also give a like a array or a vector? It can give you a vector. See here, it just... Okay, so well, that needs a little bit of a math session. We'll do that at some point. Okay. needs a little bit of a math session. We'll do that at some point. If you look here, here is an example. Look at where did I create the array, two dimensional, dimensions, it is this. This is not a good example. Yeah, look at this X. It is a matrix, one, two, three, four, and this is a matrix, six seven eight isn't it here x and y now we are doing in a product the dot product of x y so x y is producing again this right it is producing a square. So it depends upon, once you know the rules of matrix multiplication, matrix dot product, it becomes clear. So this is that. So then it also comes with ability to draw histograms and create histograms that you can plot using Matplotlib. This is it. Suppose you want to create a histogram of a bunch of numbers. Here I generated lots of numbers which have a normal distribution, 10,000 of them. Normal distribution is they'll have a bell curve distribution. Now, if you do a histogram of that, what do you expect? You expect something like a bell curve to show. But the point is NumPy comes with all those functions, very useful functions, normal, histogram, this, that. And so you can use it to plot these things, right? But more than that, NumPy comes with, like if you look at the numpy, there are about 200 or so such functions built in, to 300. Everything, the whole of trigonometric functions, etc, etc, everything is built into it. So sine x, cosine x, etc, etc, they are all built into it and you can play with it. that is numpy any questions with numpy then i just want i just got confused with the dot product of that two things and how you got a scalar i understood but how about uh you got a matrix out of the dot product right so that's because you started with matrix those are matrix multiplications so okay i suppose this requires me to draw it out how matrix multiplications and dot multiplications work um okay why don't we keep it for because i have a lot to cover and we are okay so thank you we will have a math session anyway as we come across to this data science course we're going to do a lot of that okay thank you so then let's go from numpy to i will go to this python workshop we did let's go to pandas go to this python workshop we did let's go to pandas right pandas this will get a little bit steeper actually no pandas will get a bit steeper let's just do some basic uh matplotlib visualization again when you do visualization here i'll move a little bit faster we covered this on saturday Here I'll move a little bit faster. We covered this on Saturday. There are many data visualization libraries or data plotting libraries in Python. Many. It's a zoo out there. Why? Because visualization is big money quite often in the world of data. See, and this is a little bit of a digression and personal observation. So what I see in the industry is that data generation is far, far easier than data manipulation. You can generate a lot of data, but then to be able to manage it and store it in a meaningful way is hard. So that is where data engineering comes in. You do your big data, your spark and all of that, Kafka and streaming and this and that. But then comes the even harder part to make a head and tail out of the data and extract some insight or some, find the narrative behind the data. This is the task of machine learning or data science. It gets harder and one of the things that you can't overemphasize is the value of data visualization. If you can visualize data properly, you can tell a very, very powerful story. Remember I told you that story of Florence Nightingale? I don't know if I did I tell you the story of Florence Nightingale? Yes, we did. Yes, with just one chart, in fact her famous chart, it's Googletart. It is also in my book by the way, some of you are reading the book that I'm writing on this. So but I will, on this laptop it doesn't exist. A rose chart. This is a famous rose chart. It's an old historic chart now. I will just write it here. I'll see it here. Oh, this one. Let's go back and search for it. It's a really famous. Okay, let's try this. Where is Wikipedia when you want it here it is and so this is one page that she wrote what it showed is during the crimean war when england and france were fighting the russians and so forth florence writing will didn't take sides she was lady, she was often called the angel of compassion, a very interesting person. She went there and she said her mission is to take care of whosoever is injured, no matter which side, whether the so-called enemy side or the friendly side. So she was taking care and then she made a table of data. She used to make lots of tables of data and she observed that in any given year the mortality, you see that this pink part here, this is the mortality from actual gunfight and this entire area here is the total mortality. So she found remarkably that the chances that in a battlefield you would die of actual battle wound on the spot, you would die from being shot or being killed is very, very small compared to the fact that you'll die from other causes. Those other causes were of course poor hygiene, unsanitary conditions and so on and so forth in which these battlefields used to be. And she came back and in those were the days when doctors were known to be there, medical science was primitive, but nursing wasn't there. The people who would take care of you in the so-called hospitals would be, you know, some prisoners, some homeless people or very poor people who have been uneducated people who have been dragged in to take care. So the hospitals in the modern sense didn't exist. And it was Florence Nightingale who with one visualization, she petitioned the government and created awareness and literally started the whole profession of nursing and the modern hospital, the concept of taking care of patients in very sanitary conditions. So the power of visualization is that. You may say that, well, that was a one-off thing. It wasn't. Even today, I find that people who can visualize data beautifully, very beautifully, they can, from experience, they rise up very fast and they can command whatever, they form consulting groups. And I have seen, I have literally seen and heard of people charging millions to come and create those very, very beautiful, meaningful, not just pretty, meaningful visualizations around the data. Because business is trying to figure out what is happening. The data has that story. But you talk to most data scientists and they will talk in very arcane language. They'll say this and that model and this and that. But then one guy will come and in a very intuitive way explain it all through some pictures. That is the power of data visualization. So you will notice that when in my workshops, of course, I tend to not just use the baseline visualization. I tend to push you guys towards techniques to make your visualizations professional grade. And so you notice that, so I will go through this matplotlib which is a basic library. You can import it, you can also do it with cbon but I won't do that. There's certain parameters you can fit, you know, by default the pictures you don't know what size it is. It's good to give the size, it's good to give the sizes. Also, not necessary, but I tend to use LaTeX. This thing, do you notice that this word linear relationship here, it looks publication quality type setting, isn't it? Because it has been set like that. It has been set using LaTeX. It is the same forms used by your ISLR textbook. And it is in any paper that you publish in a big journal, they expect you to conform to this standard, to this convention. So anyway, we'll come to that. So suppose you want to make a scatterplot, most of these parts you can ignore. From the data, a scatterplot can be done with just two things. X is what, give it the X and the Y arrays, and it will create a scatterplot out of it. But any scatterplot, like for example, this dataset two that you guys have access to. Now, given this, you can go further from this basic scatterplot, which was data set one i can do another data set i loaded data set two you folks may probably remember data set two from the lab work we did yesterday do we remember that guys it's a simple data set that sort of looks like a sign rate nothing for those of you who weren't there there's nothing. But the point I want to say is that in very simple language, you can see, you see that I have put explanatory arrows and put comments here. Note the curvature here is this. So obviously this is hardly worth noting. This is obvious, but I'm giving an illustration that sometimes you have a complicated chart or plot and you want the user to pay attention to something. So you want to not just have legends, you want to put text right there pointing to arrow, to exact locations. And you can do that using annotation. This PLT annotation, it is a function that helps you draw this arrow and put this text, this sort of text. A very convenient way when you're illustrating a point. And of course, in this, you can again put the Greek letters, et cetera. If you use, let's take, for example, here I say that this seems to be a plot. Where is the title? Yeah, here. This seems to be a plot. This is Laetic language, which will convert the sign to the right sign function and phi to the phi Greek symbol and so forth. So that is making one plot. Then you can make subplots. When you make subplots, how do you make subplots? You have to say subplot means first you have to divide the page or the plot into parts, how many rows and how many columns. So you have to say that rows and columns. And you have to explicitly give those values actually so plot that figure and implicitly it will pick it up add subplot at the location two by two so we are making a two by two uh plot at a given index of four of four of these things we do or six of four of these here so do you notice that i got a two by two grid? That you do using the subplot function, add subplot. In a figure, you can add subplots. And each subplot can have its own titles, labels. So the syntax is just becoming familiar. There's nothing unusual about the syntax. You just have to know that these syntax, this sort of syntax exists and you can use it. So by the way, these are the plots of the four data cells. 2, 3, 4, 5. That is it. So Asif, in your company, right? How do you store all your code? I'd say you do this Jupyter Notebook. Do you put it in GitHub? Yes, we do. We do put it to... What we do is GitHub doesn't like very big files. We don't use GitHub. We have an internal bid market. So what we do is, obviously, code gets committed there. Jupyter Notebook, actually, what we do is obviously code gets committed there jupiter notebook actually what we do is we okay so we are very careful that the size of the jupiter doesn't go up it doesn't contain like it shouldn't be 30 40 mb or something like that so long as it is small you check it into the get but if it begins to get bigger what we do is we then hand engineer it we take all the figures and store it away but keep the notebook and then when you pull the notebook out we pull back the figures from a separate uh figure point system hey point system hey thank you you can add you can add that big file support there's another addition into that kitlab uh i don't know github or github thing where it will automatically add that and you can load files it will add 12 gigabytes that is true that is true see for github that is true but we have an internal setup actually i had a question on the annotation that you showed um if you go back right um that most likely the point that is of interest when you change uh when the universe of points changes, does that annotation point also move along with where you're expecting it to show? And what happens if that point doesn't exist? I mean, what I'm saying is like say two averages, you're looking for something like that. See, in reality, what would happen, like for example, this is the maxima. Like if you're trying to get a plot, you'll say maxima. You'll point to this point. So what you would do is you would, these things you wouldn't hardwire. You would instead compute it. You would compute it and then insert it here. Yes, so what I meant was that if you say something goes off the charts, does that code blow up with that? No, it just becomes ugly looking. See with visualization, we haven't yet figured out a way, any perfect library, which in the general case works. There is always a bit of fiddling to make a visualization perfect. So it is a part coding and part art, still art. And you have to be aware of the, like for example, you look at it, right? Do you notice that this big, same big dots, if I had not made it semi-transparent, it would have looked rather ugly. Yes. R. Vijay Mohanaraman, Ph.D.: I have, and I have suppressed that by making it alpha is equal to 0.5. R. Vijay Mohanaraman, Ph.D.: So that it is not terrible. R. Vijay Mohanaraman, Ph.D.: And we can do that, so this produce this but suppose I do this, I remove and let me do that. R. Vijay Mohanaraman, Ph.D.: Now let's run this. R. Vijay Mohanaraman, And then, oops, PD or to import PD to go to the first line. Many, many things. Okay, on this laptop, I haven't set up the whole environment. So okay, here also, I don't think in this directory I have the data set, so it will not if I try to run it on this structure. So in fact it did. Okay, I haven't set up the whole environment, I haven't put the data set on the directory that we took this. I just copied it over from my Linux server. Oh, I see. So I think what we'll do is for the we'll try to make use of this in the ml 100 exactly that's what you have done right so exactly no so my idea was that frankly not to release this solution still you guys actually finished your ml handbook i mean your first homework because by giving you the i'm practically giving you much of the parts of the solution isn't it right right right so the idea was to release it coming Saturday not immediately oh I see okay so this is but anyway ultimately it's all yours sooner or later it will show up in there and of course I apologize to people who are not part of this workshop. I'll find some way to post it for you. Datasets are all, by the way, just for your reference, the datasets on which this talk is running are all there in GitHub. Support vectors, ML Handle. And then I will send a link to this. It's public. Do you see it here? All of the data sets, one, two, three, four, that I'm referring to are all here. So you can directly give a link to this in this code that I have, but change your link to a URL to this and it will immediately start working without . So anyway, the thing that I wanted to say is, map plotting, while in its simplest form is just plot and not scatter. When you get a scatter plot, there is a point in doing it more aesthetically, like making good plots. Plotting is where you need to spend a lot of time. Have you noticed that people who do user interfaces or web design or illustrator they will keep on spending hours onto an illustration even when you think they are done and ultimately they'll come out with perfection so a little bit of that in the mathematical community people in the community that i do have with there is a huge emphasis on aesthetics and on meekness and clarity and this and that of all the figures that you put in your paper or in your report. So that is that. So anyway that is that. Now I was going to, today we are running out of time. Pandas you all are aware of, I wanted to use this occasion to talk, maybe I can do it right now, but I will have to talk about something called tidy data. Tidy data is a topic in Excel, it's more a topic in data science. So I suppose the Python part we'll call it over now, but as part of a regular workshop at one point I will talk about what this concept is of tidy data. It was a pretty influential movement that all data should be represented in a particular form called tidy data format. And how do you come to the tidy data format? And once you do come to the tidy data format, how life becomes very easy, manipulating data becomes very easy after that. So let's do it as part of a normal lab, then I'll do this. So this is an example of data, weather data that comes in many files. And this, as you can see, data is in a very strange way. The values are, the cities are along the columns rather than as rows. And you have to transform this data into much more meaningful data like this, how do you manipulate the data. On this given day in this city, this was the temperature, let us say. You want it to be like that. And then finally, you want to bring in pressure, humidity and everything. And finally, you want the data to look like this. On a given day in a given city, this was the temperature, humidity, wind speed. This is a neat form. What in traditional people would call all sorts of ETL transformations that leads to data to be in the format that you want it to be. Data scientists love a format that is called the tidy data format. So how do you take data which is not in this format and using the Pandas data frame systematically bring data to this format? So let's do it another day. Because now we are staying a little bit far from the basic point. Any questions, guys? I don't know how useful this session was. And that's a good example of plotting your model line on top of the data that you get it. Actually, like you showed the same way on that on top of it to show the red color line on that. Yeah, yesterday I did that. Yes. Go ahead. So I'd have to stand with you, Peter, for that. Let me see this directory. It doesn't. How what is the code? I showed you guys the code. Now, I guess they're more interested in that code. And let me. I mean, there's a list, but that's going to tell like how how our model looks with respect to the data, right? That is right. That is what we were doing yesterday so let me go and start i'm starting that particular notebook okay you guys yesterday thank you so we can stop the recording because now python part is over but let me do that