 All right folks, today is January 16th, Saturday afternoon in California. We are going to continue reviewing and discussing the projects that we have. The two projects are the Eloquent Transform and the tree pilgrims so the former is about natural language processing predominantly and the second one is about computer vision so one of the questions somebody asked me I believe it was Harini is she here? Yes, she's here. How do you attach styles to Streamlit? So did you guys figure it out or you need my help in doing so? Yeah, I think it's good, Asik. I looked into it. I think you do it through some markdown or something, right? So I don't know. You can share that. I sort of walk through it. Let me share my screen for sure that it can be done. And then I'll show you the very little bit of code that is needed to make this possible. So guys, are you looking at this page? Yes. So do you notice that there is theming here? It does look like the boilerplate page. And some of the things is first look at the title. If you look at the title, you notice that I have the H1, the top bar, I have styled it in a particular way. The subheader, second layer header is in different color and a third layer header is in a yet different color. And then I have even the radio buttons are deliberately, I mean these are not the most aesthetic themes to attach or styles to attach, but I was trying to prove the point to give you the code that it can be done. So I put in just to show that it can be styled and put a bounding box around it. I put this in two columns just to show that you can do a two column format. So how do we do that? I wanted to create the minimal code so that it is easy to understand. I'm not going to bring up that code. Today we have a surprisingly small attendance. I guess people are no more interested in the projects it seems. Okay, so when you are able to see my screen, please let you know. I've increased the font size so that it's right. We are seeing you. This entire UI was drawn by one simple paper. I called it Hello, so it is easy to share. And what do I do there? What I do is, just as the way you would start out in HTML, this is it. I write my style elements. The only thing is, just as the way you would start out in HTML, this is it. I write my style elements. The only thing is, I have inlined it. You don't have to. I have inlined it just to illustrate everything in one file. And that I have applied here. So let me just remove this part just for the time being. So you give the background sizes. You can see that the bounding box is there. Here is a shadow that I drew. If you just want to see what I mean by this, look at the fact that you see the shadows here on the two sides and a little bit on the bottom and the top. If you look carefully, even the page starts out with a gradient. You see a color gradient at the top? Yes. Yeah. So these are simple things that I wanted to apply. Obviously, by no means am I a big artist or a web designer, but for what it is worth, here's the point of it. So I have given, this is the, for the H1 element, you know, the title element. Now for the body, what I did is, I'll give you illustrations. Here I've given it as a linear gradient from, you notice that gray with this level of transparency to white, 255 to 55 is white, right? And in fact with zero transparency, what it means is that it will just fade into whatever background is there in the picture. Then we have repeat, no repeat. These are all CSS stuff, style sheet stuff. If you are not familiar with CSS, it might seem a little bit intimidating, but actually CSS is one of those lovely things you can pick up in a few hours. and it is very very rewarding right people have created people have given their life to it to creating a beautiful themes and beautiful styles and so forth and there used to be a website i don't know if it is still there let me see if it is still there it was called the css zen garden see sorry um yeah that's supposed to be very popular. CSS Zen Garden. I absolutely love it. So guys, you can see how exactly the same HTML page, no change in content. This page here can be themed using, now do you notice how the whole page has changed? Completely changed. And all that has been done to bring it to this time is that you have sorry you have oh gosh something by the way in chrome does anybody know how to prevent this jumping from tab to tab for some reason in my case some setting i did which is making this to happen now Now let's look at another theme. So the point is exactly the same page, same content. Now do you notice that it looks entirely different, right? And this is the beauty of CSS, what you can do with CSS. So for example, this one. Now this would look even more different right it has a more i suppose a more romantic theme to it and then you can go to this and robot named so if what really helped i mean i kind of tried reading a little on this but i think this this space is a little um deep in terms of the the intricacies what will really help is if you could do a little overview on uh the concept right what I've seen there I'll explain what I saw and I would love to hear it in your words right see there is this name given to a specific html artifact that you plan to reuse right and what i'm seeing there is there are let's say if you go to the css zen garden people are going to make available a whole bunch of interesting styles but then they have a name so if if i'm a developer what are those standard names that i should stick to like things like H1 H2 those are obvious like the titles, but then there are things like radio buttons and the areas intricate controls that they're using. Raja Ayyanar? Right right so i'll give you the idea see the concept is okay here I can't wait, why did our studio. did our studio open up okay so the concept is this and maybe i should switch over to the my writing pad which is on the other machine to explain imagine a tree a web page is something called a docu dom dom tree document object model means it is the whole page is a document the document has elements objects to it for For example, the root... Are you writing something? No, I am not writing. I am just speaking at this moment. So see if you can follow it. Otherwise, I will have to switch to the other machine and then write it. So let me switch to the other machine. Let me fire up the other machine it will take some time to start and then i will explain then all right this will take a few minutes to come and we don't need to go too deep but just the conceptual picture so that you know what is transportable across one person's work to another person's work and how do we think so that we can reuse what is available on across one person's work to another person's work? And how do we think so that we can reuse what is available on the internet? That's what I'm explaining, hang in there. So let's start from the basics. You have, by the way, how many of you know something about HTML and CSS? Just raise your hands. I want to know to what audience am I speaking to? How many of you know something about HTMLtml and css kate knows who else uh i know asif but not like uh to build something but i know understand the front end like javascript html css i mean i would say i have the basic knowledge if if I know what it is, but there's a lot more depth in it. Okay. So the way these things work is that, see, suppose you have a HTML page. Page comprises of these elements basically. If you write HTML in its simplest form, it will be like this. Head and maybe under this title. And a few more elements and then it would have an, so the title of, you can do something with the title and just mark it like this, just to indicate it is there. And then this is, these are containers, head. So this is a container, and then the next container will start, which would be body. And under body, there will be various other containers. So for example, headers, headings, but the common things that we all deal with in HTML. So think of a document, you would have various layers of headings. A first level heading, the biggest heading, H2, H3, and progressively you can go to whatever you want. And it goes from big, to smaller smaller headings and heading standard they typically get bold become bold automatically unless you apply a different thing so you can say now this title shows up on your browser bar it won't show up in the page itself the what shows up in the outside the page this is outside the page so it's a new title bar outside the page so you can have a favicon and so on and so forth which is a little icon for the favicon let's say and then you have an h1 so you can say, for example, the best of all pages. And then you can have paragraphs, you can have paragraph, let's say p. And so it is made up of containers, everything, the way to think about it is that it is boxes within boxes, the way you pack when you pack you you pack your spoons etc in small boxes when you're packing your herbs to move and then you put those into bigger boxes which go into even bigger boxes and so on and so forth so it is i'll use the word it's a containment hierarchy in other words those boxes have a containment hierarchy. Now suppose you have a paragraph, suppose you say a paragraph, right? on the wall, which page And let us say that the response comes as, let's do I'll just put something here. This page. So this is something. So this is a page and you can have more things. You can have images and so on and so forth. And I wouldn't go into that. Some of the common things paragraph is the most common thing. And you can have an image. I am GSRC is equal to let's just say that some mirror images there. With some size parameters or With parameters are with is equal to 11. So the world started out with this and by the way if you don't have anything else to write you can just make it into sort of a singleton element it's it's a beginning and end tag so you see sometimes syntax like this. Now the first thing and then obviously you can go at the end of all of that, you can have one. When you write a webpage like this, and this is how HTML pages started out in 1990, early 1990s, they were supposed to encapsulate research papers. It was actually created by theoretical physicists by Tim Bernsley and for the purpose of more describing the research papers in our field than for public, I mean a much wider consumer consumption. But this is it. So this is the HTML. And it could be XHTML. So now what happens is that many things happen. So So, given this page, given a page, MLP, it goes into an engine renderer, which renderer will pass this markup. This is also called markup because those tags are called markup. Why? Because you have taken plain text and you have marked it up in some way. You say this is the heading, this is the plain text and so forth. And there is a rendering engine. For example, I believe Google's rendering engine is called V8 at this moment and things like that. So what happens is these rendering engines try to understand your HTML and they produce platform-native widgets. So if they create a view, they'll create a view with platform-native widgets, but you don't realize that it is doing that because the engine has become so extraordinarily good these days that it's practically invisible that the buttons etc. they don't really exist. I mean they exist within the engine's ability to render it. So if you want to get a sense of how different they are, you should just visit the same page with buttons and things like that. In Ubuntu it's very easy to see. You just change the fundamental widget theme from round buttons to square buttons or dark buttons and you'll see that in your page. The same page is being by default rendered slightly differently. And those things do show up a little bit. So you can see some subtle ways in which you see that the rendering engine is at work, but that's a basic thing. You see the page. This is what the eyes of the user sees. This is what the eye of the user sees. So now let's think what we just did. We said that there is a HTML. If you think of HTML as this, as the outermost container, it is made up of two subcontainers, this container being the header, head This container being, if you just look at this document, this container being the body element. Let me just put the word okay so let me you created another paragraph element. This paragraph element was let me just put it here itself, paragraph element. We followed it with another H2 element in this particular example, H2. And then we followed it with that image element. IMGF. That's the document object module. I'm sorry? That's the DOM, document object module. So we're coming to that. So look at this containment hack and just look at this picture, guys. And do you see that there is a absolutely one to one mapping between what I said. Srinivasan Parthasarathy, The picture that I drew and Srinivasan Parthasarathy, This yes I wish I could put it all in one image that it becomes rather small. but if you see this picture at the bottom in this text there there is a one-to-one mapping one is just a visual representation of the other so maybe i can cut it is there a way to cut and move things around let me see yes oh no all right Then I can do cut. Oops, what just happened? No. I took that all wrong. Okay. All right. We can't. I need to get a little bit smarter at cutting and all that. But so we'll take this as a fact. And I hope you have understood this. So with that in place, now observe this. This thing, we can write. When you write things like that, computer scientists like to call it in computer science. People represent this typically represent this as a tree. You say that the tree is HTML. It's exactly the same. It's a convention for writing it perhaps in a slightly more efficient way without making the diagram. It contains a body. It contains the head. The body contains furthermore, and this contains title. Title, it contains other things, maybe a style, some style representation, but we'll come to what those are. This contains, in this particular case, body seems to contain H1, it seems to contain followed by P, followed by H2, followed by IM imd so now these are the so do you see the relationship of our page to this but now comes the interesting part suppose you you don't like the rendering the default rendering that the engine would make of let's say the heading like in our particular case you knew that i did some fancy things with the heading like what did i do so the statement is suppose you want a container any one of these containers container element to get fancy so by the way this is it to kate yes as kate pointed out this is your dom tree this is called your document object model so computer science guys would call it document would call it document object model. So what are the objects here? These are each of these containers. Containers are called objects here in this world of HTML, document being the whole HTML page. So now you want to get something fancy. And this is quite literally the evolution of HTML. So what happened is that initially it used to be that you could do H1 and you would do this. And then you could, the first introduction was to give you, or not even start, to give you things like some basic primitives. For example, you could say color is equal to, let's say red, right? Some basic, these are called attributes or properties. So you could, some attributes very early on in the HTML revision got baked in. So now you could have your fancy H1, which is in red color. So whatever you write, let's say Alice in Wonderland. It would be now in red color. Gradually, people were unhappy because if you looked at the user interface evolution, it was evolving very rapidly with computing power growing. Everything was becoming better. People didn't mind creating computation or rendering heavy user interfaces or because the rendering engines were getting extraordinarily fast. The underlying hardware, for example, interfaces. Because the rendering engines were getting extraordinarily fast, the underlying hardware for example. Today most machines have a 3D chip in them and these 3D rendering chips are huge. Even the most modest of them have that. Today Intel processors, the consumer grade processors, they come with some rendering engines built in right some area of the cpu chip is dedicated to um just rendering these things actually give me a second since i have got this up might as well give you guys a view of me there we go am i visible now Am I visible now? Yes. There we go. All right. So people then began to ask. The camera is not facing you. The camera is not facing me. Okay. Yes. Actually, there is a bit of a thing I need to do. Give me an opportunity to fix this. Let me see if the camera, now is it better? And it should look down a little bit better. Now, are you guys seeing me clearly? Yes. Yeah, so the history of this field is visualizations. If you go back and look at the applications and UIs of the 90s and what you see today are entirely different. There the computing power wasn't there. So in computer screens, you could not capture the same richness and beauty and art that you could capture on canvas, that you could take a paintbrush and you can just paint lovely, beautiful things. But you couldn't do that in on the on the computer and there were softwares for example photoshop etc which on the computer you could make beautiful uis but they took they took tremendous amount of human effort to do that but as computing power became richer and richer what what evolved with that is more computationally heavy, more rendering heavy widgets and things like that. So as and those some of you if you remember those days of motif widgets in UNIX and the MFC classes, Microsoft Foundation classes, widgets and so forth. Today, they look really out of place. If you look at them, they look very primitive, but that they cater to the computation power available in those days. Now, things have moved much, much forward. So for example, on Linux, the Ubuntu, the GNOME and KDE, they give you much better widgets than what Motif would do. I don't think there's anyone still hiding under the rock using Motif. So and likewise in the Windows world, Microsoft gives you much prettier and Mac of course is pretty much your eye candy. So with that the browser also evolved and the need was that we would do something. So there were two ways of doing it. All these browsers or the rendering agents, they started releasing proprietary extensions to the HTML, i.e. Internet Explorer at the time, which really believed that they need to own the internet properly. They started creating a lot of extensions. They were the dominant platform, they wiped out Netscape and then they pretty much were dictating the standards, a lot of the things. And then there is a HTML standardization body and they were trying to catch up and trying to create a standard available to everyone. And Microsoft was trying very hard to frankly just break it like have their own private world in which they could have their developer crowd and so on and so forth. Fortunately, the end result of all of that was standardization won, partly because companies like Google as they rose in dominance, they realized that their entire bread and butter was contingent in the users using the browser and visiting them and obviously you can't have the so the browser effectively becomes a gatekeeper and you can't have that gatekeeper controlled by someone else you can quite literally see i mean this is my personal view by the way so this is deviating from objective statements or subjective so they really invested heavily into the browser stuff with a mighty uh development force and came up with the Chrome, which of course has been taken over. As you probably know, Chrome is Chromium, is the default rendering engine now behind both Chrome, as well as Microsoft's Edge now. So Microsoft also has adopted Chrome. So what does the Chromium's rendering engine, the Viet and all of these things do? They give you support for a lot of styles. So what does the chromium's rendering engine, the VLT and all of these things do? They give you support for a lot of styles. So the standardization of those styles became an interesting concept. So you could declare a style. So you could say that the body, let's say the body has this style. You could take any element in your system and you could give it a style, any container element in your system. You could name it the well-known elements and you could say background color. Color is equal to, let's take some light color, wheat, right? You could say everything, font, family, is equal to, let us say, Verdana. And you could give a comma-separated list. If it would search in this direction, and then in the end you could just put something like serif, if it finds the first one that it found on your machine, it would just use it to render your pages, the body of your page. And then you could have font weight, right, normal. So suppose you want to make the fonts a little bit heavier or variant and so on and so forth, you could do that. Like for example, you don't like the size of H1, you could go to the heading one and you could change it. For example, you could say font size, you know And that is when pretty much the creatives, the artistic crowd got involved in HTML. And the this style, writing up this is called a style sheet. What you just did a file, which you have, typically the end with the extension CSS, right? So let us say x dot CSS is a style sheet. Now there is one more word added to it. It's called cascading. What does cascading refer to? What it refers to is the fact that if you did the body background, now inside the body, let us say there is a h1 tag, it will It will actually inherit the color of body. So what color would this be? H1B? Anyone? Wheat. Wheat, exactly. It would be. So you say that unless you don't need to specify everything all over again, it will cascade down. so you say that unless you you don't need to specify everything all over again it will cascade down yeah you you have your parents each container has its parent style plus anything else or modified by anything else it likes so for example if you don't like that you can change it you can change the font family for example font family to let's say a helvetica ticker by the way these are older fonts we tend not to use it we tend to use more modern fonts but maybe robot let me say robot but maybe a robot, let me just say robot, which is quite common or so on and so forth. You can do that. So now your heading has changed its fonts. Then this is for the standard element. And now CSS and the new HTML provides you two interesting things. It provides you a thing called div div is an arbitrary container it is just an rb container so if you don't want to use paragraph h1 you just create div and inside the div you can put whatever you want but when you use a, so let me just call it an arbitrary container. Container. And you could then say, you can just do two things. Either you can say class is equal to, give it a name. Let me call it the class is apples. And let us say that you intend to show something related to apple. So let us say there is an image img src is equal to apple dot apple farm dot png. Let's say I'm giving you, I'm just concocting an example here and then there is some text right but what you want to do is you want this to have a special style right let us say that this particular div you want to render in such a way that and let's say that there is a h2 or something like that okay let me not do that let's say that there is a H2 or something like that. Okay, let me not do that. Let's say that you want to have something like this. What you can do therefore is in the CSS, you can put dot, actually let me use a yellow color, dot apples, right? So now what you have done is when you start with a dot, you're referring to a class right and again you can put your styles here style elements here that will be applicable only to this particular container so dips are very general purpose similar to that is span with subtle differences i won't go into that the span is also there span gives you a range of uh things but pretty quite analogous to that so you can have that so this was uh this is actually the preferred way you can style it like this there is an alternate thing that sometimes people do so when you do it like that wherever apple, the same style will uniformly apply to that. So this is how people build themes. They say that, you know, if you want to have this kind of a box or this kind of a region, apply this style and people do very beautiful things. So for example, one of the limitations of standard HTML is everything is a rectangle. It's a journey of rectangles, right? And so when you go to CSS and garden, you notice that people have put in considerable effort to break that journey of boxes inside boxes, you know, the container. So what they do quite often is they'll do all sorts of pretty things. They will round it up, they will add shadows to it, some sort of shadows. They will put some highlights here and things like that. They do pretty fancy things to make it look more of a canvas, the feel of a canvas or an area in a canvas than to look like the dull rectangle that it looks like. Now, why bother to do that? It turns out that when you apply these style sheets, colors, if you look at the theories of aesthetics and so forth, there is an entire color theory and the color psychology, how colors affect us and how they are and what do they convey. Colors convey something, you know, something in red clearly conveys, you know, catches our attention, right. Not only bulls but human beings are caught by red, our human beings are caught by red. Our attentions are caught by that. Likewise, when something is, you know, we are conditioned by seeing a danger around us in orange. So sometimes people sort of utilize that because in our subconscious being in the Western Hemisphere, we're all warning signs and dangers are given in yellow you sort of get or sort of warnings are given in yellow you sort of get cautious about it so good but more than that there are colors and there are colors that are harmonious the colors that are contrasting so there are many color themes for example you may choose a color palette you know in other words all the colors that you give to a page they may be monochromatic in other words one color and its gradations you may use black but other than black let's say that you use shades of red and orange right so the color palettes that you build mostly of those colors so that gives in some sense tries to, it creates uniformity in your site. The other people do is they use opposite colors in the color wheel. So there is such a thing as the color wheel. Color wheel. And then they pick colors here and opposite here, right? Opposite elements of the color wheel. And then they build their site out of the, these are called complementary. So complementary is bold and striking. It just sort of stands out. It is very popular these days. A long time ago, so these are opposites, quite some time ago, and I think it's coming back into work now. In the early 90s in the US, we used to have a three color scheme. So if you pick a color here, you would pick a color here and you would pick a color here. The three color scheme, some of you may remember from the 90s from all your shopping catalogs and things like that. They were common. And then, and it is coming back. It depends upon how you design the UI and what you, what is the message you want to convey. And obviously there is a quad color scheme. You can pick things from here. These four elements of the color scheme. And so the entire theories of color. And there are websites to it if you want to go deep into it. It's a lovely thing to go. You can read about it and people have gone pretty crazy. Likewise, fonts, there's a whole psychology of fonts. Fonts convey something, you don't randomly pick up fonts. For example, I remember that when Obama, Obama was campaigning for presidential election because he was, he wanted to convey energy and youth and dynamism and forward-looking progressive ideas and so forth. His campaign got a hold of artists who specifically, if I remember, either used their existing forward-looking font or created one, I don't remember what, but they went for certain fonts which had a very sort of a modern and forward-looking look to them, sort of energy to them, right? And these are subtle, you know, if you're not paying attention you wouldn't be, you wouldn't notice it. If you notice that I am sensitive to typography, to fonts, so I don't know if you noticed that the documents that I write, the fonts look different from what you would see in a normal Word document. Did any one of you notice that? Everybody is quiet. I think everybody's gone for lunch now. On your website? No, when the documents that I give you. Oh yeah, you've got a bunch of code at the top sorry yeah i've got a bunch of code at the top of the jupiter notebooks to control that right oh that's right not the jupiter notebooks i'm saying the pdf documents you know the specifications for example the tree pilgrims and the eloquent transformers if you look at those pdf documents do you notice that they have they look different from a word document typical word document i think the typical word documents in latex yeah it is not just latex even in latex i have applied a specific type of rocket to that go ahead i think typical word documents tend to go towards its aerial most of the time right that is true yeah and i think you're tending more towards the garamond and other ones yes they are slightly different so the point is that they convey things. The Arial was actually, it was the ultimate hack. There was the Helvetica font and Microsoft didn't want to pay the royalties to who owned Helvetica. I believe it was Adobe owned Helvetica or somebody owned Helvetica. So the people who make fonts are called foundries. So they didn't want to pay royalty to the foundries. So they essentially created a rather poor and bastardized version of Helvetica that became Ariel and then made it the default. In my view, of all the fonts, it's the ugliest possible font. Which font is ugly? Ariel. Ariel, ah. Yeah. And a lot of people, if you search on the web, there are many, many people who have written long expositions on why Ariel sucks and should never be used. But anyway, it's the default in Microsoft's software. So typography conveys something. If you look at New York Times, you'll see that the type, they use a specific type that conveys a certain seriousness, you know, because they put a tremendous amount of effort in journalism. So, and it reflects, they want to have it the quality of reading something with attention, like the fonts are somewhat like that you find in textbooks and so forth. So when you want people to pay attention to you, you don't use casual fonts. You deliberately shift the fonts towards what people are attuned to seeing in textbooks, which is what you will notice that I tend to use in the documents, in the PDF documents that I hand out. So anyway, the bottom line is fonts mean something. So between fonts means something, colors means something, right? And you have to break the tyranny of the boxes, the rectangles. While it is a containment of rectangles, you have to try your best for that not to be overt, for you to sort of break out of jailbreak out of that sort of a prison. And a lot of CSS effort, I mean, a large part of it is that there's a psychology people have studied and found, for example, every testing, they will change the color of a button or increase its size, just by changing the style sheet. And they will see how does the user traffic behave. And sometimes the differences can be millions and it's unbelievable that subtle changes in the design. can affect the monetization or the sale or the click through rates, etc. on your page by significant amounts. So today, of course, the whole user experience people are deeply sensitive to the design and we seem to have stumbled upon that world in this project. So what I am saying is that, so this is one way of giving style. Now there is a cheaper way of writing style. So I said class is equal to this. So this class is described in a style sheet, but sometimes what people do, or to be quick, is that in the head itself, they will put a style element and then they'll write the same thing here. So for example, apples dot and they'll give it and they'll describe what apple is like and so on and so forth and h2 what h1 is like and so on and so forth and there is a whole, there's a little bit more to the grammar but I'm staying to the simplest term. Now sometimes what people do is if you're going to if you have if you know that you're going to have only one element of something so people often do div id is equal to blah right and when you do this id business then in this case it is marked by hash blah. So, and people abuse it. Sometimes they apply it here and there, but generally the initial expectation was that those are unique devs in your thing. So at only one place, the style would be applied. And so there's a bit more to the style sheet, but if you don't want to write the style sheet, you can just copy the style sheet directly into your thing. This is what I did. So this is about the styles. And that is all that CSS and this whole world that CSS is. Are we clear guys? So this is helpful as if this is a good overview. In terms of the overrides, what I'm assuming here is, okay, let me take a moment to put my thoughts together. So there's the basic tags, which is basically what HTML supports. Like that's a well-known thing, it's documented, right? Then there is a construct by which you can essentially through a style sheet, say how the tag should be rendered when that object is rendered. That's one part. Then when you went to the div part, I'm seeing that's where customization is starting, right? A visual artist who comes up with an idea could put a bunch of things and then inside that div block, he is given a name. Yes. Subsequently, when you access those controls, it'll behave in a specific way. Yeah, so class, you see that this class of divs are called Apple divs. That's why you use the word class. All divs in your document that have the class identified as apples will look like apple-ish containers. So now if we come back to our Streamlit kind of a context. Okay, I think we'll keep that for a little later. I think there's a little bit of adaptation that we need to do when we think about Streamlit is something that is running inside the browser and it's actually being controlled also. If it is inside the browser, it's actually being controlled also if it is inside the browser it is just a html page that's all it is it's a dynamic html page that is interacting with the back end a tiny little streamlit server running at the back but aren't they controlling some part of it in terms of um like there's a left pane and a right pane that is right those are just rendering it's just a page design. You design the page with a sidebar div. There's a div, literally a div, which is called st-sidebar. There is a div, which is called the main. There is a div root, which contains both of these divs. And that is it it and in the style sheet you say you left align this and you right align this that's all and if we pick something from the internet that somebody has done and then say use that style inside div st sidebar it should work fine yeah and that is what i was showing you in this example so now let's get back to our code Yeah, and that is what I was showing you in this example. So now let's get back to our code. So let's look through this CSS file that we have. This CSS file for this one, let's see if we can understand this. I'll open this CSS file. Oh goodness, I don't know why it is opening in R. Not to be in R. I'll open it Asif, on a sidebar, has your company started replacing all master and slave references? No, I am the old tyrant. I believe in master and slaves. Yeah, Oracle went through a massive exercise of replacing all of them. Yeah, yeah. My company did that actually very, very early on. See, Cornerstone, the company that I work for, we're proud of this thing. It was rated that the, I mean, I've seen Oracle and I've seen CBLUR, I've seen a few companies, and you can literally see that how the psychology of women talk in meetings and so forth. Here they are absolutely confident. It's just a pleasure to see that they're absolutely at par. And likewise for the racial stuff, Black Lives Matter is taken very, very seriously. And all our documentations were scrapped. But we are not even supposed to use words like blacklist anymore. Yeah, blacklist, whitelist, or any of those things. But it's quite complicated. If you look at the Kubernetes syntax right now, master-slave is inherent in the syntax, right? That is true. See, engineering crowd is a little conservative. So in spite of the fact that we did it in the company level, what do the techies do? With impunity and with abandon, they use the word master and slaves. It'll take years for that thing to be remedied. It's partly because, you know, what do you call them then? Yep. The linguistics. And also we have to acknowledge the fact that engineering is often populated by non-native English speakers. It's hard enough for them to pick it up and understand from a textbook. Now if you change the whole vocabulary on them, it's quite that in itself is a hardship. No, but the point I was making, I see when I think we're doing a little bit of sidebar here. What I see there is to be politically correct, what we end up with is a huge amount of QE exercise. Every code that you touch now needs to be tested. That is true. True. What are they replacing blacklist and whitelist with? What are the current contenders? So I think what were they using? The whitelist is the permissible list, permitted list, and the not permitted list. I think these are the words they're using. I think we're trying to get literal, Kate. Now just make sure that the English that we use in intents, it implies what it is, right? Rather than using words like black and white where there is a connotation. More functionally correct anyway. Yes, things like that. So anyway, I'm not an expert in that. So I know that we are from our level as the leadership in our company. We do the best, I've made my due diligence gave a lot of strong talk to my teams to take this very seriously and one of the things we are proud of is actually is one of the best places for women to work so so the women here i invite you to apply to cornerstone we love the atmosphere there so you love the atmosphere there so all right guys so uh coming to this css now does it look easy to understand guys look at the css here so body what is it saying the margin and padding it's just saying that don't keep fluff space around it the html and then the body it is saying by default use the georgia font right use that and so georgia is a uh is also a textbookish font actually let me do it side by side so that we can see the effect yeah so it is saying by use the you use this, but this is overwritten at many places, at Georgia and San Serif. Then as you go down, you'll notice that paragraphs, text align justify by default. What is justify means? Both right and left align by default. Then as you keep moving down into the text, if you look at the heading, do you notice that they have put a H1 background? What does it mean? This line, horizontal line that you see in red, it is coming from this particular background. So let us go open this image and see what it is doing to the heading just to dissect what is happening. Oh, no, it is the image itself. So there you go. The heading, the H1 image is coming from this and you see this, well, oh, no, no, no, it isn't. Where is the heading going? I don't see that. Okay, let's leave the headers and move around. Not able to get head and tail out of it. So whenever you see summaries, it is the sidebar wrapper of Verdana. So you notice that a lot of the sidebars that are here like this, they are using the Verdana forms. Then list. The things like link and visited those are standard html constructs yes yes these are all standard html type constructs so see guys html is a very simple language if you give just a couple of hours and master it of all the visual yeah so this is the horizontal line thing where do we see it we must be seeing that line somewhere or the other here we go um things like that so you notice that just this much if you really think about it there isn't much to this page and yet it has changed the look and feel of this completely isn't it completely it has changed and now let's look at some something uh Now let's look at some other designs. Now guys, why am I paying attention to this? The reason I am saying this is because I want you guys to take your application, post it on the web and let it represent you, speak for you when you go and interview right so we have done all of this you have created an application polish it up a little bit is that it's a last week spend time polishing it and putting it online how many of you have put it on the web put your application on the web yet i've got a website available okay good good make perfect some progress so let me take this one. Yeah. So you notice that, guys, this page now has completely changed, isn't it? It is very flower and pretty orchids and so forth. So if you look at this CSS now, which is, which file is it, CSS style two. So now you notice that what are they doing? What are they doing? Obviously in the background they have a big picture. Let's go inspect this picture. Once again, let's put it side by side and see what happens. Let's go see this picture. And this is the way you dissect an image. Actually, you see this. Now there this is the way you dissect an image. Actually, you see this. Now, there is a trick that you can do, which is very useful. See, if you go and do an inspect on the page, it will tell you how the style sheets are coming. And do you see the DOM structure? Literally, you see boxes within boxes. So you can click on an element. You take this and you say where is this coming from? Yeah, right, and it is telling you this is it. And so you can apply those CSS and so on and so forth. This one, if you go and inspect something else. Let's go to this one. Where is this coming from? It's coming from here. Where is this coming from? is this coming from? It's coming from here. Where is this coming from? It's coming from here. By the way, header is a new element that has come in, section and so forth. So html is becoming richer and these things are coming up. If you want to see where this is coming from, you see that it says it's a aside.sidebar. So you can go in aside.sidebar and you can see the see the aside.sidebar what is the style applied to this this is the style applied and it has a orchid in the background where at the bottom do you see this orchid is at the bottom of that box so this is it guys this is style sheets so now coming back to our example now does this seem very reasonable that this was just a h1 normal h1 and now i've styled it a little i've styled a few elements i've shown you that you can do side by side columns you can do things like that so let's look at the code it should look fairly straightforward at this particular moment so let's start with this this is the streamlit code. I start out with saying style. Now does this make sense guys? Now it is true that you won't be able to write something like this in your first go. By the way, this is an example that I also took. Some of it is inspired by things I saw on the web. There are a CS, people have given a lot of contributions free CSS styles and themes and which is what I was asking you to do. Go copy those themes, copy those styles and put it into your list. So I put it here. Now I want to show you something. Look at this page. At this moment I have a top gradient isn't it? There's a gradient at the top. Suppose I want to change it with an image, the same code. What do I do? I replace this. And I comment this one out. Let's see. I'll go back to the page and rerun it. Do you notice that now the top image has changed? to the page and rerun it. Do you notice that now the top image has changed? Well that looks rather ugly. So let's do something a little bit better margin size. I think it is I think it is RGB background, background repeat, no repeat, background size is 600 pixels. Let's see. Let's do that and see what it does to the image. And rerun. You notice that this came through and now obviously i need to bring the text down so you can so now you're beginning to play with stuff right uh somewhere here what i need to do is it was first hello world app all i need to do is i need to add a div some div in which i can explicitly add this time by By the way, this is a cheap cheat way. Like you can, if you have a small style that you'll apply to only one element you can just do it right here. Right, because usually all the styling goes in the .css files. That is right, yeah. And not in the HTML files, right? Not in HTML. The coding style. Yeah. So see, things have moved on and not moved on anymore. So. So you have to keep playing with it. I need to body on. So this is the way you would play. I don't know why it is margin top. I think it should be margin top, not pattern top. So you have to play with it. I'm not a guru of CSS. So I know it enough to be able to do it, but I have to experiment before I get it right. No, I still didn't get it. I wanted to push this content down and there must be a body padding top or margin. One annoying thing about CSS is that you get absolutely no error messages ever. It works or it doesn't. That is true. That is true. So one thing that I can tell you that you can do, which is very, very helpful. So see, I'm struggling with this page at this moment to get these types perfectly right. As I struggle with this, I can do this. I can literally say, again, go to inspect and I go to section tab right and i ask myself that what can i do to uh where is it oh div margin style oh this is i know what has happened it is i forgot to whenever i ask this body and this is what you have to do by the way when you do this image st image you can't do that the moment you put html in it let me just call it dot is equal to and what you need to do and this is one of the things that equal to and what you need to do and this is one of the things that that is specific to that st dot markdown you have to say that you will write this dot and even though it's html you write it i mean it's mix of html and css you say unsafe allow html when you do that i think this should be this was the missing trick and this should take care of it. There you go. Things have come down, except that this is hash word. Now I need to figure out what did I screw up here? So what I will do is mark it as H1. Go again here and refresh there you go you saw that you you push the content below now right so this is the way you experiment and then you can now totally change the theme of the page you put a banner at the top and you can play you can do a lot of things i put a bounding box here but the bottom line is this is the way you do this guys i'll release this page i'll post it to our slack and you can play with this this is by no means a beautiful theme any good web artist would absolutely be disgusted with what i've just done so but be that as it is, so I'll remove this now because this is an artfulness. And go back to this. So are we clear guys? How do we do styles? See, the beauty of HTML is so long as it is html there's always a way to style it the css frameworks are very very powerful in bridge so there we go i brought it back to this now any questions guys and then this like to say one of the questions people say is that how do you control that only whatever application translator summarizer whatever it is uh lemmatizer only that shows up so that also i illustrated this example i don't know how many of you got that one right already got what right on this page on the main side only that particular thing will show up which you are on the main side, only that particular thing will show up, which you are, the function, let's say the translator or the elementization or whatever it is, will show up. Oh, selecting the NLP task in Eloquent Transformers. Yes, exactly. Only that part shows up. So this is it. I gave this in the example, if you want to use that. You notice that what shows up here depends upon which radio button I choose. So those things is there in this example and you can take it from this code. So, all right guys, this is it. Today, you guys wanted to know how we can style that, how we can do things in Streamlit. I hope this was illustrative and useful. How are we doing with the before i close today how are we doing with the projects um i'm having issues with the eclipse in corpus i'm not sure it created the hello rest point oh hello this point is there why don't you share your screen i'll show you okay um let me bring it up anything else guys anybody else is struggling anybody followed those instructions through to the end and succeeded i had a lot of issues with the eclipse um here i'll share yeah pravin how about you did you succeed uh no the the day where we stopped i didn't get a chance to continue so i was working on the image i can show you where i am okay by the way in general guys are you finding this whole project business useful or is it proven useful as a learning exercise learning it's very useful i'm i'm very intent to get to the end and get stuff on a web page and all willing to take the the time it'll take to get there so go into your tech team hacker src java main at the top src j Java main at the top. SRC Java main at the very, very top. Okay. Yeah. Go open that. Do you see resource.java? Yeah, click on the resource.java. Why did you call it with little r? Okay, it doesn't matter. Click on that. Yeah, do you see path is equal to slash hello? Oh, okay. I thought I would see it as a directory. I didn't know what to see. Yeah, so what happens is when you invoke hello, your request comes here and it is handled by that method, hello. Okay, so that's working. I have issues. I know you said that to get around the GCR issues and let's see. You just have to install it somewhere. On these instructions, I am where I got stuck. Let's see. This hack was not enough for me. In this step of trying to deploy, it had some error messages. I posted them in the Slack about the lab issues, but I also have them. So what I try to do is think maybe there's some my environment is so well configured i may not i might have missed something i'll see what i can do uh where's the error message look hold on and you did all this setup correctly i thought i did all the setup correctly. I thought I did all the setup correctly but when I got to that what is it saying this step yeah yeah that's okay I got the point you showed me the steps these are you know it started initially it looks fine but then when it gets to this yeah just wait Looks fine, but then when it gets to this build. Yeah, just wait. IO error. SSH handshake exception. Couldn't kickstart handshake. Using base image. Using credentials for Docker in Docker. Go and check that you do have a .docker config JSON. Yeah, hold on. i've got that window up now in your command shell in your command oh in my terminal go to the open yeah go to the directory.docker okay which directory? First go to the home directory, UCD. Now do cd.docker.docker. Let's do this. Yeah, open that up. So you do have here, it says g12, g12, g12. let's yeah open that up so you do have here you said g12 g12 g12 setup let me see One thing I also noticed is, aren't you supposed to only like connect once on the Google platform? Like I thought I already connected, shouldn't the connect button go away? So I'm concerned about that too, that that's a... No, no, no, no. That is just because it if it didn't work why don't you repeat it just take the command in this copy see what the trouble is it might end up creating one more key but it's all right uh yeah i could always the other thing you could do is blow away the test and start all over again yeah i kind of did that to the extent with um eclipse eclipse was being quite a pain yeah so uh let's see now that command that i pasted just at the root at the home level i don't need to go into my project you don't have to go anywhere all right yeah okay now run it. Go into the directory, cd hyphen. Right now, the mbn.mbnw compile docker deploy. This one. Yeah, the acquire. Let's try it. I think you might have missed some basic, some step somewhere. Maybe. I was looking at it over and over. I've been spending a bunch of time trying to get this to work. It's been very frustrating. I can understand your frustration. Off the top of my head, I'm not able to think of where exactly I might have missed. See it fetching all that small rye and those things. Yeah, everything seems to be working. You just talked about last time. Thank you.