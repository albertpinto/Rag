 The next thing I want to do is scatter plots. Before we do scatter plots, let's take a 10 minutes break and no more than 10 minutes break, guys. I know that it's not yet a one hour, 2.30 to 3.30. Actually, it's about more than an hour. But let's take no more than a 10 minutes break and then we'll change topic and do scatter plots but by now you are familiar with how we do things so brace up for it we'll gradually move faster um guys are you comfortable with the fact that we didn't i didn't make you do it or would you prefer that we do it right here i think it's fine uh just post the the library uh all of these books yes they will all be put they're actually there on the website i just have to make them visible so uh as soon as the class finishes all of these notebooks will be there okay thanks thank you right and guys use it as a base actually what, what you are seeing here, if you Google it up, you'll never find information so systematically presented or carefully done. Most of the time, engineers are terrible. They have very low patience for data visualization. They'll tweak it a little bit and they'll be happy and move on, right? But visualization matters. I hope the one lesson you learn is both aesthetics and explainability of a visualization matters. So 10 minutes break will meet at 3.50. Usually when people are here, some of you are here, I ring a bell to announce the end of a break and since some people are missing those of you remote don't get surprised having fun i hope the lesson that you are getting is a visualization is easy you just need patience and you need a process all of art is about a process what is your process you need to have a process to get somewhere right and you will get there you can create very evocative visualizations that tell stories clearly explain things you have to start so we only did the simplest of them the bar chart and i hope you you are this is very minimal obviously very, but I hope it gets you started. I'll start with yet another simple one. By now you may say, well, let's do something more complicated. A day will come for that, but not today. Today we'll do scatterplots now. Scatterplot is again, follow after me. You have to do it. Let me share my screen. Let me know if you can see my screen. Yeah, we see it. So once again, make it a touch bigger. One control plus would be nice. Okay, so here we go. Nice. Here it is. Once again, I'll run this visualization imports. So now I've just put all the imports in one place. Oh, why am I running it locally? Sorry. Excuse me. It's much faster when I run it off the server. But all right, doesn't matter. I'll do it here. Scatter scatter plot it's locally on the laptop it takes a long time to write but okay guys i do don't do this keep whatever you had before from your matplotlib visualization barplot matplotlib just make a copy of it guys because the initial code will be exactly the same the one difference now is we won't deal with the covet data set we will deal with the auto data set so the file name at the end will not be that it will be auto so please pay attention that we have this uh maybe uh harini could you please paste it to slack so people use this so guys it's a different data set now this data set is one reason i chose this data set is because many of you have been taking different workshops for this and we have been using the automobile or data set so it reduces the cognitive load. You don't have to spend time understanding it. Also, it's very easy to understand for those of you who are new. What somebody did in the 1970s is, and it shows it's in the 1970s or 80s, they looked at different models of cars in different countries, three regions, Japan, Europe, and America. That's why you have these regions japan uh america and so forth i'll let you guess from this which belongs to what for each car they looked at how many cylinders it has so the engine of a car is actually made up of quite literally cylinders with pistons in them so a cylinder first of first of all, how many cylinders it has. Now, what is the size of that cylinder? So suppose you look at it, this as a cylinder, and literally it's like that in V8 engines, it's a cylinder like this, and you will have a piston that goes back and forth. And so, crankshaft, and then there's a crankshaft that converts that piston back and forth into circular motion. So the cylinders are how many of these cans you have, so the cans in a way you have sitting inside your car. The more energy it burns simultaneously and the more horsepower you get, generally more powerful the engine is, right? So for example, many of you are very energy conscious. So you drive, let's say a four cylinder engine, right? The horsepower you'll be getting is somewhere in the order of 150, 160, 180. Is that reasonable? But in those days, the horsepower you would get with a four cylinder engine used to be only 90. So we get a lot more horsepower today. But if you go to an eight-cylinder engine, in those days, you used to get 150 horsepower engine. What is a horsepower? It is the strength of one horse. So obviously, these days, we can't even imagine how people a couple of centuries used to live. We don't think a bit about cars and horsepowers, but that's what it is. And it depends. So for example, I have an eight cylinder engine in my car and I have 600 horsepower. So obviously technology has advanced quite a lot compared to those times. This is the displacement of the engine. The bigger the displacement, in other words, the bigger the size of the soda can into which you injecting fuel, the bigger, the more powerful will be the sort of the acceleration, right? So weight of the car, obviously, the heavier it is, the slower it, the more fuel it will consume, hopefully, or likely. likely acceleration is actually the opposite of what you think here oh yeah this is the year which year it was so 70s now acceleration is how long it takes to reach 60 miles an hour so the bigger the number, the weaker the car. So for example, this car takes, it's a four cylinder engine, is rather heavy, doesn't have much horsepower. So it takes 17 seconds to reach 60 miles an hour. On the other hand, if you look at this big big, what used to be considered power muscle car in those days, it reaches 70, it reaches 60 miles an hour in 12.5 seconds. Of course, by modern standards, you would laugh at it because you would say, well, my car reaches it in four seconds or something like that, if you have a Tesla or you have a muscle car. So the world has changed since then. But this is what the data is now if you look at the data the name column is not doing much it's useless so we will drop the name column now in this data there there is so if you look at this data uh well at this moment the name column these are statistical descriptions let me decrease the font one little bit yeah statistical descriptions. Let me decrease the font one little bit. Yeah, statistical descriptions. You have the count, 397 data points. For miles per gallon, in those days, 23 miles per gallon was the average among cars. The average number of cylinders in the car used to be 5.4, which means it was leaning more towards six cylinders, because these things typically go in even numbers and why do they go in even numbers because engines are shaped like this so if you put a cylinder here you'll put a cylinder here also right so they go in pairs in the v especially in the v v series which is now more than 800 years more than 100 year old design displacement horsepower weight acceleration you see all of those things so something to look at now this data has some missing values so we clean this out what i will do is this part and this part data loading and cleanup part i'm going to just paste it on the slack copy it just just copy it into your notebook because the rest of it you'll actually have to do this is one cell to describe the data is another cell sorry to now remove the missing values and all of the clutter in the data and convert it to the right type just think of it as data cleanup and don't pay too much attention to it because we have to focus on visualization just look at the first line look at this line it is all available here is it available on the csv file available yes yes look at this url okay okay i will get it you see that right yeah i saw that support vectors website it's directly there is giving you an error no let me run this it was fun you don't import the libraries actually oh yes yes you haven't imported input all the necessary libraries that just take it from the previous notebook, all those libraries. Could you go to the data cleanup cell please? Yeah yeah and I pasted the data cleanup. That one is giving error like when you copy paste it. No, not me, maybe something by in pasting it in slack. Most of my conference like it works for me. It works for you. Yeah. Okay. Let me paste it again and try my luck. I don't know. Yeah, let's paste it in a way that they get it right. See, Python is very indentation specific. So if you leave some spaces blank spaces here or there it gets into some who are the people who are having trouble I am I won't think you are okay would you like to just read it here and type it? I'm doing that right now. No, she's pasting from beginning. Let me try. Oh, okay. Don't do that. Actually, copy the imports. Just do support vector style and do the imports the way I did it in the other place. Oh, sorry. What is it? it with support vector style and then copy the imports from the other ones which was let's go to the top now support vectors common let me go the ones that yeah all of these so let me just copy this over to the ones that yeah all of these so let me just copy this over to yes i will just put it here guys do the top like this just as you did for the mat.lib but exactly the same it will be better. Should I paste it on this Slack? No, that won't work. But just the data cleanup thing, it keeps giving me error that string array requires a sequence of strings or pandas.na. Would you like to share your screen? I can help you right now. Okay, I'll do that. How do I, it is asking me, this will stop your screen sharing? That is fine. I think it's. Yes, I'm looking at this now. Go up a little bit. I call it a term bit what's the call data not equal to null and what is the last type yeah and the error it's giving is string it requires a sequence of string or pandas.na so a spacing error let's do one thing it's a it's a hidden error do you see the backslash at the end of the sentence this one yeah remove it keep removing it and hit delete uh bring the dot drop to the previous slide dot drop oh yeah you have to close the function as type function here and now bring the dot drop to the previous line and do the same thing to the previous as type function here and now bring the dot drop to the previous line and do the same thing to the previous as type to this previous one most likely it's a hidden space issue somewhere try running you still have oh no you know you can run it only once if it is gone then it is gone uh drop column name uh just just do data.describe just rerun it the previous copy paste it and rerun copy paste it copy paste it copy paste it copy paste it copy paste it copy paste it copy paste it copy paste it copy paste it copy paste it copy paste it copy paste it copy paste it copy paste it Your name thing is still there. Very strange. I can't think of what is... Okay, let's take it. So in your case, Avinthi, just follow through with us. I don't know what... It's not very obvious what's missing. Everything looks right. Yeah. And data, this is right, this is right. Everything looks right. Yeah, I don't know. All right, we will deal with it. Did you update your library? Yes, I did. That's the first thing I did in the morning. OK. All right, just hang in there. We'll help you. OK, all right, thank you. So let's do scatter plots with them. So to do scatter plots, again, it's very simple. Do you see we are using Pandas directly to do that. One liner will produce your scatterplot. So let's type this line, guys. Data.plot.scatter. We don't see your screen. Oh, sorry. I apologize are we together we can you see it now um guys one of you have to mute yourself i can hear television in the background so So, by the way, Avinte, you might be able to make progress with this plot, even though you can ignore the previous one. This line would still work on your case. Try it out. Yeah, I'm working. Thank you. Yeah. Are we all there guys? So when you look at this plot, again the same sort of a thing, there is a bit of clutter here. The plot is workable, but it's very basic. 20 years ago this would have been very impressive. 25 years ago, today it doesn't look so impressive. So we're going to systematically improve this. We'll apply a dash of style to it. Again, we'll apply ggplot. We'll resize it, pick a color for the points. Let's see what all things will do. Resizing of the figure. We are used to doing that, isn't it? Applying the ggplot theme. Again, we know how to do it it pick a color for the points that will make it look better add a bit of transparency to the points again will make it look better pick the size of the points how big the points are in the scatter plot we'll do that add a title slightly change the x and Y label. We can do that. And improve the text formatting with LaTeX. Now we have done all of this for bar plot. So I'm not going to show a step-by-step, but we'll do it in one fell swoop. And finally, we'll have a tight layout. So see, in this much code that you're used to, this part, I expect, I don't want to give it to you i want you to type it in because you can borrow from your other notebooks this part you can borrow from your other notebooks you remember this likewise all of this part you can borrow from your other notebooks 15.5 this let's do that guys this part at least okay or maybe because you have to borrow i'll just paste it here this part i'll paste it uh oh you already did thank you heidi um then the the meat of the matter is here let's let's think through how you create a scatter plot very easy data plot scatter you have to give the x and y axis let's look at the scatterplot you have to give the x axis and the y axis we did that x axis y axis now s is for size size of what size of this bubbles the circles or this dots points so 150 is the size that you're looking at. If you make it smaller than this, let's say, what would happen if you make it only, let's say, 10? I'll just make it smaller and show what happens. It will come through in a minute. Yeah. So guys, what do you notice? What happened to the dots? They're too small, right? And does it look aesthetically pleasing? It doesn't look as pleasing as if you go and make the dots a little bit bigger i've done that color salmon by now you must have realized that i tend to like warm reddish colors so this is salmon color edge color this is interesting whenever you make bubbles i find that it's aesthetically pleasing to put a little edge to the bubbles, you know, the edge color. When you make it K, K is black. It will make it some shade of black or grey. Right. And alpha. Do we remember what alpha stands for guys? Transparency. Just make it a little bit muted so it looks pretty. So this is it. So far, so good. It looks simple. For LaTeX, title, you notice that I'm using the LaTeX language. Title is this. And I'm explicitly giving the style. So this part, because it is LaTeX, I will give give it again to you but please type the scatterplot part the scatter part and then the tight layout by now you should be pretty familiar with and this is going to be a fun journey guys, we're going to some very interesting place. And this part I'll let you have you guys type this part in, I want you to hand memory about it. Are we all there? Sachin, are you done? Yeah. Abhishek, you guys are all done here. Nice. You have all this in LaTeX, but what if I don't want to use LaTeX? What will be the PLT.title? Then don't use LaTeX. For example, if you don't want to use LaTeX, don't use it. I'll just comment this out and show you without LaTeX. The same thing, pft.title, right? Automobile. Actually, let me use double quote there because it has Automobile Sm mileage versus horsepower. Again, size is equal to 24. You don't have to use latency. You notice that I'm not using latency. See the difference? It is a plain thing. I'll run it. Thank you. It looks like this. Thank you. It looks like this. Thank you. If you look very closely, you will realize that it is not as crisp or clear as when you use latex, right? So people who are sensitive, depends on that. See, I come from a tradition where when you write papers, you're supposed to write it to a good aesthetic standard. You're supposed to care about the formatting. So, yeah, you see the difference between the two? Laetic versus non-Laetic? Yeah. That's it. But if you don't want to use Laetic, that's perfectly fine. So now, guys, we have reached this thing. I hope you find that this looks significantly better as a scatter plot what do you see in the scatter plot unfortunately the more powerful machine you use horsepower you use this the smaller the mileage isn't it i was always hoping for a parallel universe in which the more powerful a machine is, the more the mileage. But that doesn't seem to be. All right. So we'll move forward with that. Now, you notice that I have the things here, 50, 75, 100. I will just play around with it, the X ticks. Can I put those ticks at the top? You can. It is called a secondary axis. If you want, you can create a secondary axis. How do you do that? All of this code is exactly the same. Then we will do something funny figure auto layout true this that all of these are properties that you can play with what you do is a secondary axis you say that i want something at the top as a secondary axis and to the secondary axis you give it a label horsepower and so forth do you see this guys it is a way of putting something at the top so please copy and do this and by the way if you don't want to write latex r double quotes don't write latex remove r and just put a normal string there so that's the only thing you're adding to your plot then one more thing you should do see so anyway i do that and run it and you should see that the label should have gone to the top. I mean this x sticks should have gone to the top. Now, here is something more we did. You say that you know this plot is fine. But what if the color depended upon the weight of the car, the bigger the the weight it should be a different color right see if you look at the data set we have taken only two columns horsepower and mileage and this question keeps coming up i believe abhishek or somebody asked this question how do you show more dimensions of the data so the most easy way is you say okay i'll make a three-dimensional plot but three-dimensional plots are actually very hard to understand so the visualization people they believe that it is better to be in two dimensions as much as possible so here what are the things we can play with we can play with the color of the bubble and we can play with the size of the bubble isn't it guys color of the bubble and we can play with the size of the bubble isn't it guys right so let's use the color and the size to do something what we do is we use the color at this moment we are not playing with the size of the bubble we are just saying color comes through weight but the moment you pick a weight now the thing is what color map you use to color it, isn't it? And I told you that there are many standard color maps. We used jet a little while ago. This time we'll use rainbow and see how it is. That's the only change. So add these two also to your scatter. Are we all done? So the extra thing we did is we added a secondary axis at the top, x-axis, and we did this color. We colored it by weight. And by the way, you can play around. Like, for example example when you do that you get a plot like this the rainbow like color right at the bottom is violet at the top is obviously red yeah what is it called violet with your violet indigo green etc etc right you get that that gets generated automatically yeah color map yeah once you specify the cmap that is the cmap argument in uh matplotlib and c1 just give a name of the color map and because weight is a continuous variable it will pick it up from the spectrum and so it will do the index between those yeah it will automatically do that it's very nice actually right so what if i made it instead of rainbow i made it where it is let's see another color map it will take a little bit actually it's running off my laptop it will take a little bit oh here we go do you notice that it's not as vibrant anymore right it is mostly the verdant colors then suppose i made it um jet another known color map do you notice that it is blue to red right spectrum is blue to red deep red right so there are many ones you can play with plasma and plasma will look like this. So there are a lot of color jets in this particular case. I felt that rainbow was. Or jet. Let's try jet. Did I try jet? I don't know if I tried jet. OK, here it is. So this is it. You can play with color maps. But so what does the color signify? It signifies the weight of the car but then we still can play with the size of the dots right or maybe we can give to size of the dots we can give what horsepower or something horsepower is already there my mileage is there weight is there what can we give maybe we can, let's see what I gave here. Okay, colors alpha, automobile mileage versus horsepower. Okay, this is by origin. is by origin of the automobile i put all the automobiles of europe separately japan separately in that the code gets a little complex guys you have to know in pandas there is a way to group the data so you have to group the data by origin you see that i've grouped the data by origin and then how many origins are here here three are three origins. You have to take the colour map, let's say rainbow and split it into three separate colours. This part will be tough. So let me give you guys this part. Oh, you the rest of it is exactly what you had. But now you will have to use not the plot. You'll have to create the inner axis object, the graphical object. You'll have to delve into that. You have to muck around a little bit here, unfortunately. And you have to make the plot. here's the thing guys you have to first make the same scatter plot for european cars give it one color you have to make it for japanese cars give it one color you have to map it for american cars and map it to one color and so because you're continuously painting on the same landscape or the same canvas, what will happen is that it will look like this. It will look as though it's a single graph, but actually is three plots layered on top of each other. Are we together? Right. So grouping on categoricals is a little bit tricky because you have to do this group and this bit of code this part may be a little hard i i study it quietly later i will just explain it for now see when you do plots that subplot so this is a good day i was going to explain the anatomy of a matplotlib plot in detail but think of it like that see if you think of the let's look at this guys you see this book right the book has a container the cover and then there are pages inside isn't it now the pages have, I don't know, figures and text and chapters and table of content and many things. This is a close analogy of how matplotlib thinks. This entire thing is a plot or a figure, is a figure. A figure is a container which contains pages pages contain paragraphs chapters etc all of those things that a figure contains is called access right and access the word access is poor choice of words i would just call it think it contains things and things sometimes contains things inside them right so at the outermost level, the figure contains the plot, the actual thing that you see, that is one axis, the big out, the big container. And that is what is represented with the word AX, right? When you create plot that subplots, it doesn't give you, it gives you only one subplot. In other words, the main plot, the actual thing itself inside it. Think of it that you get the bundle of pages. Are we together? Right? So figure is the outer shell. And this is the main thing. Another way a lot of people think is that, you know, figure is just the wrapper. Axe, this axis is the real plot. Often people use the language like that. It is the real plot of the graphic thing, right? So then what you do is you have three groups. You have groups, three groups. You enumerate over the groups, right? And at each stage, what do you do? You do a scatter plot. Let's look at it. This plot should look very obvious. Data is that group. cars japanese cars and so for european cars and so forth each of the group x is horsepower y is miles per gallon this is obvious right we have been doing that size of the dot is 150 which is exactly what we have done edge color alpha is very easy label we label that uh particular scatter plot dots because you know we want to put some legend saying which origin it is label here is the origin right label is name name of the group right and colors where do we get the colors from we are getting the colors from the color map. We broke out the color map into three colors. Well, we know that the length of origins is three. I could have hardwired three, but that's hardwiring a value. Here, I'm letting the data compute it. So this is a little bit of a Python stuff for computing how many unique values are there for origin. It will be three, so this area has three elements and therefore there will be three things showing up one for each of the origin this is it so do we understand this uh this plot this thing guys and this is just the outer loop to go over each of the groups of cars so the reason you're doing this is because the catapult only takes one color at a time. Yeah, it's one of the limitations. This is the way you do it. So, you know, all of these libraries, they will do most things very well. And suddenly, you'll come to something which is very simple, actually, but you have to run around in loops to do it. So, well, it is what it is. So, excellent way to make contribution to open source, just go fix this. The rest of it is just title etc so this part, Harini you gave this entire part right yeah thank you. So guys look at this play around with this i would have liked that this part at least you hand typed rest of it you copy paste it this part the for loop and the fig from here you hand type if you can that will be uh beneficial now you get this plot you say ah that's a lot of hard work just to produce a scatter plot and you will see that this weakness is not there in other plotting libraries when we use the other ones it won't have this problem now we go to the cylinders suppose we say okay everything is fine but i can still play with the bubble size let's use one more feature for bubble size. Suppose you pick the bubble size based on the number of cylinders. Right. So we all talk about V4, V6, V8, V12. Right. So suppose that that looks very attractive if you know cars. So you may want to do that. Trouble is, matplotlib, if you give it numbers like 2, 4, 6, 8, they will all look practically the same because it's a linear scale. So you have to amplify it. One way that I amplified it is I made it 2 to the power horsepower. So 2 cylinders means 4, 4 cylinders means 16. You got the idea, right? 8 cylinders means 32 and so on and so forth uh use a more exponential scale which is what you see me doing i created a new column called size which is oh no actually i didn't do that. I squared it. So this is wrong. This documentation is not two to the power. I wanted to do that, but I actually did. Power to square of it. Well, square is good enough. You square it. You can play with this. You can make it two to the power of this, that. OK, so and then I multiplied by 10 just to get a good size. just to get a good size. So these are the things, statements like this, where you find yourself playing with the data to make the graphics look good. It isn't something like, it's not a rule book. You play with it. It's part of the experimentation process to make a visualization look good. But once you do that, the rest of the code is exactly the same, except that s is now equal to the size remember we just created a size column and so s is equal to size when you do that are you guys seeing this s is equal to size when you do that now you notice that your bubbles have become big. Observe something. Most of these big bubbles, they belong to which origin? One, right? Isn't it? One happens to be America, by the way, US. So it turns out that the biggest market for big cars, high horsepower muscle cars, has been traditionally the US. It has to be. I mean, US has always had a love affair with cars, and it shows through in this data. It clearly shows through in the data. Two happens to be Japan. Well, Japanese prefer things small most of the time. And you can see a preponderance of wind color. But Japan cars being small, they also have their muscle cars, a few, but mostly they are small cars. Sizes of their bubbles are small. We are learning something about data. Do you see how much you can make your visualization tell about the data? Just in one stroke, you can tell that big cars tend to be prevalent in the US, in the US region. So now one thing you want to do, sometimes you want to point out the specific data points. You want to do annotations. So this part guys, please do it yourself. Harini, you have given the code up to here, right? Up to here you have given the code? No, sir, I haven't started the annotations one. No, no, don't give the annotation. Yeah, no, I haven't. But annotations one. No, no, don't give the annotation. No, I haven't. But till here you have given it. Yes. So annotation is what is annotation. Do you notice that these are some comments you put just as you annotate on the book in the margins in a plot. Sometimes you want to annotate and put some comments there in the plot. Right. So how do you annotate? This is the, we will learn to annotate it. So what we are doing is we are putting the min-max of horsepower at min-max of mileage, right? To do that, we use this. So guys, at least type one of them. You may not type all of them, but I want you to type one of them. Can you please add this to your plots? Then I'll explain it. By the way, annotations you could have done for line plots, any plots, bar plots, anywhere. And by the way, oh sorry, I must say you can't annotate till you find those values, right? So here is the min value, max value. You must compute it first. So let me give you the code to compute it first. And you must have computed the min, max of each of these before you go ahead and start annotating it. And this is the text. This is the Python way of writing the text. The text that you will put in the annotation is here. So just copy this much, guys, and copy this much. Thank you. Gracias. Thank you. Thank you. Are you all done guys? I feel still typing. Take your time. I'll wait a few minutes. It's worth knowing how to annotate plots, guys. Very few people realize that you can actually annotate plots to highlight the message or the story you're trying to tell or the main point you're trying to explain. You can put it in the graph itself Thank you. Gracias. I got it working. Got it working. Very good. Anybody else? Avanti, were you able to come this far or you got blocked? I am having issues, but I'm doing all the typing, everything i'll run it later okay sure nice let me explain this code we'll just focus on this minimum miles per gallon let's look at the plot where is the point with the minimum miles per gallon uh i might have the automobile with the minimum horsepower. Okay, let me take the automobile with the minimum miles per gallon. Would you agree that this is this point? Lowest MPG. Big heavy vehicle running in the US, right? So it has a minimum. So it has a coordinates. Its coordinates would be minimum MPG and whatever the horsepower value is. Then we have an arrow. And then we have a location where we have put the text. So we need three things, the x y coordinates of the data point, we need the text and a location for the text, and we need therefore an arrow to connect the two right these three things so let's go to that first of all we figured out the the horsepower the minimum the you know the x y coordinates x axis is horsepower y axis is mpg uh here we did it for the minimum so how do we calculate it that's a little bit of computation this This is standard Python. So in the data frame, you'll find out, and Pandas doesn't make it very obvious. Unfortunately, this is the best that I could do in quickly the shortest code I could think of to find the X, Y coordinates of the mileage minimum. This is standard Python. Once I did that min max, min mileage, min horsepower, and so forth, then what I do is I come to this. This is the F notation, the formatting notation, the automobile with the minimum. And you know, this is it, minimum mileage. This is standard Python string syntax, formatted string syntax. If you're used to the percentage syntax, then you might want to switch over to that. This is a new way of doing it in Python. Now, let's look at that. Remember three things. X, Y coordinates of the point, location of the text and the arrow kind so let's do that x y of the point is this right location of the text is relative to the point that you're talking about so i'm saying minus 200 200 what does that mean x axis so you see that this is here right and you go 200 pixels to this side, which is, this is in pixel format. So you go 200 pixels, you go this way and 200 pixels up. I mean, whatever, 200 units up, you go here. Why is it like this? I don't know. It should have been. All right. So this typically you play with and see what it means. So in my case, I am trying to understand why. But anyway, you need to give the location of the text relative to the point. Once you have done that location of the point with the relative to this, then what is the next thing you need to specify? with the relative to this. Then what is the next thing you need to specify? What is the kind of coordinates it is? Offset point means relative to the point itself. And then finally, you need to draw the arrow. Here it is. Arrow has the properties. Do you notice that it's maroon in color and rather thick? Line is thick. Line width is four and it is maroon in color. So this is there in the documentation for the annotation, but I'm explaining it here. This is how you do it. Maroon colored, really thick fat line arrow. And finally, the text. What is the font size of the text? 16 points. Right. So 16 points here and likewise the other annotation so does the does this now make sense guys do all this make sense this is the text place for the point here location of the text should be here relative to use the offset point points coordinates and then this is the arrow property and the text font size these are just properties of the annotation right annotation is that arrow and text put together is it making sense, guys? So this is it. And so do that. And now you notice that to the extent that the purpose of a visualization is to explain and tell a story. Is it able to tell a story? It's talking about all the extremes in this plot. Right? So you now look at it and you can literally read off without having to guess that the maximum mileage you get is 46.6. For what is the size? The size is the weight, I believe. Tiny size. Or no, cylinders. Size is cylinders, isn't it, guys? What did I put size as? Size is cylinders, yeah. So it has fewer cylinders, a high mileage vehicle, right? Its horsepower is low. You would expect fuel-e efficient cars don't have a high pickup. So we did that. Now, one more topic worth thinking is sometimes what you want to do, and this one, I won't make your type. I'll just explain it to you and you can do it on your own. Let's look at what we are saying. So suppose you have a graph and you want to pay attention to certain regions like this region green region yellow region or any two three regions you want to zoom into how would you zoom into and show it what you can do is you can draw the plot but you can highlight those regions and then you can make separate subplots for each of those regions. Are we together? Now, to do that is actually not complicated. I'll show you how to do that. But the code becomes longer, which is why I want to ask you to do. So let's start reading the code from the top. From here to here, I hope it is easy. Everything is familiar. Isn't it? No surprises. We have done this before. Right? We get the figure and then what you do is you start creating subplots. Let me explain subplots to you. Look at the anatomy of the plot. There is one big plot at the top and three at the bottom so now how do you So far so good, right? If you think of it as a grid, those of you who are familiar with HTML plotting, if you think of it as a table with two rows and three columns then the the figure at the top the subplot at the top has occupied the entire first row so how many columns has it occupied three columns right and this is the fourth fifth sixth subplot, each occupying only one column. So, I'm sorry if my connection went down a little bit. Can you please repeat the last one? Yeah. I'm saying that whenever you see a visualization like this, let me decrease the font. When you see a visualization like this you notice an asymmetry the top is one big row one entire row is one plot right or one subplot the bottom is three subplots how do you think of it in a grid framework one way to do that is you think of it as two rows and three columns right except that the figure in the first row has gone and occupied all three columns yeah right where is bottom row columns subplots are just normal subplots so we are going to we say that the main plot is it is a so basically you have two rows right in the first column you put the first object actually it should be 2, 3 not 2, 1 but this was a mistake 2, 3, not 2, 1. But OK, this was a mistake. 2, 3, 1. You plot it like this. 2, 3 means two rows, three columns. But the first figure there is this. It will be the main figure at the top. But then for the second one, you say that I'll put it in the fourth location. Then what happens to the second and the third location in the first row it will automatically get occupied by the first figure it will stretch out and fill up the space are we together guys right and so fourth fifth sixth In the second row, fourth, fifth, sixth slots. They are normal subplots. So now I've created four empty slots. So do a favor. Just take this bit of code. Don't do anything else. Let's do this. Let's create a... I'll go to the very bottom somewhere and just experiment with this, see, to see what happens. Figure. What do you notice guys? Because I haven't put anything here, you have one box here and three boxes here isn't it you see the layout yeah and now what i do is in the first one, the main, so this is main, right? This is main, left, center, right. Main, left, center, right. And now observe what happens if I change this three to one. Yeah, it will basically say that, pretend as though the first one is occupying only one column so do you see the game changed what happened you're saying two rows one column while you're drawing this pretend that there's only one column right so it the first object will go occupy all three columns, all three locations. What is the first two? The number of rows and the number of columns. But we have one. No, no. That is why. It has two rows. Remember, first is two rows. It is saying that, okay, let me put it this way. Let me write it down as for you. No, I'll draw it out for you. Give me a second. Yeah, this is very confusing actually. GridSpec is the hardest thing for people to understand, so I should explain it. One second. I'm trying to bring up the writing pad OneNote. All right, let's take a let's add a page here. Now, see what I'm going to do. The syntax. First, let's think of the syntax. Right? What you do is you claim that you have created a subplot. Right? R. Vijay Mohanaraman, Ph.D.: You have created a. R. Vijay Mohanaraman, Ph.D.: subplot. R. Vijay Mohanaraman, Ph.D.: Right and you say imagine that there are two rows. R. Vijay Mohanaraman, Ph.D.: Okay, let me first give the syntax number of rows. R. Vijay Mohanaraman, Ph.D.: Number of columns. R. Vijay Mohanaraman, Ph.D.: column So the moment you specify this in basically a greatest form, right? So suppose it is equal to, let me just say three. And let's say that this is equal to five. The moment you do this, and we haven't specified this, what has happened? The graphic engine has immediately started creating three rows. First row, second row, row third row isn't it yes sub 15 it will end up creating 15 subplot this is the first column second column third column right and then it says okay now that this subplot is here this particular one this axis where do you want to put it so suppose i say seventh location location or index now let's count seven one two three four five six seven oh it will get plotted here right That is how you think of the syntax. Suppose I did instead n row 3, 5, and I did 2. Where would it go? It would go here. If, on the other hand, I did, let's say, 12, where would it go? 8, 9, 10, 11, 12. It would go here. Are you understanding it? So this specifies the nature of the grid. And this specifies the index or location in the grid. So if you want to now now let's see how we will pretend and play this game suppose i want to do this i want to make this right so i need to fool the system a little bit first what i will pretend is suppose i did this pretend is suppose I did this two, three, two, three. And then suppose I say two, three, what is this? What is this location? One, yeah, one, two, three, four, five. I would have to say five, isn't it? So this is the center is equal to five what about this left is equal to four and right is equal to us six now this is one two three but now i want to fool the system while drawing this right i want to take up this whole space this right i want to take up this whole space so what i will do is when i'm doing this main one i can pretend i can confuse so let's first do this i will just limit it to this first let's do two three okay not yet actually so here's the thing suppose i gave it uh in this figure a two three one main i made it two three one what would happen here these things never got occupied never got created isn't it we never created a subplot in this place number two and number three place we created one four five six does this make sense but we want to not cheat it we want this first figure to occupy the whole space so what happens is when we are drawing the main we cheat we say that hey you know what actually it is two rows but only one column right and if we tell it it's only one column and you are in the first location now what happens this will go and occupy the whole thing you got the you got the rationale behind it right so that is what is being said now and this is the part that is actually grid spec is the part that most people actually I also should fix this back. This is the part that is most confusing the subplot location, right? So you have to remember the first is number of rows, number of columns, and then what is the index there in that grid? Are we together? So that with that knowledge here here now let us look at look at this so where did i keep my pen writing pen is okay i'll find it in a moment all right so so this is that laying out the main pieces. These are empty plots. At this moment, these plots are empty. Once again, we want to group by origin. So the same old code of grouping by origin, putting the cylinders and everything else is there. So the main plot is easy, right? main plot is the same old code nothing has changed for the minute do you all agree that the main plot is the same is the same code that we wrote a little while ago right the top plot this plot is the same but then we need to draw the three regions. Do you notice that I have highlighted? We'll do that in a little bit. We'll color fill it. We need to now go and make the three lower boxes. We need to make this, this, and this. But when we do that, we take sub regions we are zooming in so how do we zoom in the same thing we do that except that we take the data mpg size etc but we limit it to this specific part so data is part one where do we get the parts we actually this is a part you have to do. We create three subsets of data. See when you zoom in, what it means, you're looking at subsets of data, isn't it guys? When you zoom into data, you're looking at only a subset of data, some part of the data. So by deliberately, I took three parts, low horsepower machines, regular horsepower machines, and high horsepower machines regular horsepower machines and high horsepower machines from those times today these things would hardly be considered high or spa so i divided the data set into three regions three regions of interest i'm not looking at all other regions three regions of interest why three just randomly i just wanted to show how you would zoom in so what happens in the lower plot, so think about it, this plot is over the entire data, but these lower plots, all they have to be is regular scatter plots, but on individual zoomed in pieces of data, isn't it? Does that make sense, guys? All I have to do is make it over zoomed in pieces of data and so that is all it is nothing but the same scatter plot as the main except that i pass it part one part two part three right zoomed in pieces of data because then you can see what is happening right here in much more clear form here what is happening here i can see in a clear form here in this so this is how you would zoom into three different regions of the data now just to show what parts we are zooming in this is color the three regions you know color between so there is this lovely method called fill between. You can give it the range where you want the data to be colored and it will go color it for you. Right. So this is a way that you would zoom into data. Now this is a complex graph, guys. Are you feeling, I're you're realizing that even though it's a lot of code it is actually very straightforward code repeated you make the main plot and then you make the subplots just in smaller sets of data anybody wants me to explain it again i can go one more time on the part two one two and three please. Oh you mean the grid part how do I do it? Yeah yeah grid one yeah. Okay let me say that again where is the one note and where is the pencil that I dropped I hope I didn't drop right with i must have okay i'll take the other pen then okay give me a moment see matt plotlib thinks in terms of uh grids, you divide the main plot into a grid, rectangular grid. You always think of grid. When you think of a grid, the thing that matters is number of rows and number of columns, isn't it? So suppose number of rows is in this particular case two and number of columns is three so when you say now this is it now what you do is you assume that this grid is there suppose you want to draw it out oh i'm sorry a number of rows is also three well something should be different so i'll make the number of columns four right now you ask yourself suppose this is the grid where do you want to place a figure right let us say that you want to place a figure here right let's call this figure a right a so a is what location you have to index it one two three four five six seven eight so you will say a is equal to fig dot subplot is equal to fake that subplot. subplots. By the way, I may be screwing up the exact thing here, but we'll come to that. Three rows in a grid of three by four the location eight, so the way to interpret it is in a grid of three rows and four columns, this subplot must be put in location index eight. This is literally like, if you have to spell it out what this word means, it means this sentence. You got that, right? And now suppose you want to do, now let's play a game. Now you can go and you can say B is equal to, so now B, how would you write it? It will be, what will be the index here? Three, four, and what would be the index here? 10, exactly. This is how you play this game. Now, sometimes what you want to do is you want to mess with it a little bit. So suppose you want to put a figure, sorry, you want to fit a figure that occupies, let's say, all of this location. Right. So this location would be 9, 10, 11, 12. Right. How would you do that? So now you have to play a game. You have to confuse this system. So you would start saying, hey, you know what? It is actually three rows. Right? Yeah. So one column. Three rows, one column. And I want to put it in the, if it is three rows, one column, right? Then I have to be in the first place or second, whatever, third row. So one, two, three, right? If it is just one column, one, two, three, right? In this, this is it. Then what will happen is this system will get fooled. It will say, oh, oh, really? Okay, so here, imagine that I have a grid, which is three, one, three, one, and I'm in the third location. You see how it goes, right? Right? So this is it, you have to play with it. And then there is such a thing called grid spec, which gives you even more power. So by now you realize that data visualization, right, you have to play with the geometric parameters and sometimes you have to master the tricks that help you sort of work with the what you got. sort of work with the what you got right if the api doesn't give you so for example in c in css in html some of you would remember a thing called call span right so you could have literally said call span three or call span four like go take all the four columns but in matplotlib you don't have that. The best you can do is play games like this. That is all we are saying. That is quite huge in the response of the data. You can change the screen size and things like that. Yes. That's a good point. Yeah. Yeah. Can you show the code for the splitting of the data for a specific grid? Yes, yes. I will show that to you now. So, guys, are you having fun? But we need to move a little faster here, but make sure that we understand it. So, where am I? You take the data and you split it into three parts. Do you see the splitting? I just happen to take three regions to zoom into. Literally create three different data frames, which are subsets of the data. Raja Ayyanar?nilam?nilam?nilam?nilam?nilam?nilam?nilam?nilam?nilam?nilam?nilam?nilam?nilam?nilam?nilam?nilam?nilam?nilam?nilam?nilam?nilam?nilam?nilam?nilam?nilam?nilam?nilam?nilam?nilam?nilam but for main because i wanted to occupy the entire row i confuse the system by saying 2 by 1 2 1 1 right that's that and so that is it the rest of the code is exactly the group by code data except that you do the entire data but for subplots zoomed in do you notice what are you giving in the enumerate you're giving the part okay The subsets of the data, that is all it is. So the point is that you need to be able to break a vision. So when you look at this visualization, your first reaction may be, now how in the world am I going to draw this? And the trick of it is that you break it up into pieces and you think along different pieces right different data sets and so forth and you zoom in there so that is zooming you can do it with grid spec for finer control oh i haven't filled this section interesting okay so there is if you want even more control on where to put what and so forth there is in matplotlib something called the grid spec you can use the grid spec to place it all over the place right you can get really fancy but i won't do that but you know you look at scatter plot let's go to the next dimension so this code right uh i hope you understand it now it will take you time to absorb i would suggest spend at least half an hour to one hour thinking through this code when you get it right and you'll realize that this is nothing but repetition except for that trick it's repetition of this code this code that we wrote it is literally repeating this code here right over a few times so now we'll do 3d plots so now now you say that, all right, this is all very good, that we can use the bubble size and all of that. But what about I want to bring in a fifth dimension, right? I want to show data in 3D plot. How do you make 3D plots? So let's do 3D plots here. First of all, the usual things, color, origin, define a row. So you create a color column and so why do you need a 3d part now because you ran out of yeah the only four maximum features you can do in two dimensions now what about the fourth fifth feature if you have one so one was color then the size no no not the color it was horsepower yeah you use color size x and y location excellent y coordinates okay guys I'll take a two minute bio break um give me two minutes a very short bio break and I'll be back. How do we do three dimensional plots? So let's go and do three dimensional plots. First of all, we'll just create one more, literally a column called color. So, you know, origin, we are coloring it differently. Might as well add that color as a column to the data set itself once we do that now let's see how do we do three dimensions it's more interesting actually but easy very easy people always get scared oh my god three-dimensional visualization how will i do it it turns out it's very easy i will just do it um figure this part color okay so from here to here i hope you all agree that we have seen this there's nothing magical here right this is all repetition you create colors for the three origins and this actually why do i even need this i've already put a color here maybe this is redundant then what do you do you want to create a 3d plot so all you have to do is now look at this syntax one one one right it is just a short form of saying one row one column first location which is the same as saying basically there is only one figure there. Isn't that guys? But the way it works is that most of the time, see I've been doing plot.title, plot.this, plot.that. Now I want to change your habit not to use PLT, but to use the explicit object which is the axis the main plot the main figure object inside it which is which is the axis yeah axis ax yes so here's the thing. Think of... See, look at this jar of stones. A plot is this, the figure. This is the figure. Everything that is inside a figure is axes. A-X-E-S. Now why they chose the word axes, I don't know. But everything, all the stones inside are that. And the thing is, it isn't just the stone, because stones don't contain stones inside them. But in this particular case, think of it more like this book. This is the figure, book is the figure, but inside the book are the pages. Right? But the pages contain chapters, chapters contain sentences, paragraphs. So axes can contain axes inside them, axes object. So everything in matplotlib, whether it is the tics, you know, tics, the label, the actual plotting, the line plot, bubbles, or whether it is every spline everything is an axis axes object and axes in matplotlib is not a plural of axis it is just a peculiar choice of word yeah exactly right so when you do a subplot like this, what you're saying is that you are creating just one, one, you're in the figure, the one thing plot, you're going to actually make only one plot. Right? That's all you're saying, right? One row, one column, one plot, right? One location. But the more crucial word is projection is equal to 3D. What it means now is there won't be two axes. Typically a plot will have two axes, X and Y axis, right? But now you're saying it will have three axes, right? It'll be like this. That's all we are seeing. So we have created an empty plot, ax, which has three axes and we can play this game. Let's do that. Let's do that here, one second. I will do this and I will say fig dot, we'll go back up and see what did i do here uh plot fake subplot okay add supply so i will use this fig dot add subplot projection is equal to 3D, right? What has happened? Yeah, you see that there is, and one, one, one is assumed. So in fact, from here also, I can remove it. It was unnecessary, but 3D projection means how many axes are visible now? Yeah, X, Y, Z, three things are visible, right? That is the difference. If you did not do this, is the difference if you did not do this for example if you did not say 3d then always it implies 2d oh yes yes we can do all of those games if you want so for example do, well, we can do that. Let's say A is equal to subplot 2, 1, 1. So this is it. So do you notice what did it do? It is expecting you to bring more. Right. Two rows, one column. First, now it is waiting for you to do. Suppose I do this. B is equal to same thing. Let's do fig 2, 1, 2. two. What happens? One on top of the other. You see that, right? You understand how it is happening. That is the convention. That is a convention it follows. So now we are going to... So this line now is understood, right? This line we understand. Right. Now all we do is scatterplot. You have to give x, y and z. You're saying data.horsepower is x, weight is y, miles per gallon is z. But you still have that extra degrees of freedom color is coming from the origin at this moment we have given sizes 100 let it be fixed size edge color label is the origin like whatever color is that and you do that now the difference with 3d is 3d has a problem a 2d you look straight on right right, in a page. You're looking at a wall. But in 3D, the special thing that comes is, where are you looking at it from? Because if I give you a 3D object, it may look different from different directions, isn't it? So from which angle are you looking? So you have to specify where are you looking from. It is called the camera location. Where is the camera with respect to this, the X, Y, and so forth? So you're looking at it. And so I've just put some sensible values. You play with it here. So now you get a 3D plot. Do you see that? Right. So you're literally looking up into it you see because of the minus you seem to be looking up a little bit into it right and you got your 3d plot now this as you know observe that this you can't play with you can't rotate you can't do anything right now i have given a couple of more examples of 3d so guys at this moment you guys are not repeating after me uh we are we are beginning to run out of time and i have some more territory to cover but are we understanding it if anybody wants me to explain anything again please stop me anyone me. Anyone? Now, notice one more thing. Do you notice that we are doing, we are setting the label of x, y, and z. Why? Because we literally have three coordinate axes, right? So, we do that. Now, you can visualize more data. This is one famous data called the S curve. When you do machine learning, you will realize that I will give you these problems that find the embeddings or so forth. This is called manifold learning, especially that it is a surface that is hiding in three dimensions, right? It's like a two dimensional surface hiding in three dimensions. So if you want to visualize, nothing magical here. All you have to do is show it. I just wanted to illustrate how easy it is to make 3D visualization. Note that by definition, it's not interactive unless you make it interactive. The well-known S-curve. And then there's the Swiss roll curve. You see the Swiss roll in three. Again, it's a 2D surface hiding in three dimensions. Right. So you can do that. Anyway, this is what I was explaining to you, the nature of this. So this is with matplotlib. Let's try the same thing with plotly and see how that goes. I'll move a little bit fast. we are getting to the end of the day same data set nothing magical ah so by default black lead is it looking impressive probably not though it's looking okay okay is this little bit of interactivity you can mouse overs are there Raja Ayyanar?nilam?nilam?nilam?nilam?nilam?nilam?nilam?nilam?nilam?nilam?nilam?nilam?nilam?nilam?nilam?nilam?nilam?nilam?nilam?nilam?nilam?nilam?nilam?nilam?nilam?nilam?nilam?nilam?nilam?nilam Once again, you can apply a dash of style. I won't, by now, you have seen us do plotly for bar chart. There is nothing different. You remember the title? If you wanted to make the title fancy, we made it a JSON object, right? Same thing here. Nothing fancy. The only difference is p scatterplot. Let's study this part. What are we saying? Horsepower versus MPG. X-axis is horsepower, Y-axis is MPG. Size is size. Now, what did we make size as? Size, we said, it is the square of the cylinders. Right? And size, color is the origin. Now, template is plotly dark. Think of it as themes that plototly has internally. Right? Now, what is the width and height? By the way, how many of you remember what is the golden ratio? 14 by eight? Sort of, yes, 14 by eight, like 1.6 something. Yeah, let's do something. Calculate. Calculator. calculator. And if you do 1000 by 600, what do you get? Even 1000 by 600 is what? 1.67, isn't it? Close to the golden ratio. Would you agree? Which is why I always, you must have noticed that I always tend to pick sizes, unless there's a reason not to. I pick sizes close to the golden ratio. In art, we make a big deal about it. We have all these rules. In art, we make a big deal about it. We have all these rules. And I think some of you know that I started out my life as a painter, not painting walls of houses, but painting canvases. So my teacher taught me at a very early age all of these rules that have stayed with me. So here we go. Then, of course, I come from a poor country. Soon I realized it's better to get into engineering. I got into IT, etc. So look at this, guys. I did that. Color is origin, plotly dark, with opacity. What does opacity do? It is the same as alpha. What Matt Plotlip calls alpha, here in plotly, you call it opacity. Opacity means how opaque is it. The same thing as alpha. The rest of it is very simple. Title, x-axis, y-axis. So I did the aesthetics. How does this look? Looks awesome, isn't it guys? And you have interactivity. And did we have to write more lines of code no in fact you had to write less lines of code if anything isn't it so this is the power of d3 underneath it you can do it you can export it to, you can download it as a PNG file. Here it is. Right, here's your PNG file. Right, you can embed it and so on. So I won't go into that. We might not be able to decrease it. Okay, so the point is, and you notice that the LaTeX formatting is here. It's coming out very clearly, right? Colors, I added a splash of color all over the place right salmon color for the title so you can see that the title is in salmon also notice that i moved the title to the bottom right our title i moved it to the bottom so things like that guys so this is it but the best part is did you notice that we didn't have to do that group by and that confusing for loop. Raja Ayyanar? Remember in. Raja Ayyanar? This let's go back up to do it by regions. Raja Ayyanar? yeah do you realize that we had to do this group by and we had to write a complicated for loop over the group by? You see it guys in matplotlib, right? But here, nothing, we don't have to do anything. We are just saying color it by origin, that's it. And Plotly will take care of it automatically. Much simpler. Much, much, much simpler. Right? So this is it. It looks beautiful. Let's go one step further. This is coloring it by origin. But what if you want to color it by, let us say, the weight of the automobile? So the size is the cylinders. It's square of the cylinders. What if you want to color by weight? All you have to do, nothing, no change. All you have to say color by weight. One line change. Literally, guys, between these two code, Plotly handles these separations very well. Let's run this and see what comes out. And you get this beautiful plot. It's by weight now. So who drives big, heavy vehicles? We. I'll let you think over it for some time and appreciate how simple the code here is. By now is the code beginning to look very easy guys? Yeah. So familiarity makes it easier. You take a few examples and then it becomes much, much easier gradually. How would you add, excuse me, how do you add plotly annotations in plotly? Very similar. Remember, this code was the same code that we did in matplotlib. You have to break the data out and find the min max once you have found the min max here is the annotation syntax more or less the same slightly different you know a little bit here there but when you let's run it and see what happens i added only two and it but i mean not defined oh i have to run the previous segment yeah here we go so do you see the annotation here? Just out of laziness, I put only two annotations because now you all know what annotations are. So with this visualization, we sort of stop here. But you would agree that this is a pretty good visualization, isn't it? Very nice. Yeah. And normally, if you saw this visualization before this workshop, probably you would have said I can't do it. Right? Definitely. Yeah. And yet it is just these few lines and you're there. What's it? Okay, I still can't do it. You can I hope. You can't do it? Okay, then I'm going to stop here and make you do it. Let's start typing. Would you like to all just start typing it? I think more than the typing, the constructs have to sink in. Yes, exactly. But I hope you're seeing that I'm explaining all the pieces. If anything looks not obvious, ask me guys. I will explain. But do you notice that, how do you build it? Did I build this plot in one stroke? No. I did not write the whole code at one go. The best way of thinking of it is, you make one powerful visualization over at least four cup of coffee. Morning, evening, morning, evening, two days, just skip, do it slowly. At each time, give it just 10, 20 minutes. Don't try to do everything in one go till you become very familiar with it. Then you can do it at one go. But till you become familiar, just give yourself 20 minute slots or 10 minute slots and do one little piece and go away and then again come back and do it so you should first start with spotty before going to that plot yet see go about doing if you look at the internet you'll find a lot of discussion about how matplotlib shouldn't be used, Plotly is there, or Seaborn is there, or Altair is there, and therefore you should use all of them. It doesn't work like that. The way I think about it is, you should know the strength of have limitations with matplotlib being the oldest library it actually is very versatile. But its problem is every inch of it's like you know you go, you go to a bicycle race. Other people bring bicycle, you bring a huge box of parts and you start assembling a very custom bicycle before the race right so what you will end up assembling is very powerful but you have to sit and do it you see that right it's like java and more js sort of like that right this one is easier it's a little easier right likewise now when we do the scatter plot the code is almost exactly the same guys, 3D, XYZ. Do you notice this code? I am making a 3D scatterplot, let's say. First, let's look at the scatterplot. Now the beautiful thing is it's interactive. See, I can rotate. I don't know if it is showing up in the zoom. I am rotating, I am zooming into it, right? Zooming with my mouse, I'm zooming into it, rotating it. I can go in and see what's happening here in this region of the code, right? I could do that. Let's say I could zoom into just this bit of code. There we go, right? This with a mouse, I can do, I can move around. I could do things rotate it right and so that is the fun of good visualization libraries right and by the way 3d I'm just getting started but next time if you do all of this library, these notebooks properly and come well-versed so we can move faster. Today was hard because you're breaking new ground. So even now by evening, things look familiar. Would you agree that the things we did in the morning by now look very easy? Yes. So it takes time to get through it, but do give this week to really reviewing and studying the notebooks I publish on the course portal. Be good at it so that next time when we come, we can move faster. We have some beautiful things to do. We have to do network visualizations. We have to do some more 3Ds. We have to do maps. How do you project data onto maps right and some things like that we will have a lot of fun next time but it can happen only if this time oh by the way we missed something important it's already six o'clock going to be six so i will stop we miss line plots line plots are easy right we will cover them next time uh In fact, I will post the notebooks anyway so that if you get time, do it on your own. So this is the S curve. Remember the same S curve we talked about? This is the S curve. And you feel with this is that 3D is great so long as you can interact with it, so long as you can enter into the data. Right? And sit in the center and look how it looks from inside the data. Likewise, the Swiss roll, no code change. You notice that there is no code change. And if you look at it, could this code have been easier? You have a data frame for the xyz or even go to miles per gallon would you agree that this is very simple code x is horsepower y is miles per gallon z is weight and then the rest of it size by weight color by weight and this and that very simple and that very simple right so that is that this is your swiss roll and you know you can rotate the swiss roll and see how it looks from the side right isn't that fun yes right so this is that now we can try so this was the plotly library let's try a luck with scatterplot altair oh by the way there's more to it let's let's go to seaborn seaborn remember is just based on matplotlib i will be quick because we're running out of time remember seaborn is matplotlib most of the time you're writing matplotlib code except for one or two helper functions from cbon so the same data i will just keep running them so this is your standard scatter plot using cbon right not very impressive but then you can prettify. The same rules apply. GG plot. This is nothing but your matplotlib. Except that you're using Seaborn to do the scatterplot. You get this. Now, notice that here also, you don't have to do the groupby. In matplotlib, you had to do that groupby thing. You don't have to do that. Seaborn has a convenience just give it origin it will understand and so you will get this lovely plot color points by weight if you want to do it by weight it is again the same code nothing very fancy guys the hue the color is by by the way they don't use the word color they use the word hue by the way they don't use the word color they use the word hue which is a synonym of color so hue is weight how do you add annotations nothing it is exactly the matplotlib code because it's sitting on top of matplotlib okay how do you do zoom boxes we now can I leave it as an exercise for you guys? The Zoom boxes, right? Yeah. 3D scatterplot, because it's based on matplotlib, it doesn't give you anything extra. Actually, this is where it runs out of gas. I mean, it says they haven't put anything extra for 3D plots over matplotlib. So it's just matplotlib. But CBON gives you something unique of its own. It's called joint plot. is just matplotlib. But CBON gives you something unique of its own. It's called joint plot. So suppose you could see data and its descriptive statistics along with it. Wouldn't that be lovely? So this is the basic joint plot. Look at this. You have horsepower versus miles per gallon. Let me do it like that. Right. This is the main scatter plot that we just made. But what do you notice at the top? You see the histogram, the frequency plot, right? The histograms. Really? What are histograms? Like in that region, how many data points are present? The count of data points present in that particular region. For example, in this region, which is in this particular vertical column, how many data points are present? It shows you data density. Likewise, along y-axis, it just gives you a sense of that. So that is the beauty. Joint plots are the power of Seaborn. I always go to Seaborn to get the joint plots. Now you can do more. You can even superimpose something called kernel density estimators, KDEs. And this will make sense only for those who have done machine learning classes with me so guys do you remember that i said that you can fit a regression line to the data or regression curve to the data this is x y data right you can fit a regression plot and the beautiful thing with seaborn is that you get that free you just to say, let me just show you the one little keyword. Lowest is equal to true will immediately fit a regression curve through the data. It uses a particular algorithm, right? It's a locally weighed regression, right? It will do that. Lovely. And not only that, do you see that there's a line over the histogram? And not only that, do you see that there's a line over the histogram? This line is called a kernel density estimator. It is a more smooth representation of how dense the data is in the regions. Kernel density estimators is a whole topic. We are going to do it more properly. One second. Are you sure I'm wrapping the class? Let me call you in a bit. So it gives you a sense. We'll have a whole notebook on kernel density estimators. It's six o'clock, going to be six o'clock. So I'm winding up. By the way, how many of you are ready to stay for another two hours? I don't think I can do it. all right it's getting late we will break it up but next next saturday we'll cover and guys remember i have moved a little fast towards the end to cover enough material but remember we are available monday to friday please reach out to us in the evenings we and throughout the day if you want whenever you want but there will be regular sessions every evening and we are available for helping you throughout the day right take our help in understanding and if you need explanations of some piece of code in the this so this is it you can change the number of bins you know this is a the number of bins. You know, this is a finite number of bins, whatever it is, 1, 2, 3, 10 bins or 15 bins. You can choose the number of bins. You can play around a little bit with it. You can see I increased the number of bins. It looks better representation of the data. You can do all of that. So the way you think about this is that this is the main plot, the joint plot, right? And these are called marginal plots. The word comes from statistics. Whenever you have two-dimensional data, if you project it along only one axis, how does the data look? And if you project it against the other axis, how does the data look? Those are called marginals, right? The word comes from spreadsheets. If you look at financial spreadsheets, in the margin means, for example, in the right margin, you can add up all the values in the row, all the column values of the row, right? So for example, if the rows are days of the month, and the row is about how much, I don't know, money you made from shoes, right? So that rose total would be the total money you made from shoes in that month, isn't it? You write it in the margin, or the rightmost column typically, or in the margin. From there comes the word margin. Are we together? That's it. So these two are the, what are the marginals? This marginal and this marginal. A top marginal, right marginal, main plot, joint plot, right? So that's how you think about it. Now, you can get fancier, but suppose you feel this is not powerful enough. Let's look at what we are trying to do. Aha, do you see there'scier but suppose you feel this is not powerful enough let's look at what we are trying to do aha do you see there's a lot more happening here we have not only the histograms but we have put something called the rug plot what is record every place that you find a data you draw a line along the x-axis but at the top every place that you find the data for example there is this data here so if you go up you find this data point you see this vertical line here right observe where my mouse is is my mouse visible right so this sign corresponds to this data point right likewise here there are two data points you should see are things pretty close by so like this you know and then here also so this point corresponds to this their whole density of points so this this is the rug plot now what what is this background shading it is like it is gives you these are called kernel density estimators they give you a sense of what how dense a region is with respect to the points right like in this case the deeper the blue the more dense the clustering of points there is right i hope this is apparent by looking at this figure now you could go about this far go about this far using this joint plot syntax and this is by the way this joint plot is an excellent thing for to cover during the week and ask for help in understanding it so let's think about it in the join plot we first draw the main plot itself the data the scatter plot right then we add a kernel density estimator. Do you see we are layering it? Kernel density estimators are this blue, you know, blue ink, light and dark blue ink, right? They are the kernel density estimators. We added that on top of just this basic thing and lowest and all this too. Then we do one more. We say, hey, let's add all these rug plots also. So you can go on layering things on top of each other. So this is the rug plot. These are called rug plots. And now if you look at this data now, would you agree that it is a far more informative than just a scatter plot? It gives you some statistical description of the data, a feel for the data. Would you agree, guys? Yeah, that is it. But then suppose you need even more power. Then what happens is that the joint plot internally has something called the joint grid. You have to go down to the primitive of joint grid. Joint grid is that. So let's create an empty joint grid with horsepower and miles per gallon. If you create it, you get this outer template, which is what you're seeing here. Center, top, right. Do you see this? Center, top right. Center, marginals. Top marginal, right marginal. Now we can choose what to do with each one of them. You can say your data, the same thing, join grid in the center. You happen to choose to put the scatterplot. And this is it. And scatterplot here, this is your data. This you do. What happened? Now let's look carefully. You're seeing data, X is horsepower, Y is the sizes based on cylinders. Hue, color of the plot is based on weight. Now we have recovered the graph that we made little while ago, right? Is this graph looking familiar, guys right we have drawn it there's nothing magical about it this is it but you have to specify where are you putting it axis is where you are saying it is in this one this axis is called ax joint this is a joint plot location so you plotted this part you say all right good i got this one right now let's put something on the sides oh but let's just focus on the center itself you say all right let me put kernel density estimators along with contour lines contour curves so the same code from here to here remains the same now you add the contour plots sorry kernel density estimators kde plots you do that and we choose a midnight blue color etc and it has some properties like alpha and how many lines how many levels into which density is broken up into and you still stick to the center when you say shade is equal to false it will make the contour lines you know the edges and when you say shade is if you don't say shade is equal to that if you instead say kd is equal to true it will do the shading right so what we should end up with is and then you do the histogram where do you put the histogram on the y margin up margin and the x margin here right so you end up with so do you see how systematically piece by piece you're layering this together you made the first scatter plot then you put contour lines here then you put rug plots then you put histograms then you put kd you know kernel density curve on top of it right but do you realize that if you go systematically no one part is hard would would we agree on that before we close today guys that now at least this part begins to look very simple isn't it Now at least this part begins to look very simple, isn't it? Very simple. And this KD is exactly this, except that it plots, not scatters the points, but it plots the density plots, contour lines. This is the histogram at the top, histogram on the side. And we add rug plots also. All of them have just some very basic attributes, right? Do you notice that I colored this salmon and this midnight blue? Where is that? Let's go and see. Look here. Midnight blue is the one which the Y margin means this guy. And this is the X marginal. Because if you project the data along the x axis it becomes the top marginal plot right and so you end up with this particular visualization which i hope you appreciate the beauty of it looks beautiful isn't it right that 10 minutes i have i'll take actually, to show the same thing using Altair. So guys, so the lesson to take away is Plotly is beautiful. It gives you nice interactivity. Matplotlib gives you a lot of power. You can keep on doing things, but takes longer. Seaborn is very powerful when it comes to joint plots. Joint plots is its best foot forward. It's a shining star of Seaborn, in my view. You cannot create this kind of a plot as easily with any other library. And the beautiful thing is because Seaborn is sitting on top of Matplotlib, it is basically matplotlib. You can go on adding things to it. All the power of matplotlib is still accessible to you. Go ahead, Albert. So these colors, can you change them? Oh, very easily. Go and change whatever. What do you want to change? Can you put the color? Or you have a good idea? Yeah, you see the colors, colors right go put whatever you want right no you'll get the hang of it see here's the thing when you don't know colors use color map because great people have thought deeply and given you a palette use that palette right i don't know why Use that palette. Right? I don't know why. When I was a kid, I used to make paintings and my trademark was my skies would be purple and red. Like, you know, very strong, vibrant colors. So it's always been like that with me. So, well, there it is. So this is that. I would like to do this thing with altair now and we have only about 10 minutes so i'll be quick and show you just just run through this all the data is still the same auto data there's that scatter plot with altair very simple by now you're used to remember the only difference between a bar chart and scatter plot is there the aesthetic was the the unit of was what bar mark bar do you remember that in bar charts we used to do mark bar do you remember guys but here we do mark circle because we want to put circles all over the page. That is it the rest of it, I hope, looks exactly familiar nothing unique and coding X and y axis horsepower and mpg and then you tell that both are quantitative measures. So far, so good guys right, this is it, we can do, and then we can apply a dash of style and all that that we have been doing. Right. So all of those things change the width. Why 800? It is better with 1000. But OK, I'll leave it as that and more information. So I'll have to run this because Altair won't accept. Let me make it just. This is Jason. Yeah. Let me reload. Oh, there it is. OK, so I had to mark it so here's the thing this is it now notice that when you make a chart like this you can you this is altair you can save it as svg now remember guys any figure that you can save as svg is gold why because you can scale it up you can you can make it the size of a billboard and paste it on the side of a building and it will still look pretty right it won't pixelate so svgs are actually the right way i would suggest to do that and you can open it up in Vegas remember you could Vega editor you can do that apply a dash of style the same thing remember we now changed what make it a little bit more transparent where's the style here's the style do you see this so these are the stylistic elements pick a color salmon opacity you know what, right? The stroke white means that give it a little bit of a white edge. That is it. Then add more information. Remember, you can use color to add information. What are we using color to add information about? Let's find out. Color. We are using wage for color. Isn't it? What happens? happens ah look at this heavier vehicles are color coded in this particular case we used a color map yellow orange red you can change it to any of the color maps right looks good guys it conveys some meaning isn't it heavier vehicles are here horsepower and now discrete unordered color scale for example if you are trying to do origin or something oh by the way if you one of the things people do is one of the color schemes because tableau is used so often people say oh but it doesn't look like tableau tableau color scheme is supported is actually in the open source it is there in every library so you want to make it tableau like colors you just say color scheme is supported, it's actually in the open source. It is there in every library. So you want to make it Tableau-like colors, you just say color scheme is Tableau. Tableau, by the way, is a popular GUI tool to make plots, etc. If you don't know programming. So here it is, guys. Do you notice that it is now following, you don't know, but it's following the Tableau color scheme. you can add more information by size remember we just use the color but size is still in our hands we can say ah there we go x-axis scale then you have to say from what to what because you don't want it the sizes to just blow up so you can give a little bit of a size size thing so now do you see that these bubbles are bigger right then you can add annotation again nothing new just the way we did before annotations its support for annotations is not that great there is no lovely arrow or anything You can circle a region and it will help you put a text there in Altair. I'll leave it as an exercise for you to get that lovely annotations that we did with other libraries. You can add tooltips. How do you add tooltips? Just one-liner. Do you see? The tooltip should contain these four attributes of each point. So let's do that. Let's see, does it? Do you see the tooltips, guys? It is the four. Where is it coming from? From just this line of code. Then, ah, notice that these plots are not interactive. I can't zoom in or do anything. Now what will make it interactive? Oh, all we need to do is this, .interactive. Isn't that lovely? And so what happens? Oh, look at this. Now I can interact with it. I can zoom into it, zoom out of it, move it around. So the interactivity is here now. You still have the ability to save and so on and so forth. Now, the same thing, the fact that we did intervals. So one of the things that people want, which is very good about Altair is, suppose you want to make a plot. And on the right hand side, you keep the zoomed version of the plot. Do you notice that as I zoom in, what do you see on the right hand side? inside the zooming happening here the window is entirely dynamic zooming right and so there is a bit of code because we are over time we can either do it in the week sessions or you can stay the code it's very easy we have commented it very well hopefully so let me give you an idea first of all you you capture the extent like how far along uh is the region that you have then you make the base plot remember this is the plot that you made right and then the the the left chart is this chart nothing special here the right chart is based on the zooming of the left chart zoom so how does it work all you have to do remember scale from where to where extent is the x extent and the y extent that you capture from the mouse that's all yeah and you are saying main and zoom properties are this and there you get you get this beautiful zoom chart in altair i think this is very nice i mean show some other properties oh yes yes you can play all sorts of games it's interactive remember the whole power of d3 is accessible to you right the faceted charts faceted different facets of that right remember we were doing that right um yeah this code it see one of the things is we have laid the code out simply so that's easy to read right but it looks long because of that but each element would be easy to read because you see the bins 20 bins and so forth so the joint plot they call it the faceted plot. We have tried to recover it with Altair. And when you do it with Altair, see how many more lines of code it is. It is easy code, but it's still a lot of code. So what do you see? That if you had to draw this, which would you use, Seaborn or Altair? Seaborn, right? That is it. And that is it. It is good to know all the libraries, guys. Don't limit yourself to only one. You'll develop a tunnel vision. These four libraries are the best of the breed. Learn it. And of course, if you are willing to venture into JavaScript, then pick up D3. Now, there was a time when I would insist that everybody should know D3. But now it's not really all that necessary because with the presence of Vega and Vega Lite, you can do things more efficiently in these and most of the things you will do, you can do it. But because you can use Vega using Altair and you can use D3 using Plotly, your first reaction should be this. Can I do it with Vega? Can I do it with Altair and you can use D3 using Portly, your first reaction should be this. Can I do it with Vega? Can I do it with Altair, Plotly? If I can't do it, then go one level deeper. Altair, Plotly couldn't do it. Let me try it with Vega, VegaLite. If I can't do it, then finally I go to D3 and write code in D3. Right? If you are looking for interactive plots, if you're just looking for static plots, then you can just stick with matplotlib and systematically build it up. It will take you time, but you'll get there. But you wouldn't suggest that for matplotlib and cplotlib, right? You say learn matplotlib? Must learn matplotlib. Must learn. Because it's the ubiquitous library. Otherwise, you won't be able to even read most of the code that people write in the data science place, right? Because they generously sprinkle their notebook with matplotlib most of the time. But you realize that most people only know one library. And that also they know because they're copy pasting from the textbook or somewhere else. Because that code looks ugly just go to kegel and see how how those plots look compared to the kinds of plots we make i hope at the end of the day you realize that if you did review the material today you will never make the kind of ugly plots that sort of proliferate throughout the web and all of this kegel and whatever medium notebooks etc you can do better right you can make beautiful visualizations so do that yes see the michael bostock created the grammar of graphics in JavaScript because JavaScript was taking off. Everybody wanted to converge in JavaScript. Google was spending a ton of money to accelerate JavaScript, right? There was a huge momentum behind it and it paid off. Today, Node.js and JavaScript and Angular and React have taken over the world. And the visualization library in the JavaScript world is D3, Michael Bostock's. In fact, I would say that in the open source community, it is the most powerful library, which is why in Python, there has been quite a few efforts to layer on top of D3 and Vega. That's it. That's pretty much it. I'm pretty decent in JavaScript. so should i spend some time on that on d3 yeah definitely but before you do it remember escalate it slowly first master vega light instead once you because it's quicker any one thing you want to do if you if it if you can do it and see here's the deal if you can do it in altair it is the shortest lines of code it will produce vega light code for you and therefore you can put it in Altair, it is the shortest lines of code. It will produce Vega-Lite code for you. And therefore, you can put it in your web page. If Altair cannot do it, then you go to Vega-Lite and handwrite Vega-Lite. If that also doesn't work for you, now is the time to go into D3. So you should escalate gradually. Otherwise, you waste a lot of tool it's like you know i really know how to build a web you know browser so every time i want to design a website i'll start with c code and write a browser and then with the browser pointed to web pages it doesn't make sense right It doesn't make sense, right? All right, guys. So with that, I'll end today. I hope you had fun. I will post all of these notebooks within a couple of hours. I'll take some rest. And after that, I'll post the notebooks. Kyle and Harini, I would say Kate and Harini, thank you very much for staying up and helping everyone.