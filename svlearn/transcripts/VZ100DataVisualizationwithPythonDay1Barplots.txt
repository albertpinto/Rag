 Today is Saturday, January 22. Welcome to the data visualization workshop. We are going to have a two-day workshop, all Saturday today and all hours of Saturday next week. In between these two full day sessions, you can reach out to us, and I hope you do reach out to us, to clarify your doubts, to review some of the stuff we did in case you felt we went too fast and so forth. By we, I mean a faculty here of four people. I would be your instructor, the primary instructor. I am Asif. Then we have in the California time zone, we have Kate Amon. She's here in this Zoom meeting. And we have Harini Datla. She too will be joining in a few moments. And in the India time zone, we have Kyle Busy. So around the clock, essentially, if you get doubts, one of us would be there. I would encourage you to join the Slack group. If you haven't accepted the invite, please do accept the invite. If you haven't accepted the invite, please do accept the invite. If you haven't been visited the course portal, and this is the course portal, then it would be a good time to visit the course portal right now and make sure that you can access it. As this course develops, we will be adding a lot of material to the course portal. All the notebooks from today, you will find that they get added. There will be reading materials and output references and so on and so forth to the course portal. Now, in this particular workshop, there is actually a project which is optional, a capstone project. The capstone project is you take any data that you like, that you find fascinating. It may be one of the classic datasets, or it could be a new dataset in your workplace. But if it is your workplace dataset, please do make sure that you have approval or a release from your employer to use that dataset for your capstone project. Obviously, you don't have to give us the data set or do anyone share it with anyone, but to use it in your capstone project and of course, keep it within your company, but you'll have to present it here. On the last day, on the next Saturday, in the last hour, for those of you who do the capstone project, there will be a presentation in the lobby, which is at the back. And most of you are familiar with the lobby. And for those of you who are remote, we'll do it remotely. And it will still be in the lobby room. What it would mean is you'll be presenting your work to this participant group, to this batch. And it's usually a lot of fun. You get a lot of feedback and encouragement from uh your batch mates from you from other participants in this batch so i start thinking about what data set you would like to do a presentation on right and that is something to do now there is no study required outside this particular two Saturdays. It isn't that we'll end the day with a lot of homeworks. Whatever you learn here, that's about it, and that should be sufficient. However, should it interest you to pursue it more aggressively, reach out to me and I will give you a lot of references. Data visualization is a very important topic and a lot of people take a lot of pride in it, so it is worth mastering it very well. So that's to the logistics of this course. We will start, I apologize, I gave mixed information. At one point, I said we'll start at 9.30. And what I meant was, I suppose, 9.30 Asian Standard Time, which means I plan to start strictly at 10. And now it is 10. And we have started. But next day also, next Saturday also, we'll start at 10. I've given the end time as six. But that part is six plus minus two. It all depends upon what space we move in this workshop. There is a certain amount of material, the curriculum is there. There is a quantity of learning that we must do to become very fluent with data visualization how much time it takes depends on the pace at which we can collectively move forward now the way this course will work is i will move forward at a minimum pace but if you fall behind that minimum pace then please do in real time reach out to kate and to kyle Kyle privately and they will keep and Harini and they will help you catch up. Lunchtime is a great time to catch up. But because the nature of this workshop is interactive, we will do things right now. There will be very little talking except in the beginning what I'm doing now and maybe another half an hour of it after that no more theory it is all practice and so we need to move at pace in this particular workshop right so that's to the logistics of this class now coming to data visualization many of you have been students of machine learning here some of you of machine learning here, some of you in university systems and so forth. When we do data science, machine learning, statistics and the various variants of it and artificial intelligence, this is the broad subject that looks for meaning in data. When you search for meaning patterns, underlying explanations in data, we use many things. We for example use algorithms. We use things like logistic regression, linear regression, random forest, and all sorts of machine learning algorithms to model the data and make it do predictions. And when it makes accurate prediction, we feel that our model has somehow learned to explain the data or understand the data. It has figured it out, which is all good. It is, those are inferential models. And when we do clustering, when we do dimensionality reduction and things like that, we search for patterns in data, we look for clusters and things like that. And all of that is good. But perhaps the most powerful method that helps us or approach that helps us find meaning in data, I would argue, is data visualization itself. Of all the machine learning algorithms or machine learning engines that you can imagine, the engine that has been trained for the longest time is the human eye and the cognitive intelligence behind the human eye. Today, for example, you see Google running its car all around the streets and gathering data and you hear that it has crossed so many million miles of road travel, 100 million miles of road travel, and the cars and the sensors in the car have been gathering optical data of the roads. And the car has been learning from from that this has been going on for what about let's say five to ten years on the other hand the the eye if you look at the evolution process we know that i developed we know that fishes have eyes we know that even more primitive organisms for example amoeba and things like that they respond to touch they respond to sensations and you see the proto you see the early beginnings of vision of some form but certainly eyes the fishes have it the reptiles have it the mammals have it right all the amphibians have it so So I has gone through at least 100 million years of learning. And just pause and think about it. We have a machine learning engine that is so absolutely lightning fast that you wake up and when you see your dog, it doesn't take you, you don't even realize that your mind has, your eyes have recognized a dog. When you look at your child, when you look at your parents, you don't realize that there is any recognition part or inference part involved. But it must be happening. Because what you get is just light and color entering, wavelengths of light entering your brain at different intensities entering your eyes they are received by the rods and cones in your eyes the biological units the biological sensors from there the nerves pick it up and the interpretation the inferential engine comes in and it immediately says ah my dog or my child or my mom and so on and so forth so we should never underestimate the the power of visualization the power of representing something visually because it meaning becomes much more accessible in the data. Now, data visualization is, there are many things you can say about it. Generally, there is a belief, especially in technical circles, that data visualization is eye candy, right? The real thing is to build machine learning models, or the real thing to do is to do some projections in Excel spreadsheets or to do things like that. Our real thing is to work with database and do SQL queries and whatnot. And we are all amongst us, people who deal with data in some form. In the minimum, we make to-do lists, right? And most of you have experience with databases. Most of you have experience with data manipulation, data pipelines, in some form or the other, as you do in your workplace. And many of you have taken machine learning courses here or elsewhere, and you always are enamored with algorithms and their ability to learn and create inferential models or pattern recognition. But today we'll focus on data visualization. So what is visualization? Why is it relevant? I have a quote from two of the great people in this field, two great psychologists, not psychologists, statisticians says the greatest value of a picture is when it forces us to notice what we never expected to see that is it many times when you look at data you say that data can overwhelm you we can understand 10 lines of data or 20 lines of data. If that, if the data has multiple columns, we already begin to get lost. So then we start using statistical measures, mean, median, mode, you know, kurtosis, skew, all of these measures, min, max, range, to get some sense of the data. Each of them is a statistic, a range of a data of a set of values of a random variable is a statistics min is a statistics maxis mean is median is modus cartosis cunis and so on and so forth you can go to higher moments and you can create other statistical descriptions of the data but at the end of it they are summary descriptions of the data right and as you will learn while they say a lot about the data they are necessary but not sufficient and we'll come to that visualization also has the purpose of storytelling see data when it comes there is a generative force behind it that generative force you don't see in the data often when you visualize the data it gives you a sense of where it came from what is the dynamics behind the data so we will do that remember when we do visualization in this particular workshop our goal is not to create a pretty flashy um plots and graphs that we should leave to the marketing people here visualization when you talk about it as a formal subject primarily it must be illustrative it must be explaining it must tell a story. Its purpose is that, to tell the story, to explain, to illustrate. Aesthetics is a secondary concern. It doesn't mean that you create ugly plots. Ugliness is offending to the eye. We must make it aesthetics. It must have aesthetic. So when we do it today, we will learn about good visualization and bad visualization we will learn about what are aesthetic rules and we'll proceed but i'll start with a few basic principles in visualization less is more so quite often you see bar charts and have you noticed that the bar charts that you often see on the internet, if you were to Google it up, they will often have a three-dimensional shape, right? They will have color gradients associated with them, and they will have very fancy look to them. Generally, the thinking is that is not a good idea. are at at foundation scientific plots in scientific plot explainability is important and there is a principle which i call the principle of least ink or as one of the great people in this field of data visualization uh edward tuft a professor at stanford says the data ink ratio you should use the minimum ink to illustrate clearly the data and explain the data so don't do things which are just cutesy do things that will uh elucidate the meaning of the data much more right or the or the character of the data much more so with that guiding principle we will we will get started see when we talk of languages languages the reason that we can in english for, we can construct any sentence we want to express any thought we like. There is an infinitude of words or sentences that one can construct that are not nonsensical, that express some idea or the other. Yet, when we construct a sentence, the implicit assumption is the reader will understand what that sentence is. A sentence that is a random jumble of words is incoherent. It doesn't convey a meaning. So when does a sentence convey a meaning? Of course, there should be a thought behind it that the sentence expresses. But for it to be understood by the other person course there should be a thought behind it that the sentence expresses but for it to be understood by the other person there should be a common set of rules and those set of rules are the grammar of a language a grammatically incoherent sentence is jarring if if not completely incomprehensible so there is a grammar and the grammar helps you construct any kind of sentence that you wish. With the world of data visualization, what happened is people started out in a very ad hoc fashion. There are many, many libraries that are ad hoc. Any developer who thought he knew or she knew how to create a library that would be useful to others. Usually it starts with creating an API, a few functions or methods or classes that you find useful. And then after a little while, you feel like sharing it with the world and you share and it becomes a visualization library. So there are many, there's a plethora of libraries. Then in this space came a landmark work, which we'll adhere to. There was a seminal work and it was represented in a book, in a research paper and a book. The book is called The Grammar of Graphics and it basically says that much as language has grammar, visualization can also be thought of with basic primitives and a grammar that defines the relationship between this of primitives right so for example data is a core component of visualization but so is the aesthetic elements are you laying the data as a line plot as a bar plot as a scatter plot what are you doing right for for some data imagine some two-dimensional data right so there are aesthetic elements and then there is data and it is how do you put the two together if you have a very structured set of rules then it can help you create very very powerful visualizations without a thought you you can look at a very complex visualization and in your mind, you can break it down into pieces. And as you break it down into pieces, you will realize that, well, it wasn't that hard. It is a composition of parts, very much like a sentence or a paragraph is a coherent composition of words. we will learn that language that is the purpose of this workshop so it is not just to learn this library or that library but it is to learn a structured way of creating any visualization that you want right and the way well the closest analogy that i can give you is those of you who are familiar with photoshop if you are familiar with photoshop you realize that what you do you create a layer when you create a very complex visualization you don't just do it in one single thing one complex bit you create layers upon layers upon layers and quite often a good Photoshop work contains, and I used to do Photoshop, I haven't done it in almost six, seven years now, but when I used to do that, sometimes a good representation of visualization in Photoshop or a picture in Photoshop by the time you're done would have something like 30, 40 layers to it or 50 layers to it. I hope this experience resonates with those of you who have done Photoshop. And you know that each layer is contributing something to the overall picture. But of course when you see the picture on a monitor, when you export it out as an image, those layers are not visible except to the trained eye who can discern, which can discern, the various layers that must have gone in constructing this picture. So in the same way, we'll develop an ability or a mental training that can help us see any visualization and in effect see the layers, in effect see the components and say, aha, I know how this was built. And sure enough, I can go ahead and build it. That is the purpose of this workshop. Now, in the world of Python, we will be using Python. The title of this workshop was Data Visualization with Python. It is primarily addressed to data people, people who do data analysis, whether in Excel or whatever it is they do, or PR data scientists, or variously machine learning, machine learning engineers, AI engineers, and so on and so forth. In other words, and people who do SQL and so on and so forth. So in other words, the entire cabal of trying, you know, collection of tribes or cabals that deal with data in any form whatsoever, and would like to visualize it. So it has a pretty broad appeal, but we will use Python as a primary language. It has emerged more or less as a de facto standard in the data community or the data science and data engineering community. So we will be using that. Now, as we proceed, and this is all the theory that we will have, just to give those of you who came a bit on time, actually, at 10, a little later, we will have lunch from 1 to 2.30. It will be a working lunch. There will be two articles or two papers that I will encourage you to study. Both of those papers are here. Do you see that visual and statistical thinking? are here. Do you see that visual and statistical thinking? I would like you to read this paper and of Edward Tuft and his writings and a paper called the Grammar of Graphics. We just talked about Grammar of Graphics a little while ago. So with that background, it may interest you to go read this. At the same time,ward tuff's thinking that visualization should be minimalistic is captured in this particular article now edward tuff took minimalism too far in many ways so the pendulum went from having a lot of what is called chart junk you know fancy three-dimensional bar charts with gradients and fancy fonts and gimmicks and so on, lots of gimmicks. The pendulum swung, the belief was that you must have absolute minimalism. And that was Edward Tuth's thinking in the visualization space. So that became a school of thought, minimalism. But the pendulum is actually swinging back. There is a whole body of psychological research of visual perception research that shows that char junk is not quite evil when you take a plot and you inject some amount of aesthetics to it or you know some cutesy element you make it more memorable people tend to remember the what the plot was saying much more. So the second paper, this is a paper, it sort of brings back and it says, in minimalism, we have gone a bit too far, let's bring in some amount of it, which doesn't mean that we clutter our visualization with chart junk. I would like you to read these two perspectives in over the lunch. So you have a sense of how the visualization community thinks about visualization and what are the opinions in schools of thought in this community all right we are going to deal do visualization using many many libraries but but four of them primarily, we will use matplotlib. matplotlib in this space is the earliest library. It is based upon NumPy. It predates, interestingly, it predates the grammar of graphics. So it doesn't strictly follow the grammar of graphics, but you can impose a grammar of graphic approach as you work with Matplotlib. And that is structured approach I will be explaining in the subsequent hours. Now over Matplotlib, people felt that it's too low level and to get an aesthetically pleasing graph, you have to do a lot of work. So then Seaborn Library came about, which gives you in many ways, ready to use components, ready to use plots, right? Says that you just plug into your data and it looks good out of the box. You don't have to do anything. What does it do? It is based on matplotlib. Essentially it means that the creators of Seaborn have done the hard work for you. Matplotlib you can think of as very powerful, but a low level library. Then you have then one interesting development came. Matplotlib is fundamentally based on NumPy, which is a library that helps you manipulate multi-dimensional arrays. That's the simplest way of thinking about it. Now, within the data community, a very popular representation of data is called data frame. A data frame is essentially like a, well, those of you who are familiar with spreadsheet, think of it as a spreadsheet. It has rows of data and their columns. The columns could be numerical the columns could be categorical for example name of cities and so on and so forth if you're looking at weather in different cities right so that representation goes way back the r programming language has data frames as a fundamental unit built into the language. Then in Python, data frames don't come built into Python because Python is a general purpose language, not a statistical language originally. But the Pandas library, which most of you are familiar with, but some of you may not be because it's your first encounter with data. Think of Pandas as a Python's way of doing spreadsheets and manipulating a spreadsheet of data or a data frame. Its core unit is the data frame and there are operations that you can do on the data frame. So now one of the things that happened is there was a disconnect. You have Matplotlib that thinks in terms of a multidim-dimensional arrays and now the most popular representation that people are using is pandas so there is a bridge between the two pandas can use matplotlib under the cover seamlessly and in a way it feels more intuitive so for example if you have a data frame which has columns x, y, when you say that data frame dot plot x comma y, it feels very intuitive. So that is we will actually, wherever possible, take the approach of using pandas first. If we can do it using pandas, we will do that. Right. Then there is another group of people who have, as I mentioned, there has been actually a landmark work when the grammar of graphics as a theoretical foundation came about in visualization world. Two very, very powerful libraries, at least two came about. In the world of R, it was the ggplot. And ggplot is a literal representation and Hadley Becham is of course the creator of ggplot. So this article that you're reading is the seminal article in which he introduces his rationale behind ggplot. And the other library in the world of JavaScript is from Michael Bostock, some of you know, is the D3JS. D3 library when it came about, it was a game changer. It pretty much cleaned the slate of a lot of other libraries that people had created. It's the big gorilla now. now d3 is a little hard to learn and so what people did is it's a very low level language d3 so people have created layers over that for example there is vega and vegalite there are other libraries that people have created in the javascript world that facilitates it that makes it a little bit more rapid to create standard plots, very common plots. Whereas D3 is a completely a representation of the grammar of graphics. You can using in a systematic process, you can create just about any visualization that you like, but you have to go down to the graphic primitives. Now, in the Python world, there have been efforts to leverage the whole D3 movement. And using that, there are two particular libraries that we'll focus on, Altair and Plotly. Altair lives upon Vega and Vega Lite, which is sitting upon D3, and Plotly directly uses D3. Both of these libraries are very pleasing and they're interactive. A matplotlib, unless you explicitly state so, it produces static plots, static graphs. Whereas the Altair and Plotly, because of their D3 lineage, JavaScript lineage, they are highly interactive out of the box. So those are the libraries we'll focus on. I will just glancingly mention Bouquet. I initially thought we'll have time for it. Then I realized we won't use it extensively, but I'll introduce you to it. Next, you see one more library in this list. It is called ManimGL. Now, some of you may be familiar with the videos called from the channel called three blue one brown you know explaining the mathematics i don't know if you have ever seen those very beautiful visualizations that explain math it was practically a revolution to make to in teaching of mathematics. When you teach anything for your series gradient descent this that right any basic thing. Any mathematical concept. Visit the 3 blue one brown channel, and you will see this beautiful evocative of videos, visualization videos right and i trust most of you are familiar with that if you are not acquaint yourself with that you love it the beauty of mathematics is visualization now the creators of three brown one three blue one brown they literally created a 3d uh I mean, a data visualization library based on OpenGL, right, which is called Manim, right? Manim is mathematical animation. If time permits, which likely it won't, but so I may make it some extra sessions later on, but if you're interested, if we get time, we'll do Manim and we'll create one of those reproduce one of those beautiful visualizations right so this is the scope of it today so well i would like to start with the importance of data visualization guys look at this a famous visualization a famous visualization. This some of you may be familiar with. It is a Florence Nightingale and the Two Roses. It has a tremendous historic significance. And I'll start with that because it is the history of data visualization. One can arguably say that the field of data visualization started with this amazing person, human being named florence nightingale so a little very quick bit of history and this is and i would like to end the theory with that and we'll go straight into labs florence nightingale was a historic figure of course many of you know her history but i'll recap as a young girl she had a unique passion whenever she would see things she would in a diary note it down how many she would quantify it in numbers and she used to carry a diary of numbers of facts as numbers right quantitative because she felt that objective facts are sort of precious and then as the story goes she one day was sitting on a bench in in one of she came from a fairly affluent very affluent family through one of the noble families and she was sitting in one of her manners the benches in the garden and she felt that manners, the benches in the garden. And she felt that she heard a calling from God in some sense, let's put it in modern language. She had a moment of epiphany, in which she felt that she has to dedicate her life to a purpose, but it wasn't very clear what purpose it was. And the she went around the world, she did not decided not to marry and do all sorts of things she went around the world searching for what that purpose was right and in the process she did amazing things she went there was a war in crimea is it crimea crimea please uh excuse my pronunciation, a land which is close to, well it is near Ukraine, or I think in Ukraine, the Crimean land, where the Russians were fighting the Brits and French. Right? And Crimea has been a battleground for generations. Even today, I think the latest news we hear is there's going to be a war over Ukraineraine right so that is crimea i think so um when she went there she observed interesting things she made a chart of why people are dying right and she found that a startling fact if you look at this visualization this blue shows how many people died in a given month. And this pink here shows how many people died from an actual battle wound, like a bullet or a knife, a bayonet or something like that. When you look at this thing, like let's look at any one of these plots, you would agree that it's rather startling. Soldiers tend not to die or people tend not to die from battle wounds in a battle. They tend to die from all sorts of other reasons. Isn't that remarkable? So she brought about the startling fact that the least likely cause of death in a battlefield is an actual battle wound. There are far more serious causes and those causes were hygiene because if you fell sick you would be put into hospitals in which the sanitary conditions were absolutely terrible. And so she said that the right way to save people is to create clean hospitals in which patients are cared for she was a lady of great compassion literally she was called the lady of the night because she would go late at night when everybody is asleep she would go from bed to bed with a lamp and attend to every single person who was sick and was mourning in pain right so a person of great compassion but this person of great compassion ended up founding a two entire fields at least of knowledge one is nursing the field of nursing started quite literally with this visualization because she took this visualization presented it to the emperor to the empress i believe a queen victoria at the time our queen elizabeth queen elizabeth i believe i may be wrong i'm getting the queens of england wrong at this moment but either elizabeth or victoria so um and convinced her about it she was very impressed and gave funding to create what is today, what would be called today the first modern hospital where nursing is at the center of care. Clean, hygienic environment, sterile environment and nursing is at the center of it. She's also in many, she's also the founder of data visualization there there is a magazine if you go to medium.com most of you have read articles on medium.com medium actually maintains an entire section a magazine on its website that is called nightingale and as you get into visualization and get interested in visualization i invite you to become regular visitors or regular readers of the nightingale become regular visitors or regular readers of the nightingale magazine online magazine on medium and there are many magazines and things dedicated to it obviously nightingale is is it's a such a great personality it's larger than life figure from what we know and remarkably both driven by compassion as well as a keen intellect. So what we will do as a goal for today, we will today, I will show you how. Now, sorry, where did I suddenly go? What happened? Visualization. I did something silly. Where am I? The course portal disappeared so give me a moment guys so today what we will do i talked about the grammar of graphics i thought about the fact that you could actually build build visualizations up systematically When you look at this visualization, and most of you have done some little plotting in Excel or Python and so forth, it may look very, very hard to be able to do this visualization, isn't it? Would you agree? Anybody feels it's very easy? No. Not many steps. It is very hard. It's a complex thing. And I have taken this as your first morning's goal. Today itself, you will learn systematically how to do visualization basics. We'll start with a bar chart. Right? And from there, we will end with with this this is actually a bar chart but it doesn't look like that and we will do that so our thing is when data scientists go to the bar let's go to the bar but before i before we go to the bar let's start with a few basics. All right. So we are here. I will start with one visualization just to convince you that visualization matters. So there was a great statistician, today we'll call data scientist, who was completely annoyed that people underestimated visualization and considered it eye candy. Visualization is an afterthought and math is more, statistical descriptions are more dirty and they're sufficient. People often talk about the sufficiency of statistical descriptions. And he wanted to illustrate the point that that is not true, right? So what he did is he hand created a data and the data is simple enough. So I didn't put it in a file, I represented it. So this is the X axis and we will have four data. Let me increase the font so you can all see the data. We have this data. Now this increase the font so you can all see the data. We have this data. Now this notebook, I'll just upload. You don't have to do it. The Y, for one dataset, Y1 is the Y axis, Y2, Y3, Y4. And in one last one, even the X axis has been changed. So there are basically four data frames right so four data sets look at the statistical description of the data we are going to and this is a little bit of a python code and you can see that summary there is a you take the data frame and you generate some statistical summary you even stick in a linear regression model i will illustrate that and let me do that look at these data sets guys these are the four uh one two three four four rows of the data i marked them in roman numerals in roman numerals one two four they all contain exactly 11 data points the mean of each of the data set is nine the mean of each of the data set is nine mean of x mean of y is 7.5 standard deviation is this along x and y correlations when you look at this and if you try to do a linear regression fit they will all fit this thing? Because this is the slope, 0.5, intercept is 3. What do you infer about this data? Would you say that looking at the statistical description, they're probably very similar datasets? Would you agree? Would you come to the conclusion or would you infer that they're possibly very very similar data sets or essentially the same data set maybe there are different data sets drawn from the same sample the same population they're samples from the same population isn't it you would say yes yeah now but then and here is the thing that the point you wanted to so let's visualize the data we we statistical descriptions lead us to infer that they are probably samples from the same population are very similar let's visualize it when we visualize this data and at this moment we will learn how to do this visualizations but i want to show you the result and now look at the four data sets do you see how completely different they are yes right and despite the statistical uh similarities in so many so many statistic uh statistical measures all agree with each other nonetheless these are entirely different data sets not only that if you look at the last data set you see something quite interesting y actually has no relationship to x x is fixed x is eight all over. Except because you have this outlier point, it has skewed the linear regression line and make it look like the others. It is the influence of the outliers, how strongly outliers influence you. So what happens is when you make inferential models, when you do things, you do not know whether you're being misled or hijacked by some outliers or points of high leverage and things like that especially with linear models right when you do linear regression models it is therefore essential to visualize right so visualization is a necessary thing it's not an afterthought it is not eye candy and the point that he made. There is another lovely dataset. So really, when we visualize, what would visualizations have said? If we make a histogram, do you notice that all the histograms, X, Y, the first column, left column is all the Xs, and the Y column are all the Ys. If you just look, I will just decrease the font a little bit so we can present all of them in some. Do you realize if you look at the left column and y column, just looking, I mean, each row, if you look at it, you would agree that the data sets look different. Isn't it? Each row is one data set and the data datasets do look different in the histogram. So this illustrates how a simple visualization can disillusion you from false beliefs. There is another lovely example which I like, which is more recent. We'll take this example of 13 datasets. This dataset is the, and by the way, you guys will of course get this notebook so you can play with it. Of the 13 dataset, they have been given some names, but ignore the names. I will now increase the font again. We will just visualize the first dataset. So when you look at this dataset, once again, I will let visualize the first data set. So when you look at this data sets, once again, I will let you absorb the statistical qualities or the statistical descriptions of the data or measures. Would you agree that all of them look more or less the same? This would again lead you to believe that these are samples drawn from the same population quite likely. Would you agree, guys? So obviously, by now you're primed to the thought that this looks fishy, you shouldn't trust it. And let's see what happens. We have visualized here the very first dataset. What does it look like? The first dataset looks like a dino, right? Your little T-Rex with small hands. However, when you move forward and you visualize the rest of the dataset, do you notice that they don't look like the dino at all? They look entirely different right i hope we have made a strong case and we can rest our case now that data visualization matters it's important it is not an afterthought right in understanding data so there are a few references in this notebook uh will be online in a moment so with that thing any any questions, guys, before we move forward? Now comes the do part. We will all do things together. I would assume the silence means no thoughts. So now, guys, get ready. Get your Jupyter notebooks up. We are going to start. We are data scientists will go to the bar and let's see what happens we will start with the first jupiter notebook and i want you to repeat after me create a notebook in which you put these lines you put these lines. Create two cells and in those two cells, the first is make sure that you put this there. I hope you have run the visualization installed. That's important. If you haven't, you must do that. Otherwise, none of it will work let's start by typing this much in this is this is essentially the no-brainer in the world of visualization this will become a ritual you'll always be doing this now this is my stuff right it will just prettify or not uglify your Jupiter notebook based your opinion. I'm not a great CSS artist, but what it will do is it'll make your page look like this, the first one. But the second one is important. Please do this. I will give you guys 10 seconds more for this. In the meanwhile, i'll keep exploring see matplotlib is the main library if you want to import it you say mpl now what happens is matplotlib is a low level library and it has all the geometric primitives right plotting primitives usually though what happens is you don't need to use MPL. People have created a scripting layer on top. The scripting layer on top is the pie plot. And the pie plot gives you a lot of convenience functions and primitives or things to manipulate or create your graph. And so in this workshop, the only reason I mentioned this, this first line, which you'll sparingly use, is that there is a lot of power in Matplotlib that you can access by going to the underlying MPL, Matplotlib itself, rather than staying at the scripting layer. Now, the architecture of Matplotlib is it thinks of everything as an artist right at the matplotlib layer and the primitive layer they are artists there is a bar if you want to make a bar plot each bar there is a it's an artist element it has to be a created or painted by that right so there is a thinking in terms of artists and components at that layer. At the level of PyPlots, we will think a little bit at a slightly higher level of abstraction and move forward. NumPy, as I said, it's based on NumPy. It's a good idea to impute it. Pandas, we talked about it. Now we will add this line, inline, matplotlib inline. This is, of course, a magic command. When you do inline, it means you don't have to keep saying plot.show. The plots will show here, not in a separate window. The other possibilities are we could do matplotlib notebook, in which case, as you type the code each cell at a time, the same visualization will keep changing. I encourage you to try the notebook option because you write code and it changes you write some more code and the same visualization changes interactively you can build it or you could just say i on interactive on any plot and you can get into that mode so we will look at data we need some simple data to work with. So I have created this data. Simplified data, which I will show in a moment. So guys, are we done with this? Can I move forward? If anybody wants to wait, let me know. We'll move forward with this. Now I want you to go load this data. This one will take a little bit of a getting making sure you don't have typos so i'll increase the font size yes i'm going to paste this part into the zoom chat very good suggestion where is my zoom chat here it is okay data visualization with python i'm pasting this please copy it into a cell and run it when you run it and here most of you know is there anyone who has not worked with pandas at all please speak up all of you have worked which is amazing so we can move fast so this is a pandas data frame we are just just looking at the data this data has only six rows which are the six uh united nations regions of the world africa america's mediterranean europe southeast asia uh uh uh as if i think that in chat i didn't get the url whatever you pasted look into the data visualization with python channel i think it was posted in slack and not on zoom oh my goodness did i did i post it in the wrong channel maybe sorry i apologize i we ended up creating i created a channel and kyle created a channel so now there are two channels let me get rid of the channel created i apologize leave oh is there a way to delete no okay did you guys get that now go to bz 100 data visualization So are you putting on Skype chat or in some other channel? Skype? No, no, there is no Skype. There's Slack. Okay. Oh, Slack. Okay. Please visit the Slack channel. Did you read the email we sent yesterday about... Yeah. Did you read the email we sent yesterday about? Yeah, when we click on the Slack channel link, it is giving a 404 error. It's because you haven't accepted the invite, perhaps. Oh. I'm on the Slack channel. So join the channel called VZ100 Data Visualization. Okay, guys, let me show it to you. No, it says not found edit. Okay guys, so in that case, I will ask, let's pause the recording oh In the morning, we saw that we could take a very simple concept like a bar chart, and we went through a systematic journey of improving that bar chart. And finally, we ended up with a fairly complex visualization, the landmark visualization of Florence Nightingale, the two roses visualization. Now we are going to do the same thing today afternoon using different libraries. We'll use Plotly, we'll use Altair, we'll use Seaborn. These are worth seeing how we can do the same thing in different libraries. We can move faster perhaps because today afternoon, we want to do bar chart and line chart, are pretty much all one dimensional or two dimensional data, the basics we want to finish off today. So in order to do that, we'll have to move a little bit faster in the afternoon. I'm going to show you the same thing using Plotly. Plotly, as I mentioned, is a library based on, are you guys seeing my screen? Yes. Yes. No. Right. Are you able to see the code? Yes. Yes. So, Plotly is based on D3. What it means is it will be interactive from the ground up so the same code the only extra thing we added is plotly express do you notice that we have a one more import here of the plotly library so plotly has two layers one is the express layer which makes things convenient and then there is the main plot p which has a lot more functionality very much like matplotlib there is five plot scripting layer and then there's matplotlib so the same thing we will go through we will load the data and we will do this px dot bar do you notice that off the bat i mean just this out of the gate the plot looks better than what we had in matplotlib raw guys i'm getting echoes so if you could please mute yourself unless you are speaking so one of the first things you notice is that it has automatically put the axis at an angle, oh sorry, X sticks at an angle so that it doesn't occupy too much space. It's interactive. You can see tool tips. You can zoom in, right? You can pan, you could do things like, for example, you could move it around and so on and so forth. You could then reset it. So I'll leave it out to you to play with this. But I want you guys to at least get started. So could you please do this part? Import Plotly Express the way it is given here. And from here onwards do this part px dot bar now you notice that this code is no different except that you have given the data as an argument could you show all the way up the very first export Plotly Express as BX? Say that again? It's the same thing, I think. It's the same dataset? Oh, yes, exactly the same dataset. Exactly the same dataset, guys. So just copy over that notebook into a new copy. We are going to redo the same thing, exactly the same data set guys so just copy over that notebook into a new copy and we are going to redo the same thing exactly the same thing using plotly i wish this is the only new line here right this line plotly express are we all there together guys Artly Express. Are we all there together, guys? Then one easy way is to copy the previous notebook and we have then when you do this bar, you get a bar chart, which, as I said, is a little bit better out of the box. So guys, if you want to be like, if you don't have the time to build up a complex visualization, it might be worth it to start with things that are D3 based because you get to results sooner. Can I move forward, guys? Do I need to wait for somebody? Yeah, just go back again. OK, here we go. Exactly the same. There's only one new line this line import plotly.express as px right and then px.bar And then px.bar. Albert, are you there? Let me know when you're done. Everybody online, are you guys done? Anybody, am I waiting on? No. Okay. So I'll move that. So first thing you notice is straightforward code is just a little neater than matplotlib by default you can add a dash of color so suppose you want to color by confirmed right how many cases confirmed are there let's do that suppose i do this and you'll see. Oh, region and color confirmed. So it basically color codes by how bad it is. Right? Color by actual value. Blue is low. Yellow is bad. It's another way to send a signal. Now, suppose you want to rotate by X. By the way, can you guess what would happen if I change this color to region? So suppose I say region. Can you guess what would happen? See, now the color is based on region. See, each of the bars has a different color. Right? Maybe I should just copy this. Let me do this is by. So it shows you how to do it with category features versus how to do it with numerical features like this value confirmed is a number, whereas region is a set of values and regions of the world. So this is it, it's as simple simple as that now let's rotate the x tick axis a little bit uh suppose you don't like it that it is in this direction you want to turn it the other way around now it is the other way around so this is how you rotate the and this is the thing the syntax syntax of Plotly uses update x axis. Have we all reached this level guys okay i'll move forward if if you haven't then stop so let's let's try out the horizontal format how do i make it horizontal i just change the x and y the only change is do you see orientation horizontal if you see orientation horizontal? If you say orientation horizontal, can you change the x and y? I'll moving forward. If anybody wants me to wait, let me know. Now, the next thing we want to do is sort by size. Right? Remember, so once again, I would suggest that take the data and sort it in the data frame itself. Don't make the plotly do it. And so no change, the same code, except that you have to pre-sorted it. Exactly the way we did it in matplotlib. When you do it, you get a plot that looks like this. So far so good guys. It's like- Can you wait here? We just need to type the data.sort value. Sure. The code, I'm posting it in Slack. Oh, thank you. Yeah, good. Thank you. yeah good thank you and now suppose you feel like resizing the graph you know the same thing as we did in matplotlib here you can give the differences you can give the height and width as arguments to our function itself so when when I do that, it becomes, notice the highlighting that I have given here, width and height. And I could do a bit more. For example, I could say 1000. Now it looks like this. Closer to the golden ratio, I suppose. I asked you if I like 5 min late. I missed the first assignment for the Px. here guys and review from the top sorry about that no problem see we have imported so just like the previous notebook make a copy of the previous notebook and then in the imports you add one sentence this one okay plotly express has px okay right and then what you do is the rest of the thing remains the same here px dot bar right instead of data dot plot dot bar you do px dot bar okay right when you do that you get the graph which is highly interactive you see tool tips you see you can zoom in you can move around you can play with it right you get all these controls to zoom. You can pick regions and zoom into it. So in other words, you get a lot more for the same line of code. You notice that the axis are already bent. I mean, the tick marks are already at an angle. So do not waste space. So Plotly actually does a lot of this for you automatically if you want to add a dash of color you can color the these bars by region you just add color by region to that line of code it becomes colored if you want to color it by how intense, how many cases there are, you say color is equal to confirmed, then it becomes yellow if there are lots of cases there, like America's looks pretty bad here. Thank you, Asif. Yeah, sure, sure. So Gopal, let me know when you have caught up. Yeah, okay, okay. Go ahead, I think I'll catch up as you go. So, Gopal, let me know when you have caught up. Yeah, okay. Okay. Go on. I think I'll catch up as you go. Now, suppose you want to rotate the axis. You do the update x-axis. So, this is the way. Now, what about the horizontal format? All you have to do is interchange the x, y, and let it know that you are trying the horizontal format. It will remember it. It will know that you are trying the horizontal format. It will remember it. It will know that you're trying to do that. So you get this graph. Guys, are we all here? Can I move forward from here? Yeah, the next thing was we sorted it. How do we sort? No different from a matplotlib. You sort it before you give it to the plotting library. It is always easier to sort in pandas than to do it here. So we give this. And the same thing, all we have done is passed and sorted data. So it looks like this. If you want to resize the graph it's a little easier the px bar what you do is you give the height and width right here you know and height right everything else remains the same now the graph looks a little bigger. So far so good, guys. Yeah. Gopal, have you like caught up? Just do the recent ones, ignore the previous ones. would you would you like me to wait till you type this in okay take your time yeah i have to import all that stuff uh like a few more lines to type in oh you can give her the give him the import, sorry. Okay, then this is missing a title here. So we'll add the title also. Again, not very difficult, the same line of code, one extra argument. Do you notice that only one little thing has been added? Title. And it produces a graph now with title. Where's the title? Right up at the top. So I'll pause here for those of you who have have caught up. Anybody else who is a little bit behind? And Harini has posted the code. If you're behind, then you should paste it, copy copy paste it otherwise type it in because you'll develop muscle memory if you type it in so it does look prettier, isn't it guys? Just out of the box it looks prettier. Now this title, it is left-aligned. We can play around with the position of the title. We can say, for example, the same title. And this is something. Now you begin to see the D3 underpinnings. D3, everything is JSON based. So, and those of you who are familiar with JSON will realize that this from here to here is a JSON syntax. Do you see that guys what i'm highlighting is json syntax key value with a colon right so what we are saying is let's look at this title here we are not happy with the default location and so on and so forth so we want to play around with it so what you can do is you can create a title json object where you give the text X anchor, you say center, Y anchor, you say bottom. Means bring it here. Then a little bit of orientation and padding. And then everything remains the same as your previous code. But notice this last line of code what are we doing we are updating the layout we are saying change the title to this title json object so something very interesting you could have given the title as just a string or you give it as a json object very much like d3 lineage right d3 visualization library uh when you become familiar, you say, well, we are not going to cover that here. But if you were, this is how it is. Everything JavaScript world is all JSON. What were you saying again? Sorry, lost you there. I'm saying that if you look at title, it is a JSON object. How did you position the center that takes? that if you look at title, it is a JSON object. How did you position the center of the text? Yeah. So you just say X anchor center, Y anchor. Y means where should I place it? X anchor, Y anchor, right? And so when I run it, do you notice what happened? Let me decrease the font size here. Do you notice that the title has moved to the bottom? Why did it move to the bottom? Because the Y anchor says bottom. X anchor says center, means X position is the center of the plot. 0.5 means what? Just a little bit extra to the heart moving it a little bit around yes things like that zero yeah so this is it and so what you do is to make this thing apply and you can do it to any element very much like the d3 language the range of x and y how can we know that it is in a small decimal or oh no no no it is not the range it is the it is not the data coordinates it is the paper or the screen coordinates just shifting it a little bit okay i'll just show you what happens let's see suppose i make y is equal to two right let's see what happens oh actually it has to go from zero to one so suppose i make it y is equal to one right oh where is it it is up here you can't see it but it is like hiding up here most of it has gotten truncated because zero is the bottom, y is the top. These two statements are now contradicting, y anchor and so forth are contradicting. When I make it zero again, it comes back to the bottom. X at the center is like this. Now, suppose I remove these two things. Let me just remove these two and then do this, right? Do you realize that it, what is happening to this? It just starts from the left and just goes as long as it can. Right, and do you notice that it is touching the very, very bottom, it's just not properly anchored. It should be anchored a little bit upright, properly anchored. And I don't know how to say it. Look at this thing, the title. Do you see the text is being truncated? G is missing. Look at the bottom of the G. So that is where you need to anchor it properly. And when you anchor it properly and then oh no again it is doing that sorry i i need to fix this and guys i'll fix it and i'll tell you what is wrong x is y is equal to uh 0.1 let's say well it's too much 0.02 that's a tiny amount we put okay now it's too much, 0.02. That's a tiny amount. We put, okay, now it's better. All the Gs are coming in place, right? So these are the things, guys, you have to play with it. When you plot aesthetics, you spend quite some time tweaking the little bits of aesthetics. Well, so far so good, but what about my latex and production quality code uh well we'll try that so everything remains the same the sorting the uh remains the same there's that but what am i doing do you notice that i have started adding latex syntax by the way if you don't know latex then don't don't LaTeX is a language for writing research papers, especially in the mathematical, physical sciences and engineering. What it says is this is make it bold. This thing should be bold. And there is a little bit of LaTeX. So this part, guys, I will just give it to you on the slack because it will be unless you're familiar with making this will feel terrible to type in it will look very strange so i'm just pasting it here the whole code okay so pick up the code from there most of the code is the same a text bf means make it bold small means use small fonts and so forth let's run it so what do you notice i asked the x-axis label y-axis label and the title to be in that latex font and they are in latex do you see this guys Do you see this guys? They are in LaTeX font and adding the like once again, adding the values to the bar. Let's go and remember that on the bar we wanted to put values. So what do we do to put values on the bar? It turns out that to put values on the bar, it's a lot easier. Here, you can say text position outside. This one line will do the job and you can expand because remember this 1.1 factor to increase the x-axis? We did before did that but the only crucial line that we add is this line guys and this line update traces so harney could you please paste that line or you know what because broadly we need to move a little faster i'll give you the i'll paste the whole code try to put it in a cell and run it. And but understand that all I did was this one line. Right? Update traces. Now, these things have showed up, these numbers have showed up and of course you could have formatted that numbers using the same locale and other things here i forgot to do that so the numbers come from that outside yes do you see these numbers here those are the actual confirmed cases, actual COVID cases. Trace, update trace. So the only change I made to the entire visualization was one line. Now, if you want to go minimalistic, just like we did in matplotlib, what do you do? You keep the whole code the same, but you add this. What am I doing? The XY axis labels are fine. Plot background white, show legends false. And this part, this is the part that basically goes and disables lots of things. Tick marks, this, that, completely goes and disables them. And once again, guys, you know, you won't remember all this. But the way to do, the way to learn visualization when you encounter a new library like this is you understand while I'm explaining, make sure you understand, but you'll forget. But you keep this notebook with you and you try to alter it. You take this example and you play around with it and you adapt it to your data set. Gradually, you will begin to remember things. All these libraries have different syntax, different parameters, different this or that. So it takes a while. You can't memorize all this, you just have to look it up as needed. And it is useful to have good examples nearby. Right. So keep this Jupyter notebooks with you, because you'll actually use it in your workplace quite a lot. Right. So now what has happened, do you notice that this is the, this is the minimalist version of it. So far so good, guys? Yeah. So I'll give you the extra bit of code that I added is here now. At the very bottom, you're going to add this extra bit of code that basically goes and disables all sorts of things. So I've already given. I'm sorry, do you say that again? How did you say that again? It was already given. Oh, it was already given. Okay, wonderful. So then how do you do multibars? Very simple, very much like matplotlib. You just change it into an array and then it'll become multibar, just like that, no changes needed, right? And stackbar, how do I stack it? Bar mode is equal to stack, this one line. Let me just show that. Bar mode is equal to stack will cause it to get stacked all right guys and then how do you do proportional bar chart once again you have to create your proportional data there's no shortcut to it that's the best way to do it. And once you have created the proportional data, now comes how would you add it? So sorting, etc. You say bar mode stack. You remember that proportional is nothing but stack bar adding up to one. Right. So you do that. Again, no surprises at this moment. Right. We are not doing the magic was an upside. The magic was not in this code uh it was in the it wasn't creating this proportional data and then it begins to look like this but the advantage is that you see that these are highly interactive plots you can zoom in you can pan you can do that. So one of the questions that you may ponder is, why don't we use it all the time by default? These are new libraries. People don't often mention it. I would strongly suggest use what is powerful for each case. And Matplotlib is very good if you can build it up layer by layer to the top. But if you want to quickly get some common cases done then plotly and all these libraries are very good well how do we make the polar chart remember at the end of it we wanted to make the polar chart uh there the code remains almost identical to matplotlib except for almost identical to matplotlib except for this part the main polar part they actually have something called bar polar right the rest of it is exactly from matplotlib the same code i've copied here one difference while matplotlib looked at angle in radians, 0 to 2 pi, Plotly looks at angles in 0 to 360. So what we have to do is we have to convert radians to degrees. That is one big change you have to do. Other than that, this part is new. Go figure. So go is the underlying library of plotly. Then you are making a bar polar chart. You have to give the radius. You have to give the theta if you think about it for each sector. You have to specify what is the width of all of them this part i found repetitive that you had to do it like this with with with right then you give a color scheme i just took a color scheme from non-color scheme mark line width to opacity the rest of it is standard. Then a tick marks. This is plot list. I won't spend more time because it can take us a lot of time, but just to give you a sense that it's a bar plot is quite different from matplotlib. Though they take the same arguments, theta, radius, et cetera, et cetera. The API is slightly distinct. It uses radius. So this. And you have to become familiar. You have to look at the documentation and make yourself familiar with it. But once you do that, let's run this. You will get a plot that looks like that. Frankly, I was not so happy with it. I preferred matplotlib because I had far more control and we could make a pretty plot, prettier plot. And this is the trade off guys. When you want to do simple things quickly, all of these other libraries, they get you there faster. But the moment you want to do something very specific, very custom and complex, then you have to get down to the basic and the effort needed by each of the libraries whether you're using matplotlib or plotly or something else the effort becomes almost the same right you don't get that much difference in using one or the other so this is another library another thing we i'll post to the website the whole notebook uh play with this notebook i i how many of you have managed to not forget the polar how many of you have managed to come this far i am done with that thing you did it very good and this one i hope all of you reached the stack chart or at least the basic one multi-bar and anything is there anyone who has not reached this far we have all reached this okay so this is it guys and plotly so what's the lesson to learn raised this okay so this is it guys and plotly so what's the lesson to learn for creating simple visualizations plotly gives you more with fewer lines of code you you get out of the box prettier plots when it gets complex well then all bets are off right then you have to work hard there is no free lunch. Likewise, there is another library, and I'll move fast enough, Seaborn. Seaborn is based on Matplotlib, so not interactive. So what you do with Seaborn is, and I'll just do it again here. What is the import you have to add? This is the import that you will have to add. Import C1. That's it. And now let's do that. How would you make a bar chart? The same code. Bar is this line of code. Let me keep running it from the beginning. When you look at this, you look at this, what's wrong with this plot? Can somebody tell me? Anybody feels it looks ugly? Yeah. The whole premise was that it gives you prettier or much more professional plots out of the box. But in this case, it doesn't seem to be doing that job very well. Also, there is clutter that comes out here at the top. So we will now systematically improve it. What if you do tight layout? Not much. Y-axis is still terrible. It is in scientific notation. Let's first fix this clutter at the bottom, the X-ticks. How do we do the X-ticks? Once again, the rotation. All you have to do is rotate it. So this is one line of code you need to rotate it. Plot X-ticks. So this is, you realize that this is standard matplotlib syntax. So to the extent that Seaborn is built on matplotlib, you can any moment revert to matplotlib under the cover. How would you format the y-axis? These numbers, same thing. So other than this line, you're using everything else from matplotlib. The everything else from matplotlib. The same code from matplotlib continues. This is the thing. Horizontal format. Once again, all you do is rotate the axis. X and Y, if you interchange, it will go into the horizontal format. There you go. and then sorting once again you have to sort the data on your own and then do this how would you change the size nothing to do with mat seaborn the same mat plot lib code is the way to change the size adding the labels once again when you add the labels. Once again, when you add the labels, you're not doing anything. So, so the only Seaborn line of code is this, sns.barplot. Everything else is the standard matplotlib. And setting the title is also the same, nothing new, right? Now, when we style the figure once again except for the bar plot everything else remains the same as matplotlib so i will go a little bit faster on this this right it goes like that later quality you want to make it later quality once again very straightforward. It will come through in a little bit. Yeah, there it is. Now, remember the DPI I've set to 72. What would happen if I set the dpi to one. R. Vijay Mohanaraman, Ph.D.: 44. R. Vijay Mohanaraman, Ph.D.: High. R. Vijay Mohanaraman, Ph.D.: High resolution see. R. Vijay Mohanaraman, Ph.D.: The picture that you use other fonts get a little bit crisper you can see it if you open the image in a new tab where is it gone uh here right because now you can render it to a slightly it is it is taking a little more pains to fill it in so those are minor tricks'll learn when you're trying to create production quality code. Adding the values to the bar, that part is interesting. For that part, nothing changes. It remains the same. Right? So I was just gonna ask you, So now compare this plot to the original plot guys. I hope you'll agree that even in matplotlib systematic I mean in CBON, following a systematic process leads to a much better plot, right? And CBON ultimately didn't give you too much value because most of the code was from matplotlib, except for that, it started out better. It just started out more colorful and better in the beginning, right? So that is seaborn and then of course to do the minimal approach once again it is all the same matplotlib code nothing new yeah this is it it turns out that when you want to do multi-bar it gets more complicated unless you know no pand, I won't explain this to you. Suffice it to say that you need to represent data in this strange format in which there's a region confirmed. It is called melting of data, changing from wide to narrow format. I won't explain that unless you're very familiar with data transformations. But that's where the limitations begin to show up. Over, this is where instead of being easier than matplotlib, it actually became harder than matplotlib. And when you do that, you will get a visualization in a little bit. Where is it? Multibar. We are waiting for them to show up. Okay. Yeah, there it is. Is the multibar. Now it gets. So this is the trade offoff, guys. Something starts out. It is supposed to be making it easier than matplotlib, but not always. You have to play with it. You have to play with this library all over again and make things work. So I won't go more into it. Suffice it to say that this can do that. The code for proportional bar remains exactly the same, just as you had to do it outside in the data frame level itself. Same thing you have to do here also. And you will get a proportional chart. A polar chart, by the time you reach polar chart, you realize it's very specialized. And in Seabourn, you begin to get stuck. It's very hard. Actually, I gave up after some time. Obviously, I'm not an expert of Seabourn. And see, the premise of Seabourn was that most data scientists work with pandas. Seabourn works closely with pandas. The part that is true is yes, it does. It is true that for simple visualizations, Seaborn is faster, quicker. But the downside is that it is not an extensive library like Matplotlib. After a little while, you can see it has run out of steam. Or maybe that's my opinion because I don't understand Seaborn all that well, but that is where I would leave it. Now, so all of these libraries, of course, I'll immediately give it to you. Let's see it in the last library, Altair. Altair is a library that also is based upon D3 visualizations. So what is the extra import here? Altair. Import Altair as alt. Once you do that, then here's the bar chart. You notice that this comes out like this. Now, in this Altair, the syntax is a little closer to something called VegaLite. VegaLite is a pure, well, it's a layer over D3 to make it easy. I would, I strongly suggest you spend time picking up Plotly, Matplotlib, and Altair. Altair, for example, here, the way to understand syntax is it follows the grammar of graphics very strictly. See, you're creating a chart from this data. And your aesthetics, the representation will be bar chart. Mark bar. The way to understand this language is, okay, create a chart with this data of type bar, and then here's the encoding. You need to know in the bar chart what the x and y-axis are. So x is the region, or y is confirmed. Very much similar. Except that what in the world is this colon n colon q? n is for categorical variables. It's a nominal. They call it nominal. In our data science language, we'll call it categorical variables. It's a nominal. They call it nominal. In our data science language, we'll call it categorical. In other words, something that is not of magnitude, something that is like cats, dogs, horses type. In this case, the region. Is it America? Is it Europe? And so forth. Q stands for quantitative. So that's what you have. Now you notice that to write this code, you had to write more code. You had to write a little more code. But then the yes, the simpler things takes a little more code. But actually the complex things become relatively straightforward. That's the point. so here the encoding is explained the what you need you need x y you need to mark the color sizes rows you need to give tool tips and what are the data types you have q o n d the most common ones we use are q o n common ones we use are q o n and for like in terms of categories categorical ordinal like for example in the auto data set you remember the horsepower two horsepower i mean sorry cylinders two cylinder four cylinder six cylinder eight cylinder now these are all different type different in a way it spans a region in between numerical and categorical isn't it because you know that engines don't come with three and a half cylinders they only come like that right so it's ordinal there is a discrete order there so those are the three types that you have now let's look at the basic chart. Straightforward, but it took a little bit more effort to do it. But here is the part that begins to get beautiful after that. So to make it horizontal, you just interchange x and y. You notice that the font size of confirm, the labels are already bold and it looks pretty nice. Now let's go and prettify this sort. Now remember that for matplotlib, Plotly, Seaborn, you had to sort the data in the data frame itself and give it. But Altair gives it out of the box. All you have to say is, instead of saying x, you just say minus x, sort by ascending or descending. Sort the y values, the y labels, by ascending or descending. That's all you do. And when you do so, guys, this one, yeah, you can i'm obviously i don't expect you to keep up with it at this fast pace i just want to show this to you because we are a little bit running low on time but all of these notebooks guys please do study it carefully through the week and uh one more thing remember every single day we are giving help hours in the evening. Come to the help hours. Any bit of code is not clear in the notebooks. Come to the help hours. We'll explain it to you. And all of these notebooks will be reviewed by our teaching faculty at a slightly slower pace for you. So if you miss something, are confused confused please do come to our clinic hours throughout the week yes go ahead so we use a tool called data dog and it looks like they probably use some data science to do some of the graphics almost all of them are d3 based do some of your graphics almost all of them are d3 based they look i mean the more i look at this and that they use all these libraries yes yes so how do i now that we have sorted it how do i the sorting is done how do i resize the graph what is the extra point I bring in? This one. Do you see that dot properties with actually 12,000 looks better. Let's try. Oh, 800, only 800. Oh boy. This doesn't look like the golden ratio. We may change it. Let's see. Oh no, it came out pretty good. Okay. So we resized. So size are properties of the aesthetic. So we said bar chart and code it with data like this. And these are the properties. And you can give lots and lots of properties. Right. How do I set a title to this? Very simple. Title is another property of a graph. Right. And when you look at this, you begin to like those of you who are familiar with VegaLite, I don't assume many of you are because it's a whole world of visualization out there in JavaScript. This is a syntax coming more or less from Vega, right? And D3. Now, how do you customize the X and Y axis? So you see these labels. Let's go customize the labels. How would I do that? So what happens is that you can actually change the labels. At this moment, what are the labels? It is just the name of the feature, isn't it confirmed and region in the data in the data frame but you can get that by using this syntax no not here customize the x label then you have to say x is not just equal to confirm colon q but you have to say access And this access language comes or is inspired by Matplotlib's thinking of access as any object that is there in the plot. But I wouldn't set it like that. You say alt access title is this. This syntax, I'll let you absorb it for a moment. It's an odd way, it's not as intuitive as, let's say matplotlib was, where you just said plot.xlabel is, and you gave it a label. It's a little more complicated here. So one has to get used to this idiosyncratic way of setting the x-axis title and the y-axis labels. That was one part I felt was, in my opinion, was unnecessary. It could have been simpler. Isn't it? Everything else looks neat till you hit this peculiar bit. So what happens is that now X, alt X, alt is Altair, X means it's a function that to which you can give specific properties, specific inputs. Likewise for Y. And so this is the part I felt perhaps could be simplified, but it is what it is in this library. The rest of it is straightforward properties is nice. It's giving you key value pairs. Now adding explicit value to the bar. Remember you have to put values to the bar. Where is it? How do we put bar? You have to again, create a text entity just as we did for other libraries, but it's easier, actually, because all you're seeing is baseline, a line left, this, that, weight, Salman. And let's run it and see what it does. It turns out nothing got rendered. We created a bar chart. We created a text. But when you put the two together, nothing comes up. Why? Because Altair is willing to render We created a text, but when you put the two together, nothing comes up. Why? Because Altair is willing to render only one plot. So you need to add these two up, right? To create a compound plot. And that is one missing. By the way, this is a very common mistake people make in Altair. They say, you know, just now this was working, you know, this part was working. And now suddenly, when I put these two together, they're not working. The answer to that is, you do this parts, two parts, but then you have to do this. You have to, you don't need to even give the properties, but it is a good idea to, you have to do bar plus text. You see that? You have to say that explicitly. Then when you do that, you will get this. Do you see the numbers on them? It will come. I'll let you improve this. For example, this scope for improvement, It will come. I'll let you improve this. For example, this scope for improvement, this x-axis should have gone far enough so that this number felt it was inside it. So you should increase the x limit. I'll leave that as exercise for you. How do we do multibars in Altair? Well, you have to repeatedly create different bars and at the end of it, add up the two. Again create a compound chart. Confirm plus death is this. Let's try this. When you do that oh where am i yeah so you get this compound graph like this and could we get that in the text in the slack test the all of it you know notebook what happened is i'm going to just give it give it as is actually harney let's do one thing let's let's post the notebook for everyone to take in right away the whole notebook maybe harney has stepped out kate could you please help me with that Maybe Harini has stepped up. Kate, could you please help me with that? Let's put the whole notebook on the Slack. This is the bar plot Altair. Anyway, I'll put it in a moment. Let me just finish it. This one, I don't expect you to code as we go along because two reasons. The syntax is slightly different. It's very D3 like. It takes a little while to become familiar with it. But one easy way of learning a library is to do something you have already done in a language that you are familiar with. You just became familiar with doing this in Matplotlib. And so we are repeating it in Altair. So all you're doing is you're seeing the code, how it does it for that. So to create a stack chart, the magic word you have to use is transform fold. You're folding on these things. So little gets more complex and I won't explain these things too much. Suffice it to say that, see these plots look pretty. They are certainly good looking plots and you see that right here. And the interesting thing with Altair is you want to go and see this Vega's source. Ultimately, Vega is nothing but a JSON file, the Vega code. Where am I? Why is it not magnifying? Okay, I wanted to increase the font size. It's not letting me do that. And you can open it up in Vega editor. Vega is a visualization framework. Okay, here we go. Right. So, in the world of visualization, D3 and Vega, etc. are very dominant. We don't, as data scientists, we don't, we feel differently because we want to stay close to the machine learning which means python but if you put in a little bit of effort you will become very familiar with the syntax of vega and if you look carefully it is nothing but json right six regions this is the data set does the data set make sense given region region Africa confirmed death, recovered, active are these. Yeah. Then what is the actual UI code? If you look at your code, see the complicated code that we wrote here. Let's look at this. Properties is this. Let's try to match it in the Vega. Properties, color count, where is the, yeah, height. Do you see in the properties, you see height, width. Are you seeing it? And title, these were the three properties, guys, right? Then we did transform, fold, here it is. Transform, and it has a fold as, fold as this. So all Altair is doing is, transform and it has a fold as this. All Altair is doing is it is giving you a Pythonic API over the Vega-Lite JSON data format, representation format, which is good because then you stay in the world of your Python, which most data scientists do, and they don't have to worry about it. And you can just run it here. Let's say that you run it here. You see your visualization come. And sometimes what happens, right, it helps to just, if you become good with the Vega, you can go and edit it here. Right? For example, I don't like the title case by this is. Suppose I change the word. Right. And you run it. So then you see it happen. You see it change very much like in the notebook. But if you get used to visualization you might you might find it easier and this thing gives you the data it's pretty these things are pretty powerful in the visualization world it is good to become familiar with that also right as you do it so data is in json yes and you can connect with them so this is very useful for data that you get yeah so let me give you an example suppose you write your pandas code you generated this vega light guess what you can do you can put this thing into your web page isn't it healthcare solutions so this would be awesome using size and dashboard and all this crazy stupid stuff yes it's a mess it's a mess after a little while once you get used to all these libraries you will find that those gui tools that help you drag and drop and do things they come in the way they help you make the easy stuff but after a little while they they really become annoying okay so visualization is best done it's just like that you know people who are into art they want to work with photoshop and illustrator they don't want some website which where you drag and drop and things happen to your photograph remember this quick things click click click because the easy stuff is easier there but you can't go beyond the you you get boxed in right so worth doing it in code properly right so i won't get through more of that how would you add tool tips same thing Now you have added custom tooltips. Where is the tooltip part? Literally this, right? One liner will add tooltips to you. Then you can do group multi-chart and we won't get, yeah. So one nice thing with Altair was, what I liked is, do you notice that when you do grouped, what is the extra thing we did here? Let was what i liked is do you notice that when you do grouped what is the extra thing we did here let's find out what did we do extra i'll remember where we did the change mark bar encoding title as color tooltip row row yeah this is it you break just this one little line helps you generate what it is saying is that divide the data into different rows one row per region is it one row per region guys here look here yeah one row per region and it is divided up like that and so you end up creating very powerful graphs with one liners. Anyway, what I'm trying to illustrate is this, that stick to a language, to a grammar. If you think like that, that it's a constructive process, you can create very complex visualizations and especially Matplotlib predates grammar of graphics, but you can take that approach to building the visualization the way we did. We reached a Florence writing else, two roses, just by following the systematic process, right? But libraries like Altair and Plotly, which are based on D3, it is much easier to follow the grammar of graphics because D3 is literally grammar of graphics at large. So that's that. Proportional bar, there's nothing new here. You have to do it the hard way, the way we did it. You know, you have to create your Pandas data frame in which you have those properties. And there is nothing new here, absolutely nothing new. It's the same old code because the work had to be done. What just happened? I think it's the same old code because the work had to be done. What just happened? The work had to be done in. Pandas, so when you do it, you'll get this. I like the look of it, actually, Altair. I like the fonts are usually very clean. You notice that it has clean fonts and the text X, text, a clean. Right. So that is that say this proportional thing you wanted to see the actual numbers let's see so at this moment it is a stool tip but if you want to add it so here's the thing guys in each of these plots using other libraries right i've deliberately left things incomplete right so you know that I showed you that you can, you have a text element, right? Yeah, here. So where did we go? The text element is here. Look at this. So what do you need to do? You need to take this, copy paste it there and adapt it. Isn't it? So I take that as a homework homework like have fun with it i use these visualizations as starting points to further build upon it and do your own stuff so that is that proportional and i wouldn't go anyway so guys i will end the bar plot it has taken us a lot of time