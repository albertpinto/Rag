 So guys, the plan is that how many of you know Python? Is that okay? All right. If you need a refresher in Python, raise your hands. You need a, so some of you need a refresher in Python. So I will start with a refresher in Python, the very basics. So today's class may be a bit redundant for some of you, but please bear with me. I want to make sure that we all baseline together so that we can make progress together. You may need to install anaconda and stuff for that. Oh, you haven't installed that. Well, how, like yesterday, you know, the instructions for installing anaconda have been posted on the site. Okay, and you can sit with Kate, Kate can help you and so forth and set up. Yeah so for now just follow along the topics. How about you, do you have Anaconda and everything installed? Okay good, wonderful. All right guys and Wonderful. All right, guys. So we start with the Python primer. Python is a very simple language. It is no wonder that it's become so very popular for data science. It's a general purpose language. People use it for everything these days. They use it to write their web services. They use it for everything these days they use it to write their web services they use it to make ui sometimes they use it for all sorts of back-end system administration they use it for devops and increasingly they also use it for data science in the world of data science the languages that were popular were r and three languages principally, R, Python and Julia. R used to be the king of the hill. Increasingly people are moving to Python and there's some forward looking people are also moving to Julia, but we'll stick with Python because that's where the momentum seems to be, the core mass seems to be. The Python language is called a scripted language. In other words, you don't have to declare the data type of anything. You can create variables. What are variables? Variables, think of variables as boxes in which you can put anything you want. So a box has a name and a value. So if x is a box, when you say x is equal to 5, what you're in effect doing is, imagine that you're creating a box, labeling it x, right? Think of one of those brown boxes in which you receive your Amazon packages or something like that. And it has a label x. And inside the box is the number 5. And you could choose to put something else into the box if you so wish right so uh the easiest way to think of python as a scripting language is in a scripted language boxes are like brown boxes you can put anything you want whereas in languages like java c c plus plus those are typed languages which means that you can put potatoes only a box meant for potatoes and you can put i don't know you can put let's say electronics only a box meant for electronics that's a sort of intuition behind it so uh more formally a variable of type int can only contain integers in it numbers in it like a box a variable type string can only contain integers in it, numbers in it. Like a box, a variable type string can only contain text in it. So they differ from that. So those are typed languages. Python is an untyped language. So you can take a box like an X, a variable, and put just about anything you want into it. The type is inferred by the value you assign into it, you put into it, so x is equal to 5 now there is a facility in python which i highly encourage that whenever you create a variable like this you can actually be more precise and say hey i meant the box x the variable x to contain integers is equal to 5. when you do it it it is called type hinting. It's a really good practice. I follow it all the time. As far as possible, use type hinting because the Python IDs like PyCharm, et cetera, they make it very easy to catch errors in your code. Now, you can write Python code in just Jupupyter notebooks and it's one of the things that we will do in a little bit i'll explain that a bit you create these variables you can do these statements if x is greater than four y is greater than six you can print it these are fl's statements now remember this is a refresher in python if you don't know python at all the first thing i would say is give this week to picking up python are we together give some time to quickly picking it up now remember it is just a refresher so what it means is uh facilities in python is you can convert a string this is a string i don't know guys could you please not leave the door open the ac is running and outside is hot Actually, Raj, you know the thing, the knob at the top that auto-pulls it? I don't know if you can see that. Push it back. Oh, it doesn't matter. I'll do that. Yes. Okay, leave it. I'll take care of it. Don't worry. Yeah, I'll do that. Okay, guys. So, Raj, leave it, leave it. I'll come and take care of it. So, certain Okay, so Raj, leave it, leave it. I'll come and take care of it. So certain conversions are easy. For example, if you create X is equal to potatoes, it is of type string. So when you give a string conversion, it remains string. On the other hand, and why? A string can be converted into a number. In other words, in quotes, if you say one, two, six, and you want to convert one, two, six from a string to a number, from a text to a number, you would say int. If it can be interpreted as an int, it will get interpreted as an int. But sometimes it cannot be. Like this text, one, two, one, two, five, point four is fine. But if you put the word apples next to it, that doesn't look like a number anymore. So if you try to convert it to a float, float is a floating point number, it will bail out on you, it will throw you an error saying could not convert it to that, right? And once again, if you like, you know, these are the basics of languages, variables and conversions and so on and so forth. I spent some time picking up Python. If you're familiar with any programming language, then this will look relatively straightforward to you. Now, so this is expected. It will throw something called a value error, could not convert string to float for this for understandable reasons. Now, when you think of a list, a laundry list or something like that, in Python, lists are that literally by square bracket, by the way, unlike Java, unlike C, C++, where lists and arrays are different things. In the basic sense, in the language of Python itself, they are the same. Square bracket means it's a list so you can go on adding elements to the list right so here here we are we are adding we are here's a list we are printing out its length you can reverse a list you can sort a list you can reverse sort a list so if you were to run this for example If you were to run this, for example, you will see that the list is this, its length is this, reverse, increasing order, decreasing order. You can append things to a list. How do you add another thing to it? You can list, you can add a list to a list using extend. This part is something that people often get wrong. You can't do append of one list to another. You have to do extend, right? You can find the index of one list to another you have to do extend right you can find the index of at what location is something you can insert at a given location something else remove from the list so these are list operations in other words many things you can do now list operation is something you'll be doing all the time in python so it would help if you pick it up by the way those of you who don't know python it's a very easy language that's why it's the first you'll be doing all the time in Python. So it would help if you pick it up. By the way, those of you who don't know Python, it's a very easy language. That's why it's the first language you teach kids, Python, quite often. The amount of Python that we need for this course is very minimal, very minimal. But nonetheless, if you're encountering it for the very first time, it can look intimidating. But if you give two days to it properly, you'll get the hang of it. It's not hard. In fact, many people here in this class, they started out not knowing Python and they picked it up along the way, literally. So pick it up from some basic book extent. And it has support for loops. So this is a game you can play, and this code is there, run this code. It is guess a number between one and thousand. Now, when you have a number between one and thousand, those of you who know binary search will of course know how to quickly search through it. But if you don't know, it's a game. You get only 10 turns and you have to guess the number right so i'll just walk through this code the computer comes up with a number in its mind which it doesn't tell you the secret answer then it maintains a state whether it is solved or not then it gives you a turn it says print a number and then it will take a guess it will ask you to input a number when you input the number it checks whether the number is in the right range else it checks if the guess is the number then it marks it sold else if guess is greater than the number it says guess is too big otherwise guess is too small and so forth so uh if you want so this is called a for loop it keeps on running for 10 turns and if you still fail to do that it will tell you you have failed to do that again i'm going a little bit fast over this the same thing you can write as a while loop what are loops loops are doing things again and again till you achieve till some condition makes you stop. Remember the stop condition is important, otherwise you are in trouble. So while turn is less than 10 means you have to keep increasing the value of turn somewhere. Every time you take a turn, you give user a turn to guess a number, you increase the counter. And check next time you do it again, you check whether all 10 turns are over or not, this is important. So if you take a shampoo bottle, it will say apply, rinse, and then it will say repeat. If you actually follow the instruction, you'll be you'll be done with the entire bottle in one shower, right? Because it has no stop condition. Right? So that's not a good code. That's when you miss the turn increment. That's when you miss the turn increment and checking whether you're done. They probably want you to do it twice or something like that. Repeat, they're probably meant to say repeat once right i don't know if the shampoo bottles even now say that but i remember reading it many years ago okay and counting number of lines likewise if you take a file you can count the number of lines now Now, those of you, the reason I mentioned this text is, those of you who are familiar with Java, C, C++ would remember that the same thing is pretty long bit of code. In Python, this entire thing is very short. In a line, you can do this. Much easier to do it in Python. Most of the things you'll find that as a language, Python is a simple language, elegant language. It does a lot of common things in one or two lines, which is why it is such a pleasure to learn quickly and become productive in. And once more, today usually what happens is when I teach, I give this notebook, I walk through it, I give about four or five hours teaching people Python, we don't have four or five hours, we have to move through with the lab. So I'm just walking through it. But if you do need the session, those of you who want a Python primer session, let the TAs know, we'll arrange your time and we can teach it to you from scratch right at the same time pick up a book on python basic book on python and try to make some progress and we'll be happy to teach it to you so printing the words in a file etc etc so we can do all sorts of things if you notice these things these are very short amounts of text to do many common things These are very short amounts of text to do many common things. I won't go into a lot of this. There is such thing as object oriented programming, but at this moment, I won't go into it because it'll eat up a lot of time. Then there is NumPy. NumPy is for doing numerical computations. I'll just spend a little bit of time on it. It is the first machine learning library you will encounter, numerical computations library you will encounter. So to motivate it, I will, this is worth talking about a little bit. When you take two lists, say length, suppose, and so let me frame the problem. Suppose you are a person who is going and measuring different pieces of land. So you go, you survey, so you measure this and you say, this is this long, you measure the width, it is this, is the width so you you have five pieces of land you get their lengths and you get their width now you have to find the area of each piece of land right so how would you do that area it turns out that if you use raw python you would do area by multiplying each length with each width. When you do that, you'll get your answer. But when you look at this code, it looks so different from the simple intuitive mathematical expression, which is length times width. You wonder, wouldn't it have been nicer if the Python syntax was easy like that? It would look like math. It doesn't look like math. It looks, frankly, this is where Python, despite its simplicity, is not simple enough. Isn't it? And if you try to do area length times width, you'll realize that it wouldn't work, actually. It would give you pretty bad results. In the same way, if you want to find the perimeter of each of the piece of land, perimeter means outer, the fence length, right, you will see this is how you would do, right, as a rectangular piece of land, there are two fences this way, two fences this way, so you would do it like this. But if you try to do this, you would realize that actually this is a disaster. It produces something that you don't expect it to produce. This is clearly incorrect and the right way to do it would be using this complicated Python syntax. And once again, you say, well, you know, this looks so much more non-intuitive than this beautiful mathematical expression. So it turns out that there is a another way of doing it using numpy numpy is a python library that has been written over the fortran and c libraries remember i said that most of the numerical computations are written in fortran and c you don't want to reinvent the wheel. What has happened is those libraries have been battle tested quite literally for 40, 50 years. Something that has been bottled back 50, 60 years actually, decades and decades of testing has gone into those libraries. All, a lot of very serious works are done, weather prediction, right? The nuclear equations, right? Our spaceship sending things to space and so on and so forth. NASA work, they are all done, and particle physics, atom smashing and so forth. All of these things have been done using Fortran and c libraries and they have been they are very mature numerical libraries are extraordinarily hard to get right so for example i'll give you a illustration if i were to give you two numbers and ask you to find the average two numbers x and y what would you do your intuitive sense would be do x plus y divided by 2 in your code isn't it and all of your programmers of some sort you'll do it like that in code but actually that happens to be wrong if you do x plus y divided by 2 you will not get the right answer always can you guess why yes excellent because the size of the register, because if X and Y are close to the maximum size that the data type can hold, integer can hold, then X plus Y will actually give you some bizarre value. It will overflow. Because computers can't count till infinity. They can count only up to a finite size once that size is exhausted you're done for right so if you add two very large numbers it'll overflow and so the right way to do that is now i'll let you find the right way to do that express y but it just shows you that even if i can't do X plus Y over two, and I need to be ultra careful, it should give you a sense how hard it is to do numerical computations correctly. So these libraries have been created after years and years of battle testing it in very mission critical situations. So NumPy is literally a layer, python layer on top of it one of the beautiful things of numpy is you don't need to know fortran of course but also look at the syntax you want to compute the area isn't this a lot more elegant than before compare length times width i create two variables length and width and compare it to the previous one instead Instead of writing area is equal to blah, blah, blah, isn't it far more intuitive to be able to say just length times width, multiply the two and you get the answer. Perimeter also, literally the math equation, whatever you would write in mathematics, it becomes that. That is the beauty of NumPy. you would write in mathematics. It becomes that. That is the beauty of NumPy. It makes your code very close to the algebraic equation that you would write, basic school algebra equation that you would write. And that is its beauty, right? And you could do obviously complicated things. NumPy arrays can contain numbers and other things, true, false values, et cetera. They will have certain consequences. So when you add a number and a true, false value, truth is considered one, false is considered zero. It will go at it. Now, these arrays can be two-dimensional or three-dimensional and four-dimensional. What are two-dimensional arrays called? Matrices. If you remember your school mathematics matrices you'll end up with matrices numpy also gives you the ability to do statistics right descriptive statistics you can take a bunch of number you can say mean and it will give you the mean and so forth of arrays of numbers right and you can do dot products or x dot y you could do using this so all of these operations if you want to find the histogram of a bunch of numbers random numbers you could do it like this right and i won't go into it very basic operations everything that you did in high school sine sine, cosine, they all come as functions. Literally whatever the math symbol is that you would write in school algebra or trigonometry or coordinate geometry, just put the NP dot before it. So to create a sine wave, sine function, do you notice that all you do is you put NP dot? Isn't it? It is as easy and intuitive as that if anything looks even simpler than python it is numpy fortunately that's what we do with data science we use numpy right now for dot products there is now an even easier syntax i just have to say x and then at the rate of and then y yeah that's right that is it x ampersand y a very good point that kyle mentioned uh the ampersand symbol this one could be replaced with x ampersand y okay it looks even more intuitive than that this is a numpy very useful library. And this is, we went through it blazingly fast. Now NumPy, good and bad of it. NumPy is just a set of functions, lots of functions. How many functions are there? The last I checked, a few hundred, right? Do you need to know how all those few hundred functions work? Not really. Most of the time you use common things like dot product, sine, cosine, create random values, maybe a handful of 10 of them, right? So saving grace, there are lots of NumPy cheat sheets available. So in this world of data science, the cheat sheet concept is very, very effective. So let's go and search for it. And I believe we have added it to the course portal. Kyle, if not, let's do that. If you look for NumPy cheat sheet, you will find lots of cheat sheets that people have created for NumPy. Let's look at this, here we go. In my view, this cheat sheet is way, way too complicated. It's too big a cheat sheet. You don't even need so much. And, but what you do is you just keep it on the, next to your table, you know, on your table next to your computer. And you keep looking at it. And most values are self-descriptive. But let me take a simpler cheat sheet. This is too big. Python for them but let me take a simpler cheat sheet this is too big uh python for data science and most of it will be covered in pandas anyway you won't directly be using numpy much yeah so yeah this one one pager cheat sheet is probably better yes this is more than enough. One single page, cheat sheet, will just help you do most of your work. And because in Pandas life gets simpler, you don't have to worry too much about it. Pick it up guys, Nampai. Now, even these, you won't use most of it. You will just use a few of these as you make progress with the course, like Kyle is mentioning mentioning then the next one we will do is pandas i will let kyle take over and explain pandas to you kyle would you like to do that yes sure here and explain pandas um i cannot share my screen i I'll stop sharing. I thought you were the host, you're not the host. No, I'm not the host now. Can you share now? Check if you can share. okay yes so um just a short reminder of why we need panda's data frame so in the morning we just saw about these ice cream sales and temperature right so generally how we represent that in a tabular format is that we have a column we have multiple columns for the features and one column for the target. Right. So this is how we how we would actually represent it. And so each row represents observations and each column represents features. Right. And our target variable is also a column in our data in a table so to represent this format in a pandas data frame it's usually like this so we have we have columns and then we have these rows and so this is why we actually need a Pandas data frame to represent our data. And it's easy for manipulation. So that's how it is. Let's just go back here. And so why do we use data manipulation? Why do we use programming languages instead of spreadsheets? It's just to keep track of manipulations and to automate manipulations. So in spreadsheets, it's not possible to keep track of whatulations and to automate manipulations so in spreadsheets it's not possible to you know keep track of what we do so pandas is a fast powerful flexible and easy to use open source data analysis and manipulation tool built on top of python programming language So we can import pandas using import pandas as PD. So PD is the convention that we use for numpy. It is NP. So wherever you see PD, it means it's using the pandas library. So in pandas library, there are a few terms that will be thrown around this course. So the first one is a data frame and that refers to the table as a whole so when we import our data set we will import them into a data frame and like we like we said so the each column would represent features and features and the rows would represent observations. And similarly for the row in the data frames vocabulary it's called an index. So each row is identified by its index. So for example, we say this observation we can identify it by the index code and similarly for columns we have labels so these are numbers and these are usually strings by which we identify so for example temperature could be a column label so that's a column and we uh they identified the column labels and they identified the column labels. Now to load a dataset, usually you can load it from different formats, for example, CSV, Excel, SQL, JSON, TSV, so you can download it from different formats. So in this case, we're using the simplest one, which is a CSV file. So a comma-separated file. And to import it, all you need is to, you need the path. And then you say df equals pd.readcsv, which will read the data, which will read the file. Okay. And it will store in a data frame. which will read the data, which will read the file. And it will store in a data frame. And in Jupyter notebooks, you can just say DF and it will format it beautifully in a table for us to view. So I've just downloaded this particular data set, which has four columns and let me see 31 31 rows okay so but how do we actually one more thing to emphasize go up a little bit see pandas this read csv or read anything is pretty prolific for example you notice we gave the source as a URL. It's not a local file. It's not on your laptop. It can just read it off the web also as it is doing now. Part of the power of the Pandas, most things are very flexible. You don't need, it's very flexible, whether file is remote or local or sick, and it can even read zip files right and things like that so just something to remember please continue yeah okay okay so at this point we have our data frame loaded so how do we analyze it so what all can we get out of it so that we can start with just inspecting a data frame so to inspect a data frame the first thing we generally do so in all our notebooks we will start with this we'll start by seeing what is the shape of our data frame so in this case it's pretty small so we can actually see the entire data frame here but when when there are really large data frames you won't be able to see all the rows and all the columns right so in that case how do you um get a sense of how you what your data frame looks like this is what you do so the first thing is you do is analyze its shape so the shape refers to the number of rows and number of columns and it is returned to us as a tuple. So we just say df.shape and we get 31,4. So we have 31 rows and 4 columns. So we get a basic idea of our data frame. So next what we want to do, we want to see a few of the observations we have in our data frame. So um in this case i want to see the first uh say 10 rows in my data frame i can just say df dot head and then pass in the number of samples i want to see so samples observations all refer to the rows right so so we want to see 10 samples. We can see 10 samples like this. So these are the first 10 rows. Now, I can also view the last few rows in my data frame. So the default value for the number of rows to be displayed is five. So that's what you see here. And if you specify a number, those many rows will be usable. see here and if you specify a number those many rows will be usable right so that is df.tale also okay we might want to know a few a little bit more about the data set so we can see that we see that the data set records minimum and maximum temperatures measured for each day of the jan of january 2010 so when we look at this data frame we see that okay it starts from zero and then goes to 30 and then the date of course are provided so we get a sense of what the data set uh tells us so we see that the temperature is measured in kelvin because it's 167 and then for them to be meaningful anyway so however we do not know if all the records records are from the same station or from different points so if we we cannot view the entire data frame at once we'll we'll never know if the station names are the same right so that information is still missing uh so okay so the next thing we would like to know is what are the types of so each column, what sort of information it is record is it recording is it a string or integer or float. We can check that using df dot d types right so and it will say what sort of in what is the data type of each column in our data frame. So we start with station date, Tmax and Tmin. So these are the four columns in my data frame. And what is it? So we see that station is of object type. So which means that this is this is a string. This is the others are all integers. so here uh date is stored as an integer data type uh which will not allow us to perform date time calculations okay uh as you can see this is all put together as one integer but in general you might see see in most data sets that you look for online, you will have a date column. And it's very useful to know how to manipulate date. And most times, date would be set as the index because that identifies your rows. I mean, that uniquely identifies each observation. So it's a very important data type, and that is date. So how do you work with dates? Is first if it's an integer data type, you would want to convert it to date time. So pandas provides you a way to convert your integers or string date time objects to the date time objects. So we have a separate format for that. So we'll convert date column to a date time object. If you learn about date time objects, okay, this is from the data wrangling course. So you learn in more detail in that course. So here we're just going to just brush through it so here to convert this convert this column we use this syntax right so we just say it's a format that you specify and by specifying this particular moment, you can read about this, this search in pandas and you can just type in data manipulation and you'll sort of explain what it is. So now our date is properly formatted. Right so that's good next is to string data type, so how do you convert. Next is to string data type. So how do you convert, say, a column from object to string data type? Pandas actually recommends it, that you store strings as strings and not as objects. So how do you do that? So that is also pretty similar. You just say df, you call that particular column okay and then you say as type so you what type do you want it to be and then here i want it to be a string so that is that so you say uh just replace the original column with the modifications that you make right so now when you check the data types of your data frame, it should show that it's a string data type. So you will, I mean when you download data sets, you might need to do some of these manipulations before you can analyze it. So it's good to know. Then comes the most important part is getting out statistics from the data. So, Pandas conveniently computes the descriptive statistics for us. So, in the previous notebook in NumPy, we had this NumPy functions that we use, right? np.me and then we passed in an array. So, it's more convenient here because we can calculate it compute it for all the columns and we get a lot of descriptive statistics that we can use so say count mean standard deviation minimum uh 25th quantile 50th quantile 75th quantile and the maximum values so when i say df dot describe it will describe it will actually only describe the um you know numerical columns columns which are of integer or flow type uh but in or sometimes even the date time will work, but it will not show say do not describe qualitative variables. In that sense, for example, we saw station is of string data type, so how do you what what does it even mean to say the minimum of this column. minimum of this column or maximum or standard deviation or mean so it makes no sense here so this these are called categorical variables you will see them in this course and also date also doesn't make sense that you say 25th font dial and all so these two need a different treatment so how do you do that we say df dotcribe and we also say datetime is numeric equals true. So then the datetime data will be treated as numeric data and we will get all these statistics out. Also, the second thing we do is we say include all. This is something we do very much in this course. Every time you use describe make sure to use include all right so uh only then all the variables you'll be able to uh see the statistics for all the variables so when i say include all all my columns are visible now so i see four four columns and then all their descriptive statistics here. So one thing you might note is that for date, tmax and tmin, which are numerical columns, we see these statistics. This is also an important point. There's something called nan, which is used when there is no variable here. Sorry, there is no value here, right? So it's equivalent to null value, okay? So for mean, yeah, so mean, for the station column, we see that only count, unique, top, and frequency are shown. So which means that, okay, so this is a categorical variable. So the only descriptive statistics that make sense are count, unique, top, and frequency. So count tells you how many variables and how many values are there how many unique values are there so it's just one so now we get to know that the the data set was for just one particular station right so earlier we were not able to see that from just head and tail uh when we do descriptive statistics now we we know for sure that okay that data set measures the temperature for only one station then uh top uh top tells you which is the most frequent uh frequent uh save value and in this case it's just the one single station and then what is its frequency how many times did. Say this the top value up here, so it says 31 times so for categorical values only this makes sense mean men all the all of these statuses don't make sense, so we get numbers. Right okay. means all of these statuses don't make sense so we get non-linears, right? Okay. So next is to change index. So earlier we had indices from, which were just integers, right? Starting from zero. But in most cases, what we set as index actually identifies each row uniquely. So you might want to look through a data set and find a column that actually sort of, you know, which identifies our rows uniquely. And in this case, it was the date. So the date column does that for us so we can we set that as our index to set index we have this syntax here you can so you can verify this notebook whenever you want this there's no need to remember all these uh syntax but just know what they do and what you can do with uh what you can do with pandas okay Okay. So, and in this case, uh, what we did was we set the index and now we're able to view it. Right. So let's just see if we, if this change was actually made in, in the original data from CVC, DF dot set index, this is actually, uh, go and change in the df data frame actually not so it doesn't change so date is still a column here it's not the index so what's happening here is this is something you'll you'll face all the time i make this mistake even now so you what you have to do is when you make this change you have to either set in place equals true so then let me show you yeah so either you set df dot set index and say in place equals true then the change is actually made in the data frame otherwise what happens is uh the change is only returned and it is not stored so so there are two methods you can do follow you can either say df equals df dot set index or say this so if you face this trouble the first thing you should that should ring a bell is okay did i did i actually make the change or not so when you do multiple manipulations like this you might miss out on one of these and it might cause trouble so it's good to know so the next part is visualization i think uh yeah it will be covered in the next notebook again end it here yeah i'll stop sharing yeah i'll stop sharing okay kyle are you done yeah i'm done okay give me a moment so people like rika and it may be useful to make them understand what this Python notebook and how this anaconda works. I think they may be clueless of what Kyle is saying. And all those cells, what they mean, because that would be a good introduction. And then I mean, let's do that. Let's do one thing. what they mean and so forth. What they mean because that would be a good introduction and then... Yeah, let's do that. Let's do one thing. Kyle, during the week, let's say Monday evening, let's give Monday evening for you guys to give a very basic from the scratch introduction. Would that be okay? Kyle, you and i will do it on monday evening here u.s monday evening your morning your tuesday morning yeah so the idea is we show the anaconda dashboard help them set it up pretty much you did that i believe yesterday but we'll do it all over again and then big the introductions to the j Notebook, like what does it mean? What a notebook means? What it is to do this cells? That's what you want, isn't it? So we will do all of those basics. Today, we could do that, but a lot of people are a bit familiar with these things. So it will slow them down, but we'll do a special session for you guys. All right, let me share my screen. Am I sharing my screen now? Or not? Yes, we are. So the last thing I'll do, and again, guys, I realized that today may be the hardest class because we covered a lot of territory introductory territory and in the lab also we are covering we are moving relatively fast usually we'll not be going so fast this is hard to different people to different degrees because people are at different levels but hopefully at the end of first week we'll all baseline to the same place and you will notice that the pace will be slower after that we won't be moving so fast it will be moving much slower from a lab perspective so let's take another see one of the things people do in data science is data visualization right as if i was not able to find those data sets. It was the last answer. I will leave it whatever is there. So don't worry, I'll find it and I'll add it. It must be there somewhere. So when you try to visualize, why should you visualize data? You learn a lot by visualizing the data. This is one of the great lessons. One of the things we will do in a homework or a lab is we'll look at something called a dinosaur's data set. And it's quite amazing actually what it tells you. There are data sets which can be vastly different, but their mathematical properties look identical. Right. And you don't know that they are different things till you actually visualize them. So remember, our human eye is the most marvelous learning engine. It can see things in the blink of an eye, right? It's a way survival instinct. In the forest, when there's a tiger there, you don't have time to ponder over it. Is this something that I need to worry about? Or what is this? You don't have time. If you want to survive, your mind has to instantly get it and run, isn't it? So human eye has evolved to be a marvelous learning engine. And because of that, we need to leverage that. Whenever we encounter data in real life, the first thing we should do is we should visualize it in ways. Now, today we'll go through the mechanics of things. Matplotlib is the default and the standard plotting library that people use in Python. It's quite easy. You take a data set. I'll just give you an example. You read the data set. How do you read it? Kyle just showed you. You can read it into a data frame, Pandas data frame. If you want to scatter, you want to do a plot of it. Just plot the data, the XY plane. You can do scatter. It'll plot the data. Right? Scatter plots are things we all are familiar with from our schools and so forth. So let me slightly decrease the font. You can scatter it it one line. The beautiful thing with Python is and Matplotlib is quite often the simple thing that you want is one line. I don't think there is any, even if you use some visualization tool or Excel or something, you'll have to do many clicks before you get a scatter plot. Right. But in Python, especially with matplotlib, most visualizations are just one liners. In one line, you can get what you want. Now, this one line syntax comes in a few variants. You could do it using data frame itself. You can now this plotting is built into the data from Pandas data frame itself, you can ask the data frame to plot again, it's scatter x y axis, the couple of variants of it producing the same result. If you want to build a histogram of the data, once again, this is x y data, just say hist on the data frame, it will produce a histogram. What are histograms? Frequency distribution. Frequency plots are called histograms. It will make a frequency plot of the data, right? And there are, again, a couple of different syntax that you can use. Then comes an interesting fact. Sometimes people say, ah, this looks a little boring, right? I don't like the looks of it. I want it to be a bit prettier. So this pursuit of prettiness or aesthetics and graphics are in data visualization. People go crazy over it, right? And they do a lot of things. So there are many libraries. For example, you could use another library called Bokeh. Bokeh will produce a data. You notice that it has become very interactive now, and you can zoom in, you can move it around the data. You can, the whole thing becomes interactive. You can zoom in, right? And to use this library with all of this functionality, it's just still just one line. You just have to make sure that you turn on those libraries. And then it remains a one line. The same one line of code will produce the library. And you have the ability now to zoom, to pan. This is called panning, and so on and so forth. And you can keep playing with it, like zoom out and so forth. We can uh you can keep playing with it like zoom out and so forth we won't go into that you can get back to the original library and there are other plotting things now when you write this uh one of the things is a data or data science tends to be close to mathematics and people like to remember that when I was writing it on the writing board, I was using symbols like beta naught, beta one. Do you remember? Right, in the notebook I was using. It turns out that in Python, when you do this using matplotlib, it's very, very friendly to mathematical symbols, but there's a catch to it. All mathematical symbols on the computer broadly is written using mathematical programming, sort of a notation, typesetting language. It's called LaTeX. So any research paper that you find in these fields, they are all written in LaTeX. Why? Because it makes possible, it makes it very easy to write mathematical symbols well easy is relative the first time you see this notation you're like it just doesn't look easy right so you see this thing math like like when you read this line and i'll just emphasize it where is that line gone um yeah well i went far down let me go up a little bit yeah when you look at this line well in the beginning this looks pretty obscure right what is this dollar symbol and this math bf x long arrow dollar and this y i'll explain what it is you're saying i'm going into the mathematical symbol world whenever dollar and dollars they are the boundaries of entering a mathematical symbol anything fenced by the dollar symbols is now you're in the math land you're talking mathsy right now in the math land you're talking math c right now in the math language math bf saying make it bold in bold letters so this what what make what in bold letters the y letter y so do you see the y here where my mouse is it may not be obvious but actually this is a bold y right and long right arrow backslash long right arrow what is that do you see this symbol this arrow going up that is a long right arrow right now whether you use a math notation or not it's up to you most people don't but the beautiful thing about matplotlib is in in case you want to get mathsy, and you know how to go mathsy, speak mathsy, which is LATIC, then, well, your plots can look, you can nicely sprinkle, just as you would sprinkle salt and pepper over your dish, you can nicely sprinkle mathsy symbols all over your plot. over your dash you can nicely sprinkle matzy symbols all over your plot right which is what we are doing here and you see linear relationship is y is equal to this this is how i wrote this line you can see that so that's sprinkling the matzy symbol here and you can change the color and you can go so by now you realize that what was one liner you can start getting more and more fancy you can do oh you can add and so let's see what all things we did look at this plot and uh this guy what what did we do adding you're adding annotations to it oh sometimes in graphs or plots people point out something you know uh people will say oh look at this point here will say, oh look at this point, here is something special, or look at this point, something else is special. People do that in your textbooks, etc. They make arrows and they do that. So how in the world do they do that? Oh, it turns out it's not hard. The facility is there, but by then it no more looks like a one line code. It begins to go a little bit more complicated so the point i'm trying to make is a lot of things are possible but with plotting plotting gets into the world of data visualization here's the good and the bad of it it's easy but it's verbose to do every tiny thing you have to write a little bit of code right and you put all of these pieces together and you create something that looks unique and nice. Like this graph, you would agree. It is pretty explanatory. It says a lot. But to say a lot, you have to write a little bit more code. And I won't go over this code. This is part of the matplotlib. You build skills gradually. Now, remember, why am i showing it to you do i expect you to do it the first day absolutely not as you start the course the only thing that i expect you to do is be able to write one line this line i hope you find it easy enough this line plot dot scatter x and y would you agree that that is easy right if you can do that you get your plot easily and your work is done but this is just to illustrate to you that much more can be done if you so wish right so what happens is that you do things in your experimentation but one fine day you discover something and then you want to go publish you want to write a research paper about it isn't it so when you write a research paper the first thing first time your paper is rejected even if you have done a brilliant thing because the reviewers will tell fonts are wrong typesetting is not nice and the plots look ugly literally that's what they'll say so then you have to sit and make your plots more professional your text text better, and so forth. So this is part of the journey that pointing it out that you can actually do that. Right? Now, you can often see, sometimes people put multiple plots together into one plot, isn't it? These are called multiplots or subplots. These are subplots of a plot. This is an example of taking a few datasets and then plotting it out like that. You can do that. And I won't go into this, this one, the dataset is missing, but pretty much it proves the point. So this is matplotlib. Are we together? So today, because today is the first day and we are covering a lot of territory and we need some time for everybody to come back to the same page and baseline. I won't teach you more. I won't actually go into regression, the topic that we covered, right? We won't do that. We'll do it from the next week, the actual labs and machine learning. We'll do it from next week. But this week, guys, your main tasks are here are the things we need to do all of us need to install anaconda right so you'll see a lot of references to snakes here python anaconda and whatnot right so this this space is littered with that the python version is a little bit so install anaconda the latest anaconda and the latest python there's a reason even if you have a python anaconda on your machine like sanjeev you have wipe it out the reason is recent versions of python are much faster and the anaconda has also support for much better support for example for mac and other things they just came out good support for the m1 chip right so in case you have the latest hardware it's worth installing the latest versions so do install the latest version of it make yourself familiar with jupiter notebook because we will spend our whole life here in jupiter notebooks now what in the world are jupiter notebooks so monday evening we'll give you guys a walkthrough and tutorial of anaconda and jupiter notebooks and get you started it's very easy jupiter notebooks are just like notebooks like digital notebooks what you're looking at is a jupiter notebook data scientists create their notebooks their work their thinking all in jupiter notebooks right so jupiter is your friend you'll spend most of your time with jupiter notebooks So Jupyter is your friend. You'll spend most of your time with Jupyter Notebooks. Now, as a bonus, if you want to write more extensive Python code, you may want to install PyCharm. It's an IDE, it's a development environment, but it's only if you're familiar with Python and you feel like writing reams of code. In this course, you won't write, you'll almost never write more than four, five lines of code. Because you're here not to do extensive programming. You're here to do data science. Learn this field. So never vast quantities of code, just tiny bits of code. And it is amazing what tiny bits of code can do. This field is about thinking through data, not about writing reams of senseless code. So that is that. So get that thing there. If you don't know Python, immediately start learning Python. There are many, many Python tutorials, courses, things like that. Do that. It's a prerequisite for the course. Fortunately, if you don't know it, you don't need to be frightened. One week is way too much time to learn it. You learn it typically in a day or two, right? Because we are not going to need very deep and extensive Python or its esoteric features. We just need the ability to create variables, store some values, write a for loop. That's about it. You don't need most esoteric aspects of Python. That's it. Make yourself very familiar with Python. Read the cheat sheets of NumPy, basic NumPy, and write a few basic plots with Matplotlib. Are we together? Okay. And I will keep the rest of the learning for next time onwards. From onwards, so make sure that you baseline on this, guys, by end of this week. So that next lab that we do, we actually do machine learning. We're together. We'll focus on machine learning. And that's it for today. Today, I'll end early because I noticed that there is a bit of a band gap. There's a differential between where people are in starting places. So I don't want to rush ahead and intimidate the ones who are just starting out. Use this week to baseline and then make progress. That's all for today, guys. So thank you.